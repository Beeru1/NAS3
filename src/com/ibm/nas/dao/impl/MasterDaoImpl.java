package com.ibm.nas.dao.impl;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;
import java.util.ResourceBundle;

import org.apache.log4j.Logger;

import com.ibm.nas.common.Constants;
import com.ibm.nas.common.DBConnection;
import com.ibm.nas.common.PropertyReader;
import com.ibm.nas.dao.MasterDao;
import com.ibm.nas.dto.ActorDto;
import com.ibm.nas.dto.AgencyUserDto;
import com.ibm.nas.dto.AlertDTO;
import com.ibm.nas.dto.AssignmentReportDTO;
import com.ibm.nas.dto.BulkAssignmentCircleDTO;
import com.ibm.nas.dto.BulkCityDTO;
import com.ibm.nas.dto.BulkCityZoneCodeCTO;
import com.ibm.nas.dto.BulkPinCodeDTO;
import com.ibm.nas.dto.BulkRsuDTO;
import com.ibm.nas.dto.CircleDTO;
import com.ibm.nas.dto.CircleForProductDTO;
import com.ibm.nas.dto.CircleForProductLob;
import com.ibm.nas.dto.CityDTO;
import com.ibm.nas.dto.CityZoneDTO;
import com.ibm.nas.dto.ColumnDto;
import com.ibm.nas.dto.FidDto;
import com.ibm.nas.dto.KmActorMstr;
import com.ibm.nas.dto.LOBDTO;
import com.ibm.nas.dto.LeadDetailsDTO;
import com.ibm.nas.dto.LeadStatusDTO;
import com.ibm.nas.dto.LogsDTO;
import com.ibm.nas.dto.MasterDataDTO;
import com.ibm.nas.dto.NoneditablefieldsDTO;
import com.ibm.nas.dto.PINCodeDTO;
import com.ibm.nas.dto.ProductDTO;
import com.ibm.nas.dto.ProductLobDTO;
import com.ibm.nas.dto.RSUDTO;
import com.ibm.nas.dto.ReportsDTO;
import com.ibm.nas.dto.RequestCategoryDTO;
import com.ibm.nas.dto.RequestTypeDTO;
import com.ibm.nas.dto.SourceDTO;
import com.ibm.nas.dto.StateDTO;
import com.ibm.nas.dto.SubSourceDTO;
import com.ibm.nas.dto.UserMstr;
import com.ibm.nas.dto.ZoneDTO;
import com.ibm.nas.exception.DAOException;
import com.ibm.nas.exception.LMSException;
import com.ibm.nas.services.MasterService;
import com.ibm.nas.services.impl.MasterServiceImpl;
import com.ibm.nas.wf.dto.BulkMatrixDownloadDTO;
import com.ibm.nas.wf.dto.UserDownloadDTO;

public class MasterDaoImpl implements MasterDao {
	protected static final String SQL_SELECT_PRODUCT_MSTR ="SELECT PRODUCT_ID, PRODUCT_LOB_ID, PRODUCT_NAME, PRODUCT_DESC, PRODUCT_HEAD_OLM_ID FROM PRODUCT_MSTR WHERE STATUS='A'  ";
	protected static final String SQL_SELECT_STATE_MSTR ="SELECT STATE_ID,STATE_CODE , STATE_NAME, STATE_DESC FROM STATE_MSTR  ";
	protected static final String SQL_SELECT_CIRCLE_MSTR ="SELECT CIRCLE_ID, CIRCLE_NAME, CIRCLE_DESC FROM CIRCLE_MSTR WHERE CIRCLE_ID > 0  ";
	protected static final String SQL_SELECT_CIRCLE_FOR_PRODUCT ="SELECT CIRCLE_ID, LOB_ID, CIRCLE_MSTR_ID, CIRCLE_NAME, CIRCLE_DESC FROM CIRCLE_MSTR WHERE CIRCLE_ID > 0 AND LOB_ID=? AND STATUS='A' ORDER BY CIRCLE_NAME  ";
	protected static final String SQL_SELECT_LOB_MSTR ="SELECT PRODUCT_LOB_ID, PRODUCT_LOB FROM PRODUCT_LOB WHERE STATUS = 'A'  ";
	protected static final String SQL_SELECT_USER_CIRCLE_MSTR ="SELECT CIRCLE_ID, CIRCLE_NAME, CIRCLE_DESC FROM CIRCLE_MSTR WHERE CIRCLE_ID >= 0  ";
	protected static final String SQL_SELECT_LOB_ID ="SELECT PRODUCT_LOB_ID, PRODUCT_LOB FROM PRODUCT_LOB WHERE PRODUCT_LOB = ? AND STATUS = 'A'  ";
	protected static final String SQL_SELECT_REQUEST_TYPE_MSTR ="SELECT  REQUEST_ID, REQUEST_TYPE FROM REQUEST_TYPE_MSTR  ";
	
	//ADDED BY NANCY AGRAWAL.
	protected static final String SQL_SELECT_ALERT_MSTR="SELECT ALERT_ID,ALERT_NAME FROM ALERT_EMAIL_MASTER  ";
	protected static final String SQL_UPDATE_LEAD_SUB_STATUS="UPDATE LEAD_SUB_STATUS SET SUB_STATUS=?,LEAD_SUB_STATUS_DISPLAY=? WHERE LEAD_STATUS_ID=? AND  SUB_STATUS_ID=? AND PRODUCT_LOB_ID=?";
	
	protected static final String SQL_UPDATE_LEAD_SUB_SUB_STATUS="UPDATE LEAD_SUB_SUB_STATUS SET SUB_SUB_STATUS=?,LEAD_SUB_SUB_STATUS_DISPLAY=? WHERE LEAD_SUB_STATUS_ID=? AND  SUB_SUB_STATUS_ID=? AND SUBSTATUS_CODE=?";
	protected static final String SQL_SELECT_LEAD_SUB_STATUSCODE="SELECT UNIQUE_ID FROM LEAD_SUB_STATUS WHERE LEAD_STATUS_ID=? AND SUB_STATUS_ID=? AND PRODUCT_LOB_ID=?  ";
	
	protected static final String SQL_SELECT_SOURCE_MSTR ="SELECT SOURCE_ID, SOURCE_NAME FROM SOURCE_MSTR  ";
	protected static final String SQL_SELECT_SUB_SOURCE_MSTR ="SELECT SUBSOURCE_ID, SUBSOURCE_NAME FROM SUB_SOURCE_MSTR  ";
	protected static final String SQL_SELECT_ZONE_MSTR ="select ZONE_ID,ZONE_CODE, ZONE_NAME,CITY_CODE from ZONE_MSTR  ";
	protected static final String SQL_SELECT_RSU_MSTR ="select RSU_ID, RSU_CODE, CITY_ZONE_CODE from RSU_MSTR  ";
	protected static final String SQL_SELECT_CITY_MSTR ="select CITY_ID,CITY_CODE ,CITY_NAME,CIRCLE_ID from CITY_MSTR  ";
	protected static final String SQL_SELECT_LEAD_STATUS ="SELECT LEAD_STATUS_ID, LEAD_STATUS, LEAD_STATUS_NAME FROM LEAD_STATUS  ";
	protected static final String SQL_SELECT_LEAD_STATUS_NAME="SELECT LEAD_STATUS FROM LEAD_STATUS WHERE LEAD_STATUS_ID=?  ";
	
	
	protected static final String SQL_VALIDATE_ZONE_CODE = "select ZONE_CODE from ZONE_MSTR where ZONE_CODE=? and CIRCLE_MSTR_ID= (select CIRCLE_MSTR_ID from CIRCLE_MSTR where CIRCLE_ID=?  and LOB_ID=? )  ";
	
	protected static final String SQL_SELECT_CIRCLE_CITYZONE_NEW="select CITY_ZONE_CODE,CITY_ZONE_NAME from CITY_ZONE_MSTR where CITY_CODE in(select CITY_CODE from CITY_MSTR where ZONE_CODE = ? )";
	protected static final String SQL_VALIDATE_CIRCLE_ID = "SELECT CIRCLE_ID FROM CIRCLE_MSTR WHERE CIRCLE_ID = ? AND LOB_ID=? AND CIRCLE_ID >= 0  ";
	protected static final String SQL_VALIDATE_USER_CIRCLE_ID = "SELECT CIRCLE_ID FROM CIRCLE_MSTR WHERE CIRCLE_ID = ?  ";
	
	protected static final String SQL_VALIDATE_CITY_CODE = "SELECT CITY_CODE FROM CITY_MSTR WHERE CITY_CODE = ? AND ZONE_CODE = ?  ";
	//protected static final String SQL_VALIDATE_ZONE_CODE = "SELECT ZONE_CODE FROM ZONE_MSTR WHERE ZONE_CODE = ? AND CITY_CODE = ?  ";
	protected static final String SQL_VALIDATE_RSU_CODE = "SELECT RSU_CODE FROM RSU_MSTR WHERE RSU_CODE = ? AND CITY_ZONE_CODE = ?  ";
	protected static final String SQL_VALID_RSU_CODE = "SELECT RSU_CODE FROM RSU_MSTR WHERE RSU_CODE = ?  ";
	//Query changed by Neetika for LMS phase -2 for valdiation of pin code with city zone coe//reverted back
	protected static final String SQL_VALIDATE_PINCODE = "SELECT PINCODE FROM PINCODE_MSTR WHERE PINCODE = ? AND CITY_ZONE_CODE = ?  ";
	//protected static final String SQL_VALIDATE_PINCODE = "SELECT PINCODE FROM PINCODE_MSTR WHERE PINCODE = ? AND CITY_ZONE_CODE = ?  ";
	protected static final String SQL_VALIDATE_PRODUCT_ID = "SELECT PRODUCT_ID FROM PRODUCT_MSTR WHERE PRODUCT_ID = ? AND STATUS = 'A'  ";
	protected static final String SQL_VALIDATE_USER_LOGIN_ID = "SELECT USER_LOGIN_ID FROM USER_MSTR WHERE USER_LOGIN_ID = ?  ";
	protected static final String SQL_VALIDATE_PRODUCT_LOB_ID = "SELECT PRODUCT_LOB_ID FROM PRODUCT_LOB WHERE PRODUCT_LOB_ID = ?  ";
	protected static final String SQL_VALIDATE_STATE_CODE ="SELECT STATE_CODE FROM STATE_MSTR WHERE STATE_CODE = ?  ";
	protected static final String SQL_VALIDATE_REQUEST_ID ="SELECT REQUEST_ID FROM REQUEST_TYPE_MSTR WHERE REQUEST_ID = ?  ";
	protected static final String SQL_VALIDATE_SOURCE_ID ="SELECT SOURCE_ID FROM SOURCE_MSTR WHERE SOURCE_ID = ?  ";
	protected static final String SQL_VALIDATE_SUB_SOURCE_ID ="SELECT SUBSOURCE_ID FROM SUB_SOURCE_MSTR WHERE SUBSOURCE_ID = ?  ";
	protected static final String SQL_VALIDATE_ACTOR_ID = "SELECT KM_ACTOR_ID FROM KM_ACTORS WHERE KM_ACTOR_ID = ?  ";
	protected static final String SQL_VALIDATE_PRODUCT_ID_NAME="SELECT PRODUCT_ID FROM PRODUCT_MSTR WHERE PRODUCT_ID = ? AND  PRODUCT_LOB_ID=?  ";
	protected static final String SQL_SELECT_LEAD_STATUS_CC ="SELECT LEAD_STATUS_ID, LEAD_STATUS, LEAD_STATUS_NAME FROM LEAD_STATUS WHERE LEAD_STATUS IN ('LEAD_OPEN','QUALIFIED')   ";
	protected static final String SQL_SELECT_LEAD_STATUS_DIALLER ="SELECT LEAD_STATUS_ID, LEAD_STATUS, LEAD_STATUS_NAME FROM LEAD_STATUS WHERE LEAD_STATUS IN ('QUALIFIED','QUALIFICATION_LOST','LEAD_CALLBACK')   ";
	protected static final String SQL_SELECT_PINCODE_MSTR ="SELECT PINCODE from PINCODE_MSTR where STATUS = 'A'  ";
	protected static final String SQL_SELECT_TELEMEDIA_PRODUCT ="SELECT P.PRODUCT_ID,P.PRODUCT_NAME,P.PRODUCT_LOB_ID,PL.PRODUCT_LOB from PRODUCT_MSTR P ,PRODUCT_LOB PL  where P.PRODUCT_LOB_ID = PL.PRODUCT_LOB_ID and   PL.PRODUCT_LOB like '%Telemedia%' and PL.STATUS = 'A' and P.STATUS='A'  ";
	protected static final String SQL_SELECT_MOBILITY_PRODUCT ="SELECT PRODUCT_ID,PRODUCT_NAME from PRODUCT_MSTR where PRODUCT_LOB_ID = (SELECT PRODUCT_LOB_ID from PRODUCT_LOB where PRODUCT_LOB like '%Mobility%') and status = 'A'  ";
	protected static final String SQL_SELECT_DTH_PRODUCT ="SELECT PRODUCT_ID from PRODUCT_MSTR where PRODUCT_LOB_ID = (SELECT PRODUCT_LOB_ID from PRODUCT_LOB where UPPER(PRODUCT_LOB) like UPPER('%DTH%')) and status = 'A'  ";
	protected static final String SQL_SELECT_CITY_FOR_CIRCLE = "select CITY_ID,CITY_CODE ,CITY_NAME,ZONE_CODE from CITY_MSTR WHERE ZONE_CODE in (SELECT ZONE_CODE FROM ZONE_MSTR WHERE CIRCLE_MSTR_ID=?  ) AND STATUS='A' ORDER BY CITY_NAME  ";
	protected static final String SQL_SELECT_CITY_FOR_ZONE = "select CITY_ID,CITY_CODE ,CITY_NAME,CIRCLE_ID from CITY_MSTR WHERE CITY_CODE = ?  ";
	protected static final String SQL_SELECT_CITY_ZONE_FOR_CITY = "SELECT  CITY_ZONE_ID,CITY_ZONE_CODE,CITY_ZONE_NAME FROM CITY_ZONE_MSTR WHERE CITY_CODE=? AND STATUS='A' ORDER BY CITY_ZONE_NAME  ";
	protected static final String SQL_SELECT_ZONE_FOR_CIRCLE = "select ZONE_CODE,ZONE_NAME from ZONE_MSTR where CIRCLE_MSTR_ID = ?  ";
	protected static final String SQL_SELECT_PIN_FOR_CITY = "SELECT PINCODE from PINCODE_MSTR where STATUS = 'A' AND CITY_CODE = ?  ";
	protected static final String SQL_SELECT_ZONE_FOR_CITY ="select ZONE_ID,ZONE_CODE, ZONE_NAME from ZONE_MSTR WHERE ZONE_CODE = ? AND STATUS='A'  ";
	protected static final String SQL_SELECT_CITY_FOR_PIN ="SELECT CITY_CODE,CITY_NAME FROM CITY_MSTR WHERE CITY_CODE = (SELECT CITY_CODE FROM PINCODE_MSTR WHERE PINCODE=?)  ";
	protected static final String SQL_SELECT_RSU_FOR_ZONE = "SELECT RSU_ID, RSU_CODE FROM RSU_MSTR WHERE ZONE_CODE = ? AND STATUS = 'A'  ";
	protected static final String SQL_SELECT_PRODUCT_LOB_MSTR = "SELECT PRODUCT_LOB, PRODUCT_LOB_ID FROM PRODUCT_LOB where status='A'  ";
	/*Added By amarjeet */
	protected static final String SQL_SELECT_ZONE_FOR_CITY_DIALER ="select ZONE_CODE from CITY_MSTR WHERE CITY_CODE = ? AND STATUS='A'  ";
	protected static final String SQL_SELECT_CIRCLE_FOR_USER ="SELECT CM.CIRCLE_NAME, CM.CIRCLE_ID, (SELECT PRODUCT_LOB FROM PRODUCT_LOB WHERE PRODUCT_LOB_ID = UM.LOB_ID)  FROM CIRCLE_MSTR CM , USER_MAPPING UM  WHERE UM.USER_LOGIN_ID = ? and UM.CIRCLE_ID =CM.CIRCLE_ID AND CM.LOB_ID = UM.LOB_ID  ";
	protected static final String SQL_SELECT_LOB_FOR_USER ="SELECT DISTINCT(PL.PRODUCT_LOB), PL.PRODUCT_LOB_ID FROM USER_MAPPING UM , PRODUCT_LOB PL WHERE USER_LOGIN_ID = ?  AND UM.LOB_ID = PL.PRODUCT_LOB_ID  ";
	protected static final String SQL_SELECT_LOB_LIST_FOR_USER ="SELECT DISTINCT(PL.PRODUCT_LOB), PL.PRODUCT_LOB_ID FROM USER_MAPPING UM , PRODUCT_LOB PL WHERE USER_LOGIN_ID = ? AND UM.LOB_ID = PL.PRODUCT_LOB_ID  ";
	protected static final String SQL_SELECT_CIRCLE_FOR_USER_LOB ="SELECT DISTINCT(CM.CIRCLE_NAME), CM.CIRCLE_ID FROM CIRCLE_MSTR CM , USER_MAPPING UM  WHERE UM.USER_LOGIN_ID = ? and um.CIRCLE_ID =CM.CIRCLE_ID AND UM.LOB_ID =?  ";
	protected static final String SQL_SELECT_CHANNEL_PARTNER="SELECT USER.USER_FNAME , USER.USER_LNAME , USER.USER_LOGIN_ID , USER.PARTNER_NAME FROM USER_MSTR USER , USER_MAPPING MAPPING , CIRCLE_MSTR CM WHERE USER.KM_ACTOR_ID = ? AND MAPPING.LOB_ID = CM.LOB_ID AND USER.USER_LOGIN_ID = MAPPING.USER_LOGIN_ID  AND MAPPING.CIRCLE_ID = CM.CIRCLE_ID AND CM.LOB_ID = ? AND CM.CIRCLE_MSTR_ID = ? order by USER_FNAME   ";
	protected static final String SQL_SELECT_USER_DETAILS ="select UM.* , (select CIRCLE_MSTR_ID FROM CIRCLE_MSTR WHERE CIRCLE_ID = UM.CIRCLE_ID and LOB_ID = UM.LOB_ID) from USER_MAPPING UM where UM.USER_LOGIN_ID = ? ";
	protected static final String SQL_ZONE_ID ="select ZONE_ID  from ZONE_MSTR where ZONE_CODE = ?  ";
	protected static final String SQL_CITY_ZONE_ID ="select CITY_ZONE_ID  from CITY_ZONE_MSTR where CITY_ZONE_CODE = ?   ";
	protected static final String SQL_CITY_ZONE_CODE ="select CITY_ZONE_CODE  from CITY_ZONE_MSTR where CITY_ZONE_ID = ?   ";
	protected static final String SQL_ZONE_CODE ="select ZONE_CODE  from ZONE_MSTR where ZONE_ID = ?  ";
	protected static final String SQL_SELECT_PARAMETER = "SELECT PARAM_NAME FROM PARAMETER_MASTER WHERE ucase(FORM_NAME) = ucase(?) AND STATUS = 'A'  ";
	
	/*Added By amarjeet */
	/*Added By Bhaskar */
	protected static final String SQL_SELECT_CIRCLE_FOR_PRODUCTLOB="SELECT CIRCLE_ID,CIRCLE_NAME FROM CIRCLE_MSTR WHERE CIRCLE_ID > 0 AND LOB_ID=? AND STATUS='A'   "; 
	protected static final String SQL_VALIDATE_RSUCODE_NEW="SELECT RSU_CODE  FROM RSU_MSTR WHERE  RSU_CODE=? AND CITY_ZONE_CODE=?  ";
	protected static final String SQL_VALIDATE_PINCODE_NEW=" SELECT PINCODE  FROM PINCODE_MSTR WHERE  PINCODE=? AND CITY_ZONE_CODE=?   ";
	protected static final String SQL_VALIDATE_CITY_ID_NEW="SELECT CITY_CODE FROM CITY_MSTR WHERE CITY_CODE=? AND ZONE_CODE=?  ";
	protected static final String SQL_VALIDATE_ZONEID_NEW="select ZONE_CODE from ZONE_MSTR where ZONE_CODE=? and CIRCLE_MSTR_ID=(select CIRCLE_MSTR_ID from CIRCLE_MSTR where CIRCLE_ID=? and LOB_ID=(select PRODUCT_LOB_ID from PRODUCT_MSTR where PRODUCT_ID=?))  ";
	protected static final String SQL_VALIDATE_CIRCLE_ID_NEW="SELECT CIRCLE_ID FROM CIRCLE_MSTR WHERE CIRCLE_ID = ? AND LOB_ID=? AND CIRCLE_ID > 0   ";
	protected static final String SQL_SELECT_ASSIGNMENTCIRCLE_TYPE=" select CIRCLE_ID,CIRCLE_NAME from CIRCLE_MSTR where STATUS='A'";
	protected static final String SQL_SELECT_ASSIGNMENTLOB_TYPE="select PRODUCT_LOB,PRODUCT_LOB_ID from PRODUCT_LOB where status='A'";
	protected static final String SQL_SELECT_ASSIGNMENTDOWNLOADREPORT_NAME=" SELECT ASSIGNMENT_KEY,CIRCLE_ID,CITY_ID,LEVEL_ID,OLM_ID,PINCODE,PRIMARY_AUTH,PRODUCT_LOB_ID,RSU_ID,USER_TYPE,ZONE_ID,CREATED,CREATED_BY,UPDATED_BY,UPDATED FROM ASSIGNMENT_MATRIX WHERE CIRCLE_ID=? AND PRODUCT_LOB_ID=? AND USER_TYPE=? AND STATUS='A'";
	protected static final String SQL_SELECT_ASSIGNMENTDOWNLOADREPORT=" SELECT ASSIGNMENT_KEY,CIRCLE_ID,CITY_ID,LEVEL_ID,OLM_ID,PINCODE,PRIMARY_AUTH,PRODUCT_LOB_ID,RSU_ID,USER_TYPE,ZONE_ID,CREATED,CREATED_BY,UPDATED_BY,UPDATED FROM ASSIGNMENT_MATRIX WHERE CIRCLE_ID=? AND PRODUCT_LOB_ID=?  AND STATUS='A'";
	protected static final String SQL_PRODUCT_LOB_NEW="SELECT PRODUCT_LOB_ID,PRODUCT_LOB from PRODUCT_LOB where PRODUCT_LOB_ID=? AND STATUS='A'   ";
	/* Added By Parnika */
	protected static final String SQL_SELECT_LOG_TYPE = "SELECT REPORT_ID, REPORT_NAME FROM REPORT_MSTR WHERE REPORT_STATUS = 'L'  ";
	protected static final String SQL_SELECT_REPORT_TYPE = "SELECT REPORT_ID, REPORT_NAME FROM REPORT_MSTR WHERE REPORT_STATUS = 'A'  ";
	protected static final String SQL_SELECT_REPORT_TYPE_DAY_MONTHLY = "SELECT REPORT_ID, REPORT_NAME FROM REPORT_MSTR WHERE REPORT_STATUS = 'P'  ";
	
	
	protected static final String SQL_SELECT_REPORT_NAME = "SELECT REPORT_NAME FROM REPORT_MSTR WHERE REPORT_ID = ?  ";
	protected static final String SQL_SELECT_MASTER_TYPE = "SELECT MASTER_NAME, MASTER_ID FROM MASTER_DATA WHERE MASTER_STATUS = 'A'  ";
	protected static final String SQL_SELECT_ACTOR = "SELECT KM_ACTOR_ID, KM_ACTOR_NAME  FROM KM_ACTORS WHERE  KM_ACTOR_ID > ?  ";
	protected static final String SQL_SELECT_ACTOR_FOR_USERCREATION = "SELECT KM_ACTOR_ID, KM_ACTOR_NAME  FROM KM_ACTORS WHERE  KM_ACTOR_ID != ? AND KM_ACTOR_ID NOT IN ("+Constants.KM_SUPERADMIN_ACTOR_ID+","+Constants.KM_PANINDIA_USER_ACTOR_ID+","+Constants.KM_ACTOR_ID+")  ";
	/* End of changes by Parnika  */
	protected static final String SQL_VALIDATE_FEASIBILITY_LEAD_ID = "SELECT * FROM LEAD_DATA WHERE LEAD_ID = ? AND lead_status_id = ?";
	
	
	//Added By Bhaskar
	protected static final String SQL_SELECT_MOBILITY_PRODUCT_NEW="SELECT P.PRODUCT_ID,P.PRODUCT_NAME,P.PRODUCT_LOB_ID,PL.PRODUCT_LOB from PRODUCT_MSTR P ,PRODUCT_LOB PL  where P.PRODUCT_LOB_ID = PL.PRODUCT_LOB_ID and   PL.PRODUCT_LOB like '%Mobility%' and PL.STATUS = 'A' and P.STATUS='A'  ";
	protected static final String SQL_SELECT_OTHERS_PRODUCT="SELECT P.PRODUCT_ID,P.PRODUCT_NAME,P.PRODUCT_LOB_ID,PL.PRODUCT_LOB from PRODUCT_MSTR P ,PRODUCT_LOB PL  where P.PRODUCT_LOB_ID = PL.PRODUCT_LOB_ID and   PL.PRODUCT_LOB_ID NOT IN (1,2)  and PL.STATUS = 'A' and P.STATUS='A'  ";
	protected static final String SQL_VALIDATE_CAMPAIGN_FIELD="SELECT LEAD_CAMPAIGN_NAME FROM LEAD_CAMPAIGN_DETAIL WHERE LEAD_CAMPAIGN_NAME =?  ";
	
	//Added by Neetika on 18-Nov-2013 for open leads bulk registration new column zone_code
	
	protected static final String SQL_VALIDATE_ZONE_CIRCLE = "select ZONE_CODE from ZONE_MSTR where zone_code=? and CIRCLE_MSTR_ID= (select CIRCLE_MSTR_ID from CIRCLE_MSTR where CIRCLE_ID=? and LOB_ID=(select " +
			"PRODUCT_LOB_ID from PRODUCT_MSTR where PRODUCT_ID=?))  ";
	
	protected static final String SQL_VALIDATE_CITY_FROM_ZONE = "select CITY_CODE  from CITY_MSTR where ZONE_CODE=? and CITY_CODE=?  ";
	protected static final String SQL_VALIDATE_CITY_ZONE_CODE = "select CITY_ZONE_CODE from CITY_ZONE_MSTR where CITY_ZONE_CODE=? and CITY_CODE=?  ";
	protected static final String SQL_VALIDATE_ZONE_CIRCLE_REVERSE = " select CL.CIRCLE_ID, PM.PRODUCT_ID from (select CIRCLE_ID,LOB_ID from CIRCLE_MSTR where CIRCLE_MSTR_ID in(select CIRCLE_MSTR_ID from ZONE_MSTR where zone_code in ( " +
			"select zone_code  from CITY_MSTR where CITY_CODE in ( select CITY_CODE  from CITY_ZONE_MSTR where CITY_ZONE_CODE=?))) and circle_id=?  ) as CL, PRODUCT_MSTR PM where " +
			"CL.LOB_ID=PM.PRODUCT_LOB_ID  and PM.PRODUCT_ID=?   ";
	
	protected static final String SQL_VALIDATE_CITY_REVERSE = " select CL.CIRCLE_ID, PM.PRODUCT_ID from (select CIRCLE_ID,LOB_ID from CIRCLE_MSTR where CIRCLE_MSTR_ID in (select CIRCLE_MSTR_ID from ZONE_MSTR where zone_code IN ( " +
	"select zone_code  from CITY_MSTR where CITY_CODE= ? )) and circle_id=?  ) as CL, PRODUCT_MSTR PM where " +
	"CL.LOB_ID=PM.PRODUCT_LOB_ID  and PM.PRODUCT_ID=?   ";
	
	protected static final String SQL_VALIDATE_PIN_REVERSE="select CL.CIRCLE_ID, PM.PRODUCT_ID from (select CIRCLE_ID,LOB_ID from CIRCLE_MSTR where CIRCLE_MSTR_ID in(select CIRCLE_MSTR_ID from ZONE_MSTR where zone_code in (" +
			"select zone_code  from CITY_MSTR where CITY_CODE in ( select CITY_CODE  from CITY_ZONE_MSTR where CITY_ZONE_CODE in(select CITY_ZONE_CODE from PINCODE_MSTR where PINCODE=?)))) and circle_id=? ) as CL, PRODUCT_MSTR PM where  " +
			" CL.LOB_ID=PM.PRODUCT_LOB_ID  and PM.PRODUCT_ID=?  ";
	protected static final String SQL_VALIDATE_CIRCLE_ID_PROD = "SELECT CIRCLE_ID FROM CIRCLE_MSTR WHERE CIRCLE_ID = ? AND LOB_ID=(select PRODUCT_LOB_ID from product_mstr where product_id=?) AND CIRCLE_ID > 0  ";
	//end
	
	/* Added by Parnika for LMS Phase 2 */	
	
	protected static final String SQL_SELECT_CIRCLE_LOB_MSTR = "SELECT CIRCLE_NAME, CIRCLE_MSTR_ID , CIRCLE_ID FROM CIRCLE_MSTR WHERE STATUS = 'A' AND LOB_ID = ? AND CIRCLE_ID >= 0  ";
	protected static final String SQL_SELECT_CIRCLE_LOB_MSTR_ALL = "SELECT CIRCLE_NAME, CIRCLE_MSTR_ID , CIRCLE_ID FROM CIRCLE_MSTR WHERE STATUS = 'A' AND CIRCLE_ID >= 0  ";
	
	protected static final String SQL_SELECT_CIRCLE_ZONE_MSTR = "SELECT ZONE_CODE , ZONE_NAME as ZONE_NAME FROM ZONE_MSTR WHERE STATUS = 'A' AND CIRCLE_MSTR_ID = ?  ";
	
	protected static final String SQL_SELECT_CIRCLE_ZONE_MSTR_NEW="select ZONE_CODE,ZONE_NAME from ZONE_MSTR where CIRCLE_MSTR_ID = ? AND STATUS='A'";
	
	protected static final String SQL_SELECT_CIRCLE_CITY_MSTR_NEW="select CITY_CODE,CITY_NAME from CITY_MSTR where ZONE_CODE in (select ZONE_CODE from ZONE_MSTR where CIRCLE_MSTR_ID = ? AND STATUS='A')";
	protected static final String SQL_SELECT_CIRCLE_CITYZONE__MSTR_NEW="select CITY_ZONE_CODE,CITY_ZONE_NAME from CITY_ZONE_MSTR where CITY_CODE in(select CITY_CODE from CITY_MSTR where ZONE_CODE in (select ZONE_CODE from ZONE_MSTR where CIRCLE_MSTR_ID = ? AND STATUS='A'))";

	protected static final String SQL_SELECT_CIRCLE_CITY_ZONE_MSTR = "SELECT cz.CITY_ZONE_ID as ZONE_CODE, cz.CITY_ZONE_NAME as ZONE_NAME FROM CITY_ZONE_MSTR cz , CIRCLE_MSTR cm, ZONE_MSTR zm , CITY_MSTR cim WHERE cm.CIRCLE_MSTR_ID = zm.CIRCLE_MSTR_ID AND zm.ZONE_CODE = cim.ZONE_CODE AND cim.CITY_CODE = cz.CITY_CODE AND cz.STATUS = 'A' AND cm.CIRCLE_MSTR_ID = ?  ";	
	protected static final String SQL_SELECT_CITY_CODE_MSTR = "SELECT CITY_CODE, CITY_NAME FROM CITY_MSTR WHERE STATUS = 'A' AND ZONE_CODE = ?  ";	
	protected static final String SQL_SELECT_CITY_ZONE_CODE_MSTR = "SELECT CITY_ZONE_CODE, CITY_ZONE_NAME FROM CITY_ZONE_MSTR WHERE STATUS = 'A' AND CITY_CODE = ?  ";	
	protected static final String SQL_SELECT_PINCODE_CITYZONE_MSTR = "SELECT PINCODE FROM PINCODE_MSTR WHERE STATUS = 'A' AND CITY_ZONE_CODE = ?  ";	
	protected static final String SQL_SELECT_RSU_CITYZONE_MSTR = "SELECT RSU_ID, RSU_CODE FROM RSU_MSTR WHERE STATUS = 'A' AND CITY_ZONE_CODE = ?  ";	
	protected static final String SQL_GET_CIRCLE_ID = "SELECT CIRCLE_ID FROM CIRCLE_MSTR WHERE CIRCLE_MSTR_ID = ?  ";
	protected static final String SQL_GET_CIRCLE_MSTR_ID = "SELECT CIRCLE_MSTR_ID FROM CIRCLE_MSTR WHERE CIRCLE_ID = ? AND LOB_ID=?  ";
	protected static final String SQL_SELECT_CIRCLE_ZONE_TYPE_MSTR = "SELECT ZONE_ID as ZONE_CODE , ZONE_NAME as ZONE_NAME FROM ZONE_MSTR WHERE STATUS = 'A' AND CIRCLE_MSTR_ID = ?  ";
	protected static final String SQL_GET_CIRCLE_MASTER_ID = "select CIRCLE_MSTR_ID  from CIRCLE_MSTR where CIRCLE_NAME = ? and LOB_ID = ?";
	
	
	protected static final String SQL_SELECT_CIRCLE_LOB_MSTR_NEW_USER="SELECT C.CIRCLE_ID,C.CIRCLE_NAME from USER_MAPPING U,CIRCLE_MSTR C where U.LOB_ID=? AND U.USER_LOGIN_ID=? AND U.LOB_ID=C.LOB_ID AND U.CIRCLE_ID=C.CIRCLE_ID  ";
	protected static final String SQL_SELECT_CIRCLE_LOB_MSTR_NEW="SELECT C.CIRCLE_MSTR_ID,C.CIRCLE_NAME from USER_MAPPING U,CIRCLE_MSTR C where U.LOB_ID=? AND U.USER_LOGIN_ID=? AND U.LOB_ID=C.LOB_ID AND U.CIRCLE_ID=C.CIRCLE_ID  ";
	protected static final String SQL_SELECT_CIRCLE_ID_NEWONE="SELECT C.CIRCLE_ID FROM USER_MAPPING U,CIRCLE_MSTR C where C.CIRCLE_ID=? AND C.LOB_ID=? AND U.USER_LOGIN_ID=? AND U.LOB_ID=C.LOB_ID AND U.CIRCLE_ID=C.CIRCLE_ID  ";
	/* End of changes by Parnika */
	
	// <Added by Sudhanshu 
	public static final String SQL_SELECT_RSU = "select RSU_CODE from RSU_MSTR where RSU_CODE = ?  ";
	
	protected static final String SQL_SELECT_USERDOWNLOADREPORT_NAME_CIRCLECOORDINATOR="SELECT U.USER_LOGIN_ID,UM.CIRCLE_ID,U.USER_FNAME,U.USER_MNAME,U.USER_LNAME,U.ROLE,U.USER_EMAILID,U.USER_MOBILE_NUMBER,U.PARTNER_NAME,U.CREATED_DT,U.CREATED_BY,U.UPDATED_DT,U.UPDATED_BY ,U.STATUS from USER_MSTR U,USER_MAPPING UM where UM.LOB_ID=? AND U.KM_ACTOR_ID=? AND U.USER_LOGIN_ID=UM.USER_LOGIN_ID  ";
	protected static final String SQL_SELECT_USERDOWNLOADREPORT_NAME="SELECT U.USER_LOGIN_ID,UM.CIRCLE_ID,U.USER_FNAME,U.USER_MNAME,U.USER_LNAME,U.ROLE,U.USER_EMAILID,U.USER_MOBILE_NUMBER,U.PARTNER_NAME,U.CREATED_DT,U.CREATED_BY,U.UPDATED_DT,U.UPDATED_BY ,U.STATUS  from USER_MSTR U,USER_MAPPING UM where UM.CIRCLE_ID=?   AND  UM.LOB_ID=? AND U.KM_ACTOR_ID=? AND U.USER_LOGIN_ID=UM.USER_LOGIN_ID  ";
	//Added by Sudhanshu>
	
	/* Added by parnika */
	protected static final String SQL_GET_DETAILS_FROM_LEAD = "SELECT LD.LEAD_ID, PM.PRODUCT_LOB_ID , LPD.CIRCLE_ID FROM LEAD_DATA LD, LEAD_PROSPECT_DETAIL LPD , PRODUCT_MSTR PM WHERE LD.LEAD_PROSPECT_ID = LPD.LEAD_PROSPECT_ID AND PM.PRODUCT_ID = LD.PRODUCT_ID AND LD.LEAD_ID = ?  ";
	
	protected static final String SQL_SELECT_RSU_IN_CIRCLE = "SELECT RSU_CODE FROM RSU_MSTR RM, CITY_ZONE_MSTR CZM, CITY_MSTR CIM, ZONE_MSTR ZM, CIRCLE_MSTR CM WHERE RM.CITY_ZONE_CODE = CZM.CITY_ZONE_CODE AND CZM.CITY_CODE = CIM.CITY_CODE AND CIM.ZONE_CODE = ZM.ZONE_CODE AND ZM.CIRCLE_MSTR_ID = CM.CIRCLE_MSTR_ID AND CM.CIRCLE_ID = ? AND CM.LOB_ID = ? AND RM.RSU_CODE = ? AND RM.STATUS = 'A'  ";
	
	protected static final String SQL_SELECT_LEAD_STATUS_MTD ="SELECT LEAD_STATUS_ID, LEAD_STATUS, LEAD_STATUS_NAME FROM LEAD_STATUS WHERE LEAD_STATUS_ID IN (" +Constants.LEAD_STATUS_OPEN +","+Constants.LEAD_STATUS_VERIFICATION +","+Constants.LEAD_STATUS_QUALIFIED +","+Constants.LEAD_STATUS_ASSIGNED +","+Constants.LEAD_STATUS_RE_ASSIGNED +","+Constants.LEAD_STATUS_WON +","+Constants.LEAD_SUB_STATUS_LOST +","+Constants.LEAD_STATUS_FEASIBILITY +","+Constants.LEAD_STATUS_WIRED +","+Constants.LEAD_STATUS_UNWIRED +","+Constants.LEAD_STATUS_INFO_INADEQUATE +","+Constants.LEAD_STATUS_AUTO_CLOSE +" ) ";
	
	protected static final String SQL_SELECT_REPORT_TYPE_ADMIN = "SELECT REPORT_ID, REPORT_NAME FROM REPORT_MSTR WHERE REPORT_STATUS = 'C'  ";
	
	/* End of changes by Parnika */
	
	// Added by Bhaskar
	//added by Nancy
	 protected static final String SQL_SELECT_LEAD_SUB_STATUS ="select LS.LEAD_STATUS,LSS.UNIQUE_ID,LSS.SUB_STATUS_ID,LSS.SUB_STATUS,LSS.LEAD_STATUS_ID,LSS.LEAD_SUB_STATUS_DISPLAY,LSS.PRODUCT_LOB_ID,PB.PRODUCT_LOB from LEAD_STATUS LS,LEAD_SUB_STATUS LSS,PRODUCT_LOB PB WHERE LS.LEAD_STATUS_ID=LSS.LEAD_STATUS_ID AND PB.PRODUCT_LOB_ID=LSS.PRODUCT_LOB_ID AND LS.LEAD_STATUS_ID=? and LSS.PRODUCT_LOB_ID=?  ";
	 
	 protected static final String SQL_SELECT_LEAD_SUB_STATUS1 ="select LS.LEAD_STATUS,LSS.UNIQUE_ID,LSS.SUB_STATUS_ID,LSS.SUB_STATUS,LSS.LEAD_STATUS_ID,LSS.LEAD_SUB_STATUS_DISPLAY,LSS.PRODUCT_LOB_ID,PB.PRODUCT_LOB from LEAD_STATUS LS,LEAD_SUB_STATUS LSS,PRODUCT_LOB PB WHERE LS.LEAD_STATUS_ID=LSS.LEAD_STATUS_ID AND PB.PRODUCT_LOB_ID=LSS.PRODUCT_LOB_ID AND LS.LEAD_STATUS_ID=? and LSS.PRODUCT_LOB_ID=?  AND LSS.SUB_STATUS_ID=?  ";
	 
	protected static final String SQL_SELECT_LEAD_SUB_SUB_STATUS1="SELECT LSSS.SUB_SUB_STATUS_ID,LSSS.SUB_SUB_STATUS,LSSS.LEAD_SUB_SUB_STATUS_DISPLAY,LS.LEAD_STATUS,LSS.UNIQUE_ID,LSS.SUB_STATUS_ID,LSS.SUB_STATUS,LSS.LEAD_STATUS_ID,LSS.LEAD_SUB_STATUS_DISPLAY,LSS.PRODUCT_LOB_ID,PB.PRODUCT_LOB FROM LEAD_SUB_SUB_STATUS LSSS,LEAD_SUB_STATUS LSS,LEAD_STATUS LS,PRODUCT_LOB PB "+
	 "WHERE LS.LEAD_STATUS_ID=LSS.LEAD_STATUS_ID AND LSS.PRODUCT_LOB_ID=? AND LSS.LEAD_STATUS_ID=? AND PB.PRODUCT_LOB_ID=LSS.PRODUCT_LOB_ID "+
	 "AND LSS.SUB_STATUS_ID=LSSS.LEAD_SUB_STATUS_ID AND LSSS.SUBSTATUS_CODE=LSS.UNIQUE_ID AND LSSS.LEAD_SUB_STATUS_ID=? and LSSS.SUB_SUB_STATUS_ID=?  ";
	
	
	protected static final String SQL_VALIDATE_RSU_REVERSE="select CL.CIRCLE_ID, PM.PRODUCT_ID from (select CIRCLE_ID,LOB_ID from CIRCLE_MSTR where CIRCLE_MSTR_ID= (select CIRCLE_MSTR_ID from ZONE_MSTR where zone_code= (" +
			"select zone_code  from CITY_MSTR where CITY_CODE= ( select CITY_CODE  from CITY_ZONE_MSTR where CITY_ZONE_CODE=(select CITY_ZONE_CODE from RSU_MSTR where RSU_CODE=?)))) and circle_id=? ) as CL, PRODUCT_MSTR PM where  " +
			" CL.LOB_ID=PM.PRODUCT_LOB_ID  and PM.PRODUCT_ID=?  ";
	protected static final String SQL_SELECT_LEAD_SUB_STATUS_LIST ="SELECT LS.SUB_SUB_STATUS,LS.SUB_SUB_STATUS_ID from LEAD_SUB_SUB_STATUS LS,LEAD_SUB_STATUS L , LEAD_STATUS LT WHERE LS.LEAD_SUB_STATUS_ID=L.SUB_STATUS_ID  and l.LEAD_STATUS_ID = lt.LEAD_STATUS_ID and L.SUB_STATUS_ID=?  ";
	// ADDED BY NANCY
	protected static final String SQL_SELECT_LEAD_SUB_STATUS_LIST1 ="SELECT SUB_SUB_STATUS,SUB_SUB_STATUS_ID FROM LEAD_SUB_SUB_STATUS WHERE SUBSTATUS_CODE=(SELECT UNIQUE_ID FROM LEAD_SUB_STATUS WHERE SUB_STATUS_ID=? and PRODUCT_LOB_ID=?)";
	protected static final String SQL_SELECT_PRODUCT="SELECT PRODUCT_ID,PRODUCT_NAME from PRODUCT_MSTR where  STATUS = 'A' ";
	protected static final String SQL_SELECT_PRODUCTLOBNAME=" SELECT PRODUCT_LOB FROM PRODUCT_LOB WHERE PRODUCT_LOB_ID =?";
	protected static final String SQL_SELECT_REQUEST_CATEGORY_MSTR="SELECT REQUEST_CATEGORY_ID,REQUEST_CATEGORY FROM REQUEST_CATEGORY_MSTR WHERE PRODUCT_ID=? AND  STATUS='A'  ";
	//Added by Nehil
	
	private static final String CREATE_FID = "INSERT INTO FORM_DETAILS(PAGE_URL, STATUS, UPDATED_BY)" + " VALUES(?, ?, ?)";
	private static final String GET_AUTOGENERATED_FID = "SELECT Max(Form_Id) AS FORM_ID from FORM_DETAILS";
	
	private static final String SQL_VALIDATE_PRODUCT_LOB_ID_RSU="SELECT PRODUCT_LOB_ID  FROM PRODUCT_MSTR WHERE PRODUCT_ID=? AND STATUS='A'  ";
	private static final String SQL_VALIDATE_REQUEST_CATEGORY_PRODUCT=" SELECT PRODUCT_ID FROM  REQUEST_CATEGORY_MSTR WHERE STATUS='A' AND  PRODUCT_ID=?";
	private static final String SQL_VALIDATE_REQUEST_CATEGORY_PRODUCT_LOB=" SELECT PRODUCT_ID FROM  REQUEST_CATEGORY_MSTR WHERE  PRODUCT_ID IN (SELECT PRODUCT_ID FROM PRODUCT_MSTR WHERE PRODUCT_LOB_ID = ?)";
	private static final String SQL_SELECT_REQUEST_CATEGORY_MSTR_LOB="SELECT REQUEST_CATEGORY_ID,REQUEST_CATEGORY FROM REQUEST_CATEGORY_MSTR WHERE STATUS='A' AND PRODUCT_ID = ? and REFUND_CATEGORY = 'N'   ";
	private static final String SQL_VALIDATE_CITY_ZONE_RSU_REVERSE ="SELECT RS.RSU_CODE FROM RSU_MSTR RS, CITY_MSTR CM, ZONE_MSTR ZM,CIRCLE_MSTR CIM,CITY_ZONE_MSTR CZM  WHERE RS.RSU_CODE=? AND  RS.STATUS='A' AND ZM.CIRCLE_MSTR_ID = CIM.CIRCLE_MSTR_ID AND  CM.ZONE_CODE = ZM.ZONE_CODE AND CM.CITY_CODE=? AND CZM.CITY_ZONE_CODE=? AND CM.STATUS='A' AND CIM.CIRCLE_ID =? AND CIM.LOB_ID =(SELECT PRODUCT_LOB_ID FROM PRODUCT_MSTR WHERE STATUS='A' AND  PRODUCT_ID=>?)  ";
	//private static final String SQL_VALIDATE_CITY_RSU_REVERSE="SELECT RS.RSU_CODE FROM RSU_MSTR RS, CITY_MSTR CM, ZONE_MSTR ZM,CIRCLE_MSTR CIM,CITY_ZONE_MSTR CZM  WHERE RS.RSU_CODE=? AND  RS.STATUS='A' AND ZM.CIRCLE_MSTR_ID = CIM.CIRCLE_MSTR_ID AND  CM.ZONE_CODE = ZM.ZONE_CODE AND CM.CITY_CODE=? AND CZM.CITY_ZONE_CODE=RS.CITY_ZONE_CODE AND CM.STATUS='A' AND CIM.CIRCLE_ID = ? AND CIM.LOB_ID =(SELECT PRODUCT_LOB_ID FROM PRODUCT_MSTR WHERE STATUS='A' AND  PRODUCT_ID=?)  ";
	//private static final String SQL_VALIDATE_CITY_ZONENEW_RSU_REVERSE="SELECT RS.RSU_CODE FROM RSU_MSTR RS, CITY_MSTR CM, ZONE_MSTR ZM,CIRCLE_MSTR CIM,CITY_ZONE_MSTR CZM  WHERE RS.RSU_CODE=? AND  RS.STATUS='A' AND ZM.CIRCLE_MSTR_ID = CIM.CIRCLE_MSTR_ID AND  CM.ZONE_CODE = ZM.ZONE_CODE AND CZM.CITY_ZONE_CODE=? AND CZM.CITY_CODE=CM.CITY_CODE AND CM.STATUS='A' AND CIM.CIRCLE_ID = ? AND CIM.LOB_ID =(SELECT PRODUCT_LOB_ID FROM PRODUCT_MSTR WHERE STATUS='A' AND  PRODUCT_ID=?)  ";
	private static final String SQL_SELECT_RSU_FOR_CIRCLE="SELECT RSU_ID,RSU_CODE FROM RSU_MSTR WHERE STATUS='A' AND  CITY_ZONE_CODE IN (SELECT CITY_ZONE_CODE FROM CITY_ZONE_MSTR WHERE STATUS='A' AND CITY_CODE IN (SELECT CITY_CODE FROM CITY_MSTR WHERE STATUS='A' AND  ZONE_CODE IN (SELECT ZONE_CODE FROM ZONE_MSTR WHERE STATUS='A' AND CIRCLE_MSTR_ID=?))) ORDER BY RSU_CODE  ";
	private static final String SQL_SELECT_RSUCITY_FOR_CIRCLE="SELECT RS.RSU_CODE FROM RSU_MSTR RS,CITY_ZONE_MSTR CZM,CITY_MSTR CMS,ZONE_MSTR Z,CIRCLE_MSTR CM WHERE CMS.CITY_CODE=? AND CM.CIRCLE_MSTR_ID=? AND CMS.ZONE_CODE=Z.ZONE_CODE AND CMS.CITY_CODE=CZM.CITY_CODE AND CZM.CITY_ZONE_CODE=RS.CITY_ZONE_CODE  ";
	private static final String SQL_SELECT_RSUCITY_ZONE_CODE_FOR_CIRCLE="SELECT RS.RSU_CODE FROM RSU_MSTR RS,CITY_ZONE_MSTR CZM,CITY_MSTR CMS,ZONE_MSTR Z,CIRCLE_MSTR CM WHERE CMS.CITY_CODE=? AND CM.CIRCLE_MSTR_ID=? AND CZM.CITY_ZONE_CODE=? AND CMS.ZONE_CODE=Z.ZONE_CODE AND CMS.CITY_CODE=CZM.CITY_CODE AND CZM.CITY_ZONE_CODE=RS.CITY_ZONE_CODE ORDER BY RSU_CODE  ";
	private static final String SQL_GET_REPORTID_FROM_REPORTNAME = "SELECT REPORT_ID FROM REPORT_MSTR WHERE REPORT_NAME=?  ";
	//added by Nancy agrawal
	private static final String SQL_SELECT_CIRCLE_NAME="SELECT CIRCLE_NAME FROM CIRCLE_MSTR WHERE CIRCLE_MSTR_ID=?  ";
private static final String SQL_SELECT_REPORT_CONFIGURATION = "SELECT FREQUENCY, TIMINGS, TO_RECIPIENTS, CC_RECIPIENTS, SUBJECT FROM RPT_CONFIGURATION WHERE REPORT_CONFIGURATION_ID=?  ";
	private static final String SQL_UPDATE_REPORT_CONFIGURATION = "UPDATE RPT_CONFIGURATION SET TO_RECIPIENTS=?, CC_RECIPIENTS=?, FREQUENCY=?, TIMINGS=?, STATUS=?, SUBJECT=? WHERE REPORT_CONFIGURATION_ID=?";
	private static final String SQL_INSERT_REPORT_CONFIGURATION = "INSERT INTO RPT_CONFIGURATION(REPORT_CONFIGURATION_ID, REPORT_ID, TO_RECIPIENTS, CC_RECIPIENTS, ACTOR_ID, FREQUENCY, TIMINGS, LOB_ID, REPORT_NAME, STATUS, UPDATED_BY, SUBJECT) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
	private static final String SQL_SELECT_DYNAMIC_REPORTS = "SELECT REPORT_ID, REPORT_NAME FROM DYNAMIC_REPORT_MSTR WHERE REPORT_STATUS='A'  ";
	private static final String SQL_SELECT_ACTORS = "SELECT KM_ACTOR_ID, KM_ACTOR_NAME FROM KM_ACTORS  ";
	private static final String SQL_SELECT_ALERT_MSG="select MSG_TEMPLATE from ALERT_EMAIL_CONFIG where alert_id=?  ";
	private static final String SQL_SELECT_ALERT_MSG1="select MSG_TEMPLATE from ALERT_EMAIL_CONFIG where alert_id=? and SOURCE_TYPE=?  ";
	private static final String SQL_SELECT_SMS_MSG="select SMS_TEMPLATE from ALERT_EMAIL_CONFIG where alert_id=?  ";
	private static final String SQL_SELECT_SMS_MSG1="select SMS_TEMPLATE from ALERT_EMAIL_CONFIG where alert_id=? and SOURCE_TYPE=?  ";
	private static final String SQL_SELECT_DEFAULT="select DEFAULT_MESSAGE,DEFAULT_SMS from ALERT_EMAIL_MASTER where alert_id=?  ";
	private static final String SQL_SELECT_ALERT_STATUS="select STATUS from ALERT_EMAIL_CONFIG where alert_id=?  ";
	private static final String SQL_SELECT_ALERT_STATUS1="select STATUS from ALERT_EMAIL_CONFIG where alert_id=? and SOURCE_TYPE=?  ";
	private static final String SQL_SELECT_ALERT_SUBJECT="select SUBJECT_TEMPLATE from ALERT_EMAIL_CONFIG where alert_id=?  ";
	private static final String SQL_SELECT_ALERT_SUBJECT1="select SUBJECT_TEMPLATE from ALERT_EMAIL_CONFIG where alert_id=? and SOURCE_TYPE=?  ";
	private static final String SQL_SELECT_ALERT_SMS1="select MOBILE_NUMBERS from ALERT_EMAIL_CONFIG where alert_id=? and SOURCE_TYPE=?  ";
	private static final String SQL_SELECT_ALERT_SMS="select MOBILE_NUMBERS from ALERT_EMAIL_CONFIG where alert_id=?  ";
	private static final String SQL_SELECT_ALERT_EMAIL1="select EMAIL_IDS from ALERT_EMAIL_CONFIG where alert_id=? and SOURCE_TYPE=?  ";
	private static final String SQL_SELECT_ALERT_EMAIL="select EMAIL_IDS from ALERT_EMAIL_CONFIG where alert_id=?  ";
	private static final String SQL_SELECT_ALERT_COUNT1="select THRESHOLD_COUNT from ALERT_EMAIL_CONFIG where alert_id=? and SOURCE_TYPE=?  ";
	private static final String SQL_SELECT_ALERT_COUNT="select THRESHOLD_COUNT from ALERT_EMAIL_CONFIG where alert_id=?  ";
	private static final String SQL_SELECT_ALERT_PERIOD1="select THRESHOLD_PERIOD from ALERT_EMAIL_CONFIG where alert_id=? and SOURCE_TYPE=?  ";
	private static final String SQL_SELECT_ALERT_PERIOD="select THRESHOLD_PERIOD from ALERT_EMAIL_CONFIG where alert_id=?  ";
	private static final String SQL_SELECT_ALERT_TYPE="select ALERT_TYPE from ALERT_EMAIL_CONFIG where alert_id=?  ";
	private static final String SQL_SELECT_ALERT_TYPE1="select ALERT_TYPE from ALERT_EMAIL_CONFIG where alert_id=? and SOURCE_TYPE=?  ";
	private static final String SQL_SELECT_ALERT_SOURCE="select SOURCE_TYPE from ALERT_EMAIL_CONFIG WHERE alert_id=?  ";
	//private static final String SQL_SELECT_LEAD_SUB_SUB_STATUS="SELECT * FROM LEAD_SUB_SUB_STATUS LSSS,LEAD_SUB_STATUS LSS,LEAD_STATUS LS,PRODUCT_LOB PL WHERE LSS.PRODUCT_LOB_ID=PL.PRODUCT_LOB_ID AND LSSS.LEAD_SUB_STATUS_ID=LSS.SUB_STATUS_ID AND LSS.UNIQUE_ID=LSSS.SUBSTATUS_CODE AND LSS.SUB_STATUS_ID=? AND LSS.LEAD_STATUS_ID=? AND LSS.PRODUCT_LOB_ID=?  ";
    
	 protected static final String SQL_SELECT_LEAD_SUB_SUB_STATUS="SELECT LSSS.SUB_SUB_STATUS_ID,LSSS.SUB_SUB_STATUS,LSSS.LEAD_SUB_SUB_STATUS_DISPLAY,LS.LEAD_STATUS,LSS.UNIQUE_ID,LSS.SUB_STATUS_ID,LSS.SUB_STATUS,LSS.LEAD_STATUS_ID,LSS.LEAD_SUB_STATUS_DISPLAY,LSS.PRODUCT_LOB_ID,PB.PRODUCT_LOB FROM LEAD_SUB_SUB_STATUS LSSS,LEAD_SUB_STATUS LSS,LEAD_STATUS LS,PRODUCT_LOB PB "+
	 "WHERE LS.LEAD_STATUS_ID=LSS.LEAD_STATUS_ID AND LSS.PRODUCT_LOB_ID=? AND LSS.LEAD_STATUS_ID=? AND PB.PRODUCT_LOB_ID=LSS.PRODUCT_LOB_ID "+
	 "AND LSS.SUB_STATUS_ID=LSSS.LEAD_SUB_STATUS_ID AND LSSS.SUBSTATUS_CODE=LSS.UNIQUE_ID AND LSSS.LEAD_SUB_STATUS_ID=?  ";
	
	private static final String SQL_INSERT_LEAD_SUB_STATUS="INSERT INTO LEAD_SUB_STATUS(SUB_STATUS_ID, SUB_STATUS, LEAD_STATUS_ID, LEAD_SUB_STATUS_DISPLAY, PRODUCT_LOB_ID)"+ 
    "VALUES(?, ?, ?, ?,?)";
private static final String SQL_INSERT_LEAD_SUB_SUB_STATUS="INSERT INTO LEAD_SUB_SUB_STATUS(SUB_SUB_STATUS_ID,SUB_SUB_STATUS,LEAD_SUB_STATUS_ID,LEAD_SUB_SUB_STATUS_DISPLAY,SUBSTATUS_CODE)VALUES(?,?,?,?,?)";
//Added By Bhaskar 

private static final String SQL_SELECT_FOURG_PRODUCTS="SELECT PRODUCT_ID,PRODUCT_NAME,PRODUCT_LOB_ID FROM PRODUCT_MSTR WHERE PRODUCT_LOB_ID=24 AND STATUS='A'  ";

private static final String SQL_SELECT_PRODUCT_LOB="SELECT PRODUCT_ID,PRODUCT_NAME FROM PRODUCT_MSTR WHERE PRODUCT_LOB_ID=? AND STATUS='A'  ";

private static final String GET_APPROVERS_AND_DR_LIST = "SELECT APPROVER_L1,APPROVER_L2,DRLIST FROM OLM_APPROVER WHERE OLM_ID=?";
Logger logger = Logger.getLogger(MasterDaoImpl.class);

//Added by srikant 
//Added by satish
//private static final String NON_EDITABLE_FIELDS_LIST ="SELECT	LUD.EXT1 AS IDENTITY_PROOF_ID, LUD.EXT5 AS UPC, LUD.EXT6 AS UPC_GEN_DATE, LUD.EXT9 AS EXISTING_PART, LUD.EXT10 AS MNP_STATUS, LUD.PLAN_TYPE,LDE.EXTRA_PARAM1 AS CUSTOMER_SEGMENT, LDE.EXTRA_PARAM2 AS SIM_NO, LDE.EXTRA_PARAM5 AS GENDER, LDE.EXTRA_PARAM7 AS NATIONALITY,LDE.EXTRA_PARAM8 AS IDENTITY_PROOF_TYPE FROM LEAD_DATA LD, LEAD_UPDATE_DATA LUD, LEAD_DETAILS LDE WHERE LD.LEAD_ID = LUD.LEAD_ID AND   LD.LEAD_ID = LDE.LEAD_ID AND LD.LEAD_ID = ?   ";


private static final String NON_EDITABLE_FIELDS_LIST ="SELECT LUD.RELATION_NAME AS RELATION_NAME,LUD.DOC_COLLECTED_FLAG AS DOC_COLLECTED_FLAG , LUD.PREVIOUS_CIRCLE AS PREVIOUS_CIRCLE,LUD.PREVIOUS_OPERATOR AS PREVIOUS_OPERATOR,LUD.IDENTITYPROOFID AS IDENTITY_PROOF_ID, LUD.UPC AS UPC, LUD.UPC_GEN_DATE AS UPC_GEN_DATE, LUD.EXISTING_PART AS EXISTING_PART, LUD.MNP_STATUS AS MNP_STATUS, LUD.PAYMENT_DATE AS PAYMENT_DATE ,LUD.PLAN_TYPE,LDE.EXTRA_PARAM2 AS CUSTOMER_SEGMENT, LDE.EXTRA_PARAM1 AS SIM_NO, LDE.EXTRA_PARAM5 AS NATIONALITY, LDE.EXTRA_PARAM7 AS GENDER,LDE.EXTRA_PARAM8 AS IDENTITY_PROOF_TYPE FROM LEAD_DATA LD, LEAD_UPDATE_DATA LUD, LEAD_DETAILS LDE WHERE LD.LEAD_ID = LUD.LEAD_ID AND   LD.LEAD_ID = LDE.LEAD_ID AND LD.LEAD_ID = ?   ";
		
//Added by satish
private static MasterDaoImpl masterDaoImpl=null;

private MasterDaoImpl(){
	
}

public static MasterDaoImpl masterDaoInstance()
{
	if(masterDaoImpl==null)
	{
		masterDaoImpl=new MasterDaoImpl();
	}
	return masterDaoImpl;
	
}
	
	public  ArrayList<ProductDTO> getTelemediaProductList() throws DAOException
	{
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		ArrayList<ProductDTO> telemediaProductList = new ArrayList<ProductDTO>();
		ProductDTO dto = null;
		try {
			con = DBConnection.getDBConnection();
			ps = con.prepareStatement(SQL_SELECT_TELEMEDIA_PRODUCT);
			rs = ps.executeQuery();
			while(rs.next()) {
				dto = new ProductDTO();
				dto.setProductId(rs.getInt("PRODUCT_ID"));
				dto.setProductName(rs.getString("PRODUCT_NAME"));
				dto.setProductLobId(rs.getInt("PRODUCT_LOB_ID"));
				
				dto.setProductLobName(rs.getString("PRODUCT_LOB"));
				telemediaProductList.add(dto);
			}
		} catch (Exception e) {
			throw new DAOException("Exception occured while getting Telemedia Product list :  "+ e.getMessage(),e);
		} finally {
			try {
				////DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				throw new DAOException(e.getMessage(), e);
			}
		}
		return telemediaProductList;
	}
	public  ArrayList<ProductDTO> getMobilityProductList() throws DAOException
	{
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		ArrayList<ProductDTO> telemediaProductList = new ArrayList<ProductDTO>();
		ProductDTO dto = null;
		try {
			con = DBConnection.getDBConnection();
			ps = con.prepareStatement(SQL_SELECT_MOBILITY_PRODUCT);
			rs = ps.executeQuery();
			while(rs.next()) {
				dto = new ProductDTO();
				dto.setProductId(rs.getInt("PRODUCT_ID"));
				dto.setProductName(rs.getString("PRODUCT_NAME"));
				telemediaProductList.add(dto);
			}
		} catch (Exception e) {
			throw new DAOException("Exception occured while getting Mobility Product list :  "+ e.getMessage(),e);
		} finally {
			try {
				//DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				throw new DAOException(e.getMessage(), e);
			}
		}
		return telemediaProductList;
	}
	
	public  ArrayList<Integer> getRestrictedProductList() throws DAOException
	{
		ArrayList<Integer> restrictedProductList = new ArrayList<Integer>();
		Integer restrictedProduct = null;
		String allRestrictedProducts=null;
		String []allRestrictedProductsArr=null;
		try {
			
			allRestrictedProducts=PropertyReader.getAppValue("lms.restricted.product.list");
			if(allRestrictedProducts!=null || allRestrictedProducts!="")
			{
				
			allRestrictedProductsArr=allRestrictedProducts.split(",");
			for(int i=0;i< allRestrictedProductsArr.length;i++)
			{
			restrictedProduct = new Integer(allRestrictedProductsArr[i]);
			restrictedProductList.add(restrictedProduct);
			}
		}
		} catch (Exception e) {
			throw new DAOException("Exception occured while getting restricted Product list :  "+ e.getMessage(),e);
		} 
		return restrictedProductList;
	}
	
	
	public  ArrayList<PINCodeDTO> getPINCodeList() throws DAOException
	{
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		ArrayList<PINCodeDTO> pinCodeList = new ArrayList<PINCodeDTO>();
		PINCodeDTO dto = null;
		    
		try {
			con = DBConnection.getDBConnection();
			ps = con.prepareStatement(SQL_SELECT_PINCODE_MSTR);
			rs = ps.executeQuery();
			while(rs.next()) {
				
				
				dto = new PINCodeDTO();
				dto.setPinCode(rs.getString("PINCODE"));
				pinCodeList.add(dto);
			}
		} catch (Exception e) {
			throw new DAOException("Exception occured while getting city list :  "+ e.getMessage(),e);
		} finally {
			try {
				//DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				throw new DAOException(e.getMessage(), e);
			}
		}
		return pinCodeList;
	}
	
	public  ArrayList<CityDTO> getCityList() throws DAOException
	{
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		ArrayList<CityDTO> cityList = new ArrayList<CityDTO>();
		CityDTO dto = null;
		try {
			con = DBConnection.getDBConnection();
			ps = con.prepareStatement(SQL_SELECT_CITY_MSTR);
			rs = ps.executeQuery();
			while(rs.next()) {
				dto = new CityDTO();
				dto.setCityId(rs.getString("CITY_ID"));
				dto.setCityCode(rs.getString("CITY_CODE")); 
				dto.setCityName(rs.getString("CITY_NAME"));
				dto.setCircleId(rs.getInt("CIRCLE_ID"));
				cityList.add(dto);
			}
		} catch (Exception e) {
			throw new DAOException("Exception occured while getting city list :  "+ e.getMessage(),e);
		} finally {
			try {
				////DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				throw new DAOException(e.getMessage(), e);
			}
		}
		return cityList;
	}
	
	
	public  ArrayList<ZoneDTO> getZoneList() throws DAOException
	{
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		ArrayList<ZoneDTO> zoneList = new ArrayList<ZoneDTO>();
		ZoneDTO dto = null;
		try {
			con = DBConnection.getDBConnection();
			ps = con.prepareStatement(SQL_SELECT_ZONE_MSTR);
			rs = ps.executeQuery();
			while(rs.next()) {
				dto = new ZoneDTO();
				dto.setZoneId(rs.getString("ZONE_ID"));
				dto.setZoneCode(rs.getString("ZONE_CODE"));
				dto.setZoneName(rs.getString("ZONE_NAME"));
				dto.setCityId(rs.getString("CITY_CODE"));
				zoneList.add(dto);
			}
		} catch (Exception e) {
			throw new DAOException("Exception occured while getting zone list :  "+ e.getMessage(),e);
		} finally {
			try {
				////DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				throw new DAOException(e.getMessage(), e);
			}
		}
		return zoneList;
	}
	
	
	public  ArrayList<RSUDTO> getRsuList() throws DAOException
	{
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		ArrayList<RSUDTO> rsuList = new ArrayList<RSUDTO>();
		RSUDTO dto = null;
		try {
			con = DBConnection.getDBConnection();
			ps = con.prepareStatement(SQL_SELECT_RSU_MSTR);
			rs = ps.executeQuery();
			while(rs.next()) {
				dto = new RSUDTO();
				dto.setRsuId(rs.getString("RSU_ID"));
				dto.setRsuCode(rs.getString("RSU_CODE"));
				dto.setZoneId(rs.getString("CITY_ZONE_CODE"));
				rsuList.add(dto);
			}
		} catch (Exception e) {
			throw new DAOException("Exception occured while getting rsu list :  "+ e.getMessage(),e);
		} finally {
			try {
				////DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				throw new DAOException(e.getMessage(), e);
			}
		}
		return rsuList;
	}
	
	
	
	public  ArrayList<ProductDTO> getProductList() throws DAOException
	{
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		ArrayList<ProductDTO> productList = new ArrayList<ProductDTO>();
		ProductDTO dto = null;
		try {
			con = DBConnection.getDBConnection();
			ps = con.prepareStatement(SQL_SELECT_PRODUCT_MSTR);
			rs = ps.executeQuery();
			while(rs.next()) {
				dto = new ProductDTO();
				dto.setProductId(rs.getInt("PRODUCT_ID"));
				dto.setProductLobId(rs.getInt("PRODUCT_LOB_ID"));
				dto.setProductName(rs.getString("PRODUCT_NAME"));
				dto.setProductDescription(rs.getString("PRODUCT_DESC"));
				dto.setProductHeadOlmId(rs.getString("PRODUCT_HEAD_OLM_ID"));
				productList.add(dto);
			}
		} catch (Exception e) {
			throw new DAOException("Exception occured while getting product list :  "+ e.getMessage(),e);
		} finally {
			try {
				////DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				throw new DAOException(e.getMessage(), e);
			}
		}
		return productList;
	}
	
	
	public  ArrayList<StateDTO> getStateList() throws DAOException
	{
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		ArrayList<StateDTO> stateList = new ArrayList<StateDTO>();
		StateDTO dto = null;
		try {
			con = DBConnection.getDBConnection();
			ps = con.prepareStatement(SQL_SELECT_STATE_MSTR);
			rs = ps.executeQuery();
			while(rs.next()) {
				dto = new StateDTO();
				dto.setStateId(rs.getInt("STATE_ID"));
				dto.setStateName(rs.getString("STATE_CODE"));
				dto.setStateName(rs.getString("STATE_NAME"));
				dto.setStateDescription(rs.getString("STATE_DESC"));
				stateList.add(dto);
			}
		} catch (Exception e) {
			throw new DAOException("Exception occured while getting state list :  "+ e.getMessage(),e);
		} finally {
			try {
				////DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				throw new DAOException(e.getMessage(), e);
			}
		}
		return stateList;
	}
	
	public  ArrayList<CircleDTO> getCircleList() throws DAOException
	{
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		ArrayList<CircleDTO> circleList = new ArrayList<CircleDTO>();
		CircleDTO dto = null;
		
		try {
			con = DBConnection.getDBConnection();
			ps = con.prepareStatement(SQL_SELECT_CIRCLE_MSTR);
			rs = ps.executeQuery();
			while(rs.next()) {
				dto = new CircleDTO();
				dto.setCircleId(rs.getInt("CIRCLE_ID"));
				dto.setCircleName(rs.getString("CIRCLE_NAME"));
				dto.setCircleDescription(rs.getString("CIRCLE_DESC"));
				circleList.add(dto);
			}
			
		} catch (Exception e) {
			throw new DAOException("Exception occured while getting circle list :  "+ e.getMessage(),e);
		} finally {
			try {
				////DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				throw new DAOException(e.getMessage(), e);
			}
		}
		return circleList;
	}
	
	public  ArrayList<LOBDTO> getLobList() throws DAOException
	{
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		ArrayList<LOBDTO> lobList = new ArrayList<LOBDTO>();
		LOBDTO dto = null;
		try {
			con = DBConnection.getDBConnection();
			ps = con.prepareStatement(SQL_SELECT_LOB_MSTR);
			rs = ps.executeQuery();
			while(rs.next()) {
				dto = new LOBDTO();
				dto.setLobId(rs.getInt("PRODUCT_LOB_ID"));
				dto.setLobName(rs.getString("PRODUCT_LOB"));
				
				lobList.add(dto);
			}
			
		} catch (Exception e) {
			throw new DAOException("Exception occured while getting lob list :  "+ e.getMessage(),e);
		} finally {
			try {
				//DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				throw new DAOException(e.getMessage(), e);
			}
		}
		return lobList;
	}
	
	//added by Nancy Agrawal.
	public ArrayList<AlertDTO> getAlertList() throws DAOException {
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		ArrayList<AlertDTO> alertList = new ArrayList<AlertDTO>();
		AlertDTO dto = null;
		try {
			con = DBConnection.getDBConnection();
			ps = con.prepareStatement(SQL_SELECT_ALERT_MSTR);
			
			rs = ps.executeQuery();
		
			while(rs.next()) {
			int alertId=rs.getInt("ALERT_ID");
			//System.out.println("alertId"+alertId);
				dto = new AlertDTO();
				dto.setAlertId(rs.getInt("ALERT_ID"));
				dto.setAlertName(rs.getString("ALERT_NAME"));
				alertList.add(dto);
			}
			
		} catch (Exception e) {
			throw new DAOException("Exception occured while getting alert List :  "+ e.getMessage(),e);
		} finally {
			try {
				////DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				throw new DAOException(e.getMessage(), e);
			}
		}
		return alertList;
		}

	
	public  ArrayList<CircleDTO> getCircleUserList() throws DAOException
	{
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		ArrayList<CircleDTO> circleList = new ArrayList<CircleDTO>();
		CircleDTO dto = null;
		try {
			con = DBConnection.getDBConnection();
			ps = con.prepareStatement(SQL_SELECT_USER_CIRCLE_MSTR);
			rs = ps.executeQuery();
			while(rs.next()) {
				dto = new CircleDTO();
				dto.setCircleMstrId(rs.getInt("CIRCLE_ID"));
				dto.setCircleName(rs.getString("CIRCLE_NAME"));
				dto.setCircleDescription(rs.getString("CIRCLE_DESC"));
				circleList.add(dto);
			}
			
		} catch (Exception e) {
			throw new DAOException("Exception occured while getting circle list :  "+ e.getMessage(),e);
		} finally {
			try {
				////DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				throw new DAOException(e.getMessage(), e);
			}
		}
		return circleList;
	}
	
	public  ArrayList<CircleDTO> getCircleForUser(String userLoginId) throws DAOException
	{
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		ArrayList<CircleDTO> circleList = new ArrayList<CircleDTO>();
		CircleDTO dto = null;
		try {
			con = DBConnection.getDBConnection();
			ps = con.prepareStatement(SQL_SELECT_CIRCLE_FOR_USER);
			ps.setString(1, userLoginId);
			rs = ps.executeQuery();
			while(rs.next()) {
				dto = new CircleDTO();				
				dto.setCircleName(rs.getString("CIRCLE_NAME"));	
				dto.setCircleId(rs.getInt("CIRCLE_ID"));
				dto.setLobName(rs.getString("PRODUCT_LOB"));
				circleList.add(dto);
			}
			
		} catch (Exception e) {
			throw new DAOException("Exception occured while getting circle list :  "+ e.getMessage(),e);
		} finally {
			try {
				////DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				throw new DAOException(e.getMessage(), e);
			}
		}
		return circleList;
	}
	
	public  ArrayList<CircleDTO> getCircleForUserLob(String userLoginId , int lobId) throws DAOException
	{
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		ArrayList<CircleDTO> circleList = new ArrayList<CircleDTO>();
		CircleDTO dto = null;
		try {
			con = DBConnection.getDBConnection();
			ps = con.prepareStatement(SQL_SELECT_CIRCLE_FOR_USER_LOB);
			ps.setString(1, userLoginId);
			ps.setInt(2, lobId);
			rs = ps.executeQuery();
			while(rs.next()) {
				dto = new CircleDTO();				
				dto.setCircleName(rs.getString("CIRCLE_NAME"));	
				dto.setCircleId(rs.getInt("CIRCLE_ID"));
				circleList.add(dto);
			}
			
		} catch (Exception e) {
			throw new DAOException("Exception occured while getting circle list :  "+ e.getMessage(),e);
		} finally {
			try {
				////DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				throw new DAOException(e.getMessage(), e);
			}
		}
		return circleList;
	}
	public  ArrayList<LOBDTO> getLobForUser(String userLoginId) throws DAOException
	{
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		ArrayList<LOBDTO> lobList = new ArrayList<LOBDTO>();
		LOBDTO dto = null;
		try {
			con = DBConnection.getDBConnection();
			ps = con.prepareStatement(SQL_SELECT_LOB_FOR_USER);
			ps.setString(1, userLoginId);
			rs = ps.executeQuery();
			while(rs.next()) {
				dto = new LOBDTO();				
				dto.setLobName(rs.getString("PRODUCT_LOB"));	
				dto.setLobId(rs.getInt("PRODUCT_LOB_ID"));					
				lobList.add(dto);
			}
			
		} catch (Exception e) {
			throw new DAOException("Exception occured while getting lob list :  "+ e.getMessage(),e);
		} finally {
			try {
				////DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				throw new DAOException(e.getMessage(), e);
			}
		}
		return lobList;
	}
	public  ArrayList<LOBDTO> getLobListForUser(String userLoginId) throws DAOException
	{
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		ArrayList<LOBDTO> lobList = new ArrayList<LOBDTO>();
		LOBDTO dto = null;
		try {
			con = DBConnection.getDBConnection();
			ps = con.prepareStatement(SQL_SELECT_LOB_LIST_FOR_USER);
			ps.setString(1, userLoginId);
			rs = ps.executeQuery();
			while(rs.next()) {
				dto = new LOBDTO();				
				dto.setLobName(rs.getString("PRODUCT_LOB"));	
				dto.setLobId(rs.getInt("PRODUCT_LOB_ID"));					
				lobList.add(dto);
			}
			
		} catch (Exception e) {
			throw new DAOException("Exception occured while getting lob list :  "+ e.getMessage(),e);
		} finally {
			try {
				////DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				throw new DAOException(e.getMessage(), e);
			}
		}
		return lobList;
	}
	public  ArrayList<RequestTypeDTO> getRequestTypeList() throws DAOException
	{
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		ArrayList<RequestTypeDTO> requestTypeList = new ArrayList<RequestTypeDTO>();
		RequestTypeDTO dto = null;
		try {
			con = DBConnection.getDBConnection();
			ps = con.prepareStatement(SQL_SELECT_REQUEST_TYPE_MSTR);
			rs = ps.executeQuery();
			while(rs.next()) {
				dto = new RequestTypeDTO();
				dto.setRequestId(rs.getInt("REQUEST_ID"));
				dto.setRequestTypeName(rs.getString("REQUEST_TYPE"));
				requestTypeList.add(dto);
			}
		} catch (Exception e) {
			throw new DAOException("Exception occured while getting Request Type list :  "+ e.getMessage(),e);
		} finally {
			try {
				////DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				throw new DAOException(e.getMessage(), e);
			}
		}
		return requestTypeList;
	}
	
	
	
	public  ArrayList<LeadStatusDTO> getLeadStatusList() throws DAOException
	{
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		ArrayList<LeadStatusDTO> leadStatusList = new ArrayList<LeadStatusDTO>();
		LeadStatusDTO dto = null;
		try {
			con = DBConnection.getDBConnection();
			ps = con.prepareStatement(SQL_SELECT_LEAD_STATUS);
			rs = ps.executeQuery();
			while(rs.next()) {
				dto = new LeadStatusDTO();
				dto.setLeadStatusId(rs.getInt("LEAD_STATUS_ID"));
				dto.setLeadStatus(rs.getString("LEAD_STATUS"));
				dto.setLeadStatusName(rs.getString("LEAD_STATUS_NAME"));
				dto.setLeadStatusDisplay(rs.getString("LEAD_STATUS"));
				leadStatusList.add(dto);
			}
		} catch (Exception e) {
			e.printStackTrace();
			throw new DAOException("Exception occured while getting Lead Status list :  "+ e.getMessage(),e);
		} finally {
			try {
				////DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				throw new DAOException(e.getMessage(), e);
			}
		}
		return leadStatusList;
	}
	
	public  HashMap<Integer, LeadStatusDTO>  getLeadStatusIdCodeMap() throws DAOException
	{
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		PreparedStatement ps2 = null;
		ResultSet rs2 = null;
		HashMap<Integer, LeadStatusDTO> leadStatusIdCodeMap = new HashMap<Integer, LeadStatusDTO>() ;
		LeadStatusDTO dto = null;
		try {
			con = DBConnection.getDBConnection();
			ps = con.prepareStatement(SQL_SELECT_LEAD_STATUS);
			rs = ps.executeQuery();
			while(rs.next()) {
				dto = new LeadStatusDTO();
				int temp = rs.getInt("LEAD_STATUS_ID");
				dto.setLeadStatusId(temp);
				dto.setLeadStatus(rs.getString("LEAD_STATUS"));
				dto.setLeadStatusName(rs.getString("LEAD_STATUS_NAME"));
				dto.setLeadStatusDisplay(rs.getString("LEAD_STATUS_DISPLAY"));
				
				ps2 = con.prepareStatement("SELECT * FROM LEAD_SUB_STATUS WHERE LEAD_STATUS_ID=?");
				ps2.setInt(1, temp);
				rs2 = ps2.executeQuery();
					while(rs2.next()) {
						dto = new LeadStatusDTO();
						
					}
				
				leadStatusIdCodeMap.put(new Integer(temp), dto);
			}
		} catch (Exception e) {
			
			throw new DAOException("Exception occured while getting Lead Status list :  "+ e.getMessage(),e);
		} finally {
			try {
				////DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				throw new DAOException(e.getMessage(), e);
			}
		}
		return leadStatusIdCodeMap;
	}	

	public  ArrayList<LeadStatusDTO> getLeadStatusCallCenterList() throws DAOException
	{
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		ArrayList<LeadStatusDTO> leadStatusList = new ArrayList<LeadStatusDTO>();
		LeadStatusDTO dto = null;
		try {
			con = DBConnection.getDBConnection();
			ps = con.prepareStatement(SQL_SELECT_LEAD_STATUS_CC);
			rs = ps.executeQuery();
			while(rs.next()) {
				dto = new LeadStatusDTO();
				dto.setLeadStatusId(rs.getInt("LEAD_STATUS_ID"));
				dto.setLeadStatus(rs.getString("LEAD_STATUS"));
				dto.setLeadStatusName(rs.getString("LEAD_STATUS_NAME"));
				leadStatusList.add(dto);
			}
		} catch (Exception e) {
			throw new DAOException("Exception occured while getting Lead Status list :  "+ e.getMessage(),e);
		} finally {
			try {
				////DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				throw new DAOException(e.getMessage(), e);
			}
		}
		return leadStatusList;
	}
	
	protected static final String SQL_SELECT_LEAD_STATUS_DIALLER_QUALIFICATION = " select LSS.LEAD_STATUS_ID ||'#' || LSS.SUB_STATUS_ID as STATUS_SUBSTATUS_ID, LS.LEAD_STATUS ||'-' ||  "+
	" LSS.SUB_STATUS AS STATUS_SUBSTATUS from LEAD_SUB_STATUS LSS, LEAD_STATUS LS where LSS.LEAD_STATUS_ID = "+
	" LS.LEAD_STATUS_ID AND LSS.PRODUCT_LOB_ID=? AND LSS.LEAD_STATUS_ID in (SELECT LEAD_STATUS_ID FROM LEAD_STATUS WHERE LEAD_STATUS IN ('QUALIFIED','LOST','VERIFICATION'))"+
	" and LSS.LEAD_STATUS_ID <> LSS.SUB_STATUS_ID and LSS.SUB_STATUS_ID!=611"+
	" union"+
	" select LS.LEAD_STATUS_ID ||'#' || LS.LEAD_STATUS_ID as STATUS_SUBSTATUS_ID, LS.LEAD_STATUS STATUS_SUBSTATUS_NAME"+ 
    " from LEAD_STATUS LS where LS.LEAD_STATUS IN ('QUALIFIED','LOST')";
		
	protected static final String SQL_SELECT_LEAD_STATUS_DIALLER_INFO_INADEQUATE = " select LSS.LEAD_STATUS_ID ||'#' || LSS.SUB_STATUS_ID as STATUS_SUBSTATUS_ID, LS.LEAD_STATUS ||'-' ||  "+
	" LSS.SUB_STATUS AS STATUS_SUBSTATUS from LEAD_SUB_STATUS LSS, LEAD_STATUS LS where LSS.LEAD_STATUS_ID = "+
	" LS.LEAD_STATUS_ID AND LSS.PRODUCT_LOB_ID=? AND  LSS.LEAD_STATUS_ID in (SELECT LEAD_STATUS_ID FROM LEAD_STATUS WHERE LEAD_STATUS IN ('VERIFICATION','LOST'))"+
	" and LSS.LEAD_STATUS_ID <> LSS.SUB_STATUS_ID and LSS.SUB_STATUS_ID!=611"+
	" union"+
	" select LS.LEAD_STATUS_ID ||'#' || LS.LEAD_STATUS_ID as STATUS_SUBSTATUS_ID, LS.LEAD_STATUS STATUS_SUBSTATUS_NAME"+ 
    " from LEAD_STATUS LS where LS.LEAD_STATUS IN ('FEASIBILITY_INFO_DONE','LOST')";
	// this query is for drop 1
	/*protected static final String SQL_SELECT_LEAD_STATUS_DIALLER_INFO_INADEQUATE = " select LSS.LEAD_STATUS_ID ||'#' || LSS.SUB_STATUS_ID as STATUS_SUBSTATUS_ID, LS.LEAD_STATUS ||'-' ||  "+
	" LSS.SUB_STATUS AS STATUS_SUBSTATUS from LEAD_SUB_STATUS LSS, LEAD_STATUS LS where LSS.LEAD_STATUS_ID = "+
	" LS.LEAD_STATUS_ID AND LSS.LEAD_STATUS_ID in (SELECT LEAD_STATUS_ID FROM LEAD_STATUS WHERE LEAD_STATUS IN ('VERIFICATION'))"+
	" and LSS.LEAD_STATUS_ID <> LSS.SUB_STATUS_ID"+
	" union"+
	" select LS.LEAD_STATUS_ID ||'#' || LS.LEAD_STATUS_ID as STATUS_SUBSTATUS_ID, LS.LEAD_STATUS STATUS_SUBSTATUS_NAME"+ 
    " from LEAD_STATUS LS where LS.LEAD_STATUS IN ('FEASIBILITY_INFO_DONE')";*/
	//uncomment the above query for drop 1
	
	protected static final String SQL_SELECT_LEAD_STATUS_DIALLER_WIRED = " select LSS.LEAD_STATUS_ID ||'#' || LSS.SUB_STATUS_ID as STATUS_SUBSTATUS_ID, LS.LEAD_STATUS ||'-' ||  "+
	" LSS.SUB_STATUS AS STATUS_SUBSTATUS from LEAD_SUB_STATUS LSS, LEAD_STATUS LS where LSS.LEAD_STATUS_ID = "+
	" LS.LEAD_STATUS_ID AND LSS.PRODUCT_LOB_ID=? AND  LSS.LEAD_STATUS_ID in (SELECT LEAD_STATUS_ID FROM LEAD_STATUS WHERE LEAD_STATUS IN ('VERIFICATION'))"+
	" and LSS.LEAD_STATUS_ID <> LSS.SUB_STATUS_ID and LSS.SUB_STATUS_ID!=611"+
	" union"+
	" select LS.LEAD_STATUS_ID ||'#' || LS.LEAD_STATUS_ID as STATUS_SUBSTATUS_ID, LS.LEAD_STATUS STATUS_SUBSTATUS_NAME"+ 
    " from LEAD_STATUS LS where LS.LEAD_STATUS IN ('LEAD_CALLBACK_DONE')";
	
	protected static final String SQL_SELECT_LEAD_STATUS_DIALLER_UNWIRED = " select LSS.LEAD_STATUS_ID ||'#' || LSS.SUB_STATUS_ID as STATUS_SUBSTATUS_ID, LS.LEAD_STATUS ||'-' ||  "+
	" LSS.SUB_STATUS AS STATUS_SUBSTATUS from LEAD_SUB_STATUS LSS, LEAD_STATUS LS where LSS.LEAD_STATUS_ID = "+
	" LS.LEAD_STATUS_ID AND LSS.PRODUCT_LOB_ID=? AND  LSS.LEAD_STATUS_ID in (SELECT LEAD_STATUS_ID FROM LEAD_STATUS WHERE LEAD_STATUS IN ('VERIFICATION','LOST'))"+
	" and LSS.LEAD_STATUS_ID <> LSS.SUB_STATUS_ID and LSS.SUB_STATUS_ID!=611"+
	" union"+
	" select LS.LEAD_STATUS_ID ||'#' || LS.LEAD_STATUS_ID as STATUS_SUBSTATUS_ID, LS.LEAD_STATUS STATUS_SUBSTATUS_NAME"+ 
    " from LEAD_STATUS LS where LS.LEAD_STATUS IN ('')";
	// this query is for drop 1
	/*protected static final String SQL_SELECT_LEAD_STATUS_DIALLER_UNWIRED = " select LSS.LEAD_STATUS_ID ||'#' || LSS.SUB_STATUS_ID as STATUS_SUBSTATUS_ID, LS.LEAD_STATUS ||'-' ||  "+
	" LSS.SUB_STATUS AS STATUS_SUBSTATUS from LEAD_SUB_STATUS LSS, LEAD_STATUS LS where LSS.LEAD_STATUS_ID = "+
	" LS.LEAD_STATUS_ID AND LSS.LEAD_STATUS_ID in (SELECT LEAD_STATUS_ID FROM LEAD_STATUS WHERE LEAD_STATUS IN ('VERIFICATION'))"+
	" and LSS.LEAD_STATUS_ID <> LSS.SUB_STATUS_ID"+
	" union"+
	" select LS.LEAD_STATUS_ID ||'#' || LS.LEAD_STATUS_ID as STATUS_SUBSTATUS_ID, LS.LEAD_STATUS STATUS_SUBSTATUS_NAME"+ 
    " from LEAD_STATUS LS where LS.LEAD_STATUS IN ('')";*/
	//uncomment the above query for drop 1
	
	protected static final String SQL_SELECT_LEAD_STATUS_DIALLER_ASSIGNED = " select LSS.LEAD_STATUS_ID ||'#' || LSS.SUB_STATUS_ID as STATUS_SUBSTATUS_ID, LS.LEAD_STATUS ||'-' ||  "+
	" LSS.SUB_STATUS AS STATUS_SUBSTATUS from LEAD_SUB_STATUS LSS, LEAD_STATUS LS where LSS.LEAD_STATUS_ID = "+
	" LS.LEAD_STATUS_ID AND LSS.PRODUCT_LOB_ID=? AND  LSS.LEAD_STATUS_ID in (SELECT LEAD_STATUS_ID FROM LEAD_STATUS WHERE LEAD_STATUS IN ('VERIFICATION'))"+
	" and LSS.LEAD_STATUS_ID <> LSS.SUB_STATUS_ID and LSS.SUB_STATUS_ID!=611"+
	" union"+
	" select LS.LEAD_STATUS_ID ||'#' || LS.LEAD_STATUS_ID as STATUS_SUBSTATUS_ID, LS.LEAD_STATUS STATUS_SUBSTATUS_NAME"+ 
    " from LEAD_STATUS LS where LS.LEAD_STATUS IN ('LEAD_CALLBACK_DONE')";
	
	protected static final String SQL_SELECT_LEAD_STATUS_DIALLER_WON ="select LSS.LEAD_STATUS_ID ||'#' || LSSS.LEAD_SUB_STATUS_ID ||'#' || LSSS.SUB_SUB_STATUS_ID as STATUS_SUBSTATUS_SUBSUBSTATUS_ID,  "+
	" LS.LEAD_STATUS ||'-' ||  LSS.SUB_STATUS || '-' || LSSS.SUB_SUB_STATUS "+
	" AS STATUS_SUBSTATUS_SUBSUBSTATUS from LEAD_SUB_STATUS LSS, LEAD_STATUS LS,LEAD_SUB_SUB_STATUS LSSS where  "+
	" LSSS. LEAD_SUB_STATUS_ID = LSS.SUB_STATUS_ID AND LSSS.SUBSTATUS_CODE=LSS.UNIQUE_ID AND "+
	" LSS.LEAD_STATUS_ID = LS.LEAD_STATUS_ID AND LSS.PRODUCT_LOB_ID=? AND LSS.SUB_STATUS_ID IN (370) AND LSS.LEAD_STATUS_ID in "+
	" (SELECT LEAD_STATUS_ID FROM LEAD_STATUS WHERE LEAD_STATUS IN ('WON'))";
	
	protected static final String SQL_SELECT_LEAD_STATUS_DIALLER_LOST ="select LSS.LEAD_STATUS_ID ||'#' || LSSS.LEAD_SUB_STATUS_ID ||'#' || LSSS.SUB_SUB_STATUS_ID as STATUS_SUBSTATUS_SUBSUBSTATUS_ID,  "+
		" LS.LEAD_STATUS ||'-' ||  LSS.SUB_STATUS || '-' || LSSS.SUB_SUB_STATUS "+
		" AS STATUS_SUBSTATUS_SUBSUBSTATUS from LEAD_SUB_STATUS LSS, LEAD_STATUS LS,LEAD_SUB_SUB_STATUS LSSS where  "+
		" LSSS. LEAD_SUB_STATUS_ID = LSS.SUB_STATUS_ID AND LSSS.SUBSTATUS_CODE=LSS.UNIQUE_ID AND "+
		" LSS.LEAD_STATUS_ID = LS.LEAD_STATUS_ID AND LSS.PRODUCT_LOB_ID=? AND LSS.SUB_STATUS_ID IN (370) AND LSS.LEAD_STATUS_ID in "+
		" (SELECT LEAD_STATUS_ID FROM LEAD_STATUS WHERE LEAD_STATUS IN ('LOST'))";

	
	public  ArrayList<LeadStatusDTO> getLeadStatusDiallerList(String queryString,int productLob) throws DAOException
	{
		
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		ArrayList<LeadStatusDTO> leadStatusList = new ArrayList<LeadStatusDTO>();
		LeadStatusDTO dto = null;
		try {
			con = DBConnection.getDBConnection();
			
			
			if(queryString.equals("SQL_SELECT_LEAD_STATUS_DIALLER_QUALIFICATION")){
			ps = con.prepareStatement(SQL_SELECT_LEAD_STATUS_DIALLER_QUALIFICATION);}
			else
			if(queryString.equals("SQL_SELECT_LEAD_STATUS_DIALLER_INFO_INADEQUATE")){
				ps = con.prepareStatement(SQL_SELECT_LEAD_STATUS_DIALLER_INFO_INADEQUATE);}
			else
			if(queryString.equals("SQL_SELECT_LEAD_STATUS_DIALLER_WIRED")){
				ps = con.prepareStatement(SQL_SELECT_LEAD_STATUS_DIALLER_WIRED);}
			else
			if(queryString.equals("SQL_SELECT_LEAD_STATUS_DIALLER_UNWIRED")){
				ps = con.prepareStatement(SQL_SELECT_LEAD_STATUS_DIALLER_UNWIRED);}
			else 
			if(queryString.equals("SQL_SELECT_LEAD_STATUS_DIALLER_ASSIGNED")){
				ps = con.prepareStatement(SQL_SELECT_LEAD_STATUS_DIALLER_ASSIGNED);}
			ps.setInt(1, productLob);
			rs = ps.executeQuery();
			while(rs.next()) {
				dto = new LeadStatusDTO();
				dto.setLeadStatusSubStatusId(rs.getString("STATUS_SUBSTATUS_ID"));
				dto.setLeadStatus(rs.getString("STATUS_SUBSTATUS"));				
				leadStatusList.add(dto);
			}
		} catch (Exception e) {
			e.printStackTrace();
			throw new DAOException("Exception occured while getting Lead Status list :  "+ e.getMessage(),e);
		} finally {
			try {
				////DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				throw new DAOException(e.getMessage(), e);
			}
		}
		return leadStatusList;
	}
	
	
	public  ArrayList<LeadStatusDTO> getLeadSubSubStatusDiallerList(String queryString,int productLob,int substatusId) throws DAOException
	{
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		ArrayList<LeadStatusDTO> leadSubSubStatusList = new ArrayList<LeadStatusDTO>();
		LeadStatusDTO dto = null;
		try {
			con = DBConnection.getDBConnection();
			
			
			if(queryString.equals("SQL_SELECT_LEAD_STATUS_DIALLER_WON")){
			ps = con.prepareStatement(SQL_SELECT_LEAD_STATUS_DIALLER_WON);}
			else
			if(queryString.equals("SQL_SELECT_LEAD_STATUS_DIALLER_LOST")){
				ps = con.prepareStatement(SQL_SELECT_LEAD_STATUS_DIALLER_LOST);}
			ps.setInt(1, productLob);
			rs = ps.executeQuery();
			while(rs.next()) {
				dto = new LeadStatusDTO();
				dto.setAllStatusId(rs.getString("STATUS_SUBSTATUS_SUBSUBSTATUS_ID"));
				dto.setAllStatusName(rs.getString("STATUS_SUBSTATUS_SUBSUBSTATUS"));		
				leadSubSubStatusList.add(dto);
			}
		} catch (Exception e) {
			e.printStackTrace();
			throw new DAOException("Exception occured while getting Lead Status list :  "+ e.getMessage(),e);
		} finally {
			try {
				////DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				throw new DAOException(e.getMessage(), e);
			}
		}
		return leadSubSubStatusList;
	}
	
	public  ArrayList<LeadStatusDTO> getLeadStatusDiallerList() throws DAOException
	{
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		ArrayList<LeadStatusDTO> leadStatusList = new ArrayList<LeadStatusDTO>();
		LeadStatusDTO dto = null;
		try {
			con = DBConnection.getDBConnection();
			ps = con.prepareStatement(SQL_SELECT_LEAD_STATUS_DIALLER);
			rs = ps.executeQuery();
			while(rs.next()) {
				dto = new LeadStatusDTO();
				dto.setLeadStatusId(rs.getInt("LEAD_STATUS_ID"));
				dto.setLeadStatus(rs.getString("LEAD_STATUS"));
				dto.setLeadStatusName(rs.getString("LEAD_STATUS_NAME"));
				leadStatusList.add(dto);
			}
		} catch (Exception e) {
			throw new DAOException("Exception occured while getting Lead Status list :  "+ e.getMessage(),e);
		} finally {
			try {
				////DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				throw new DAOException(e.getMessage(), e);
			}
		}
		return leadStatusList;
	}
	
	
	public  ArrayList<SourceDTO> getSourceList() throws DAOException
	{
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		ArrayList<SourceDTO> sourceList = new ArrayList<SourceDTO>();
		SourceDTO dto = null;
		try {
			con = DBConnection.getDBConnection();
			ps = con.prepareStatement(SQL_SELECT_SOURCE_MSTR);
			rs = ps.executeQuery();
			while(rs.next()) {
				dto = new SourceDTO();
				dto.setSourceId(rs.getInt("SOURCE_ID"));
				dto.setSourceName(rs.getString("SOURCE_NAME"));
				sourceList.add(dto);
			}
		} catch (Exception e) {
			throw new DAOException("Exception occured while getting Source list :  "+ e.getMessage(),e);
		} finally {
			try {
				////DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				throw new DAOException(e.getMessage(), e);
			}
		}
		return sourceList;
	}

	
	
	public  ArrayList<SubSourceDTO> getSubSourceList() throws DAOException
	{
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		ArrayList<SubSourceDTO> subSourceList = new ArrayList<SubSourceDTO>();
		SubSourceDTO dto = null;
		try {
			con = DBConnection.getDBConnection();
			ps = con.prepareStatement(SQL_SELECT_SUB_SOURCE_MSTR);
			rs = ps.executeQuery();
			while(rs.next()) {
				dto = new SubSourceDTO();
				dto.setSubSourceId(rs.getInt("SUBSOURCE_ID"));
				dto.setSubSourceName(rs.getString("SUBSOURCE_NAME"));
				subSourceList.add(dto);
			}
		} catch (Exception e) {
			throw new DAOException("Exception occured while getting Sub Source list :  "+ e.getMessage(),e);
		} finally {
			try {
				////DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				throw new DAOException(e.getMessage(), e);
			}
		}
		return subSourceList;
	}
	
	public  boolean isValidCircle(int circleId) throws DAOException
	{
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		boolean isValid=false;
		
		try {
			con = DBConnection.getDBConnection();
			ps = con.prepareStatement(SQL_VALIDATE_CIRCLE_ID);
			ps.setInt(1,circleId);
			rs = ps.executeQuery();
			
			if(rs.next()) 
				isValid = true;
			
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				//DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				e.printStackTrace();
			}
		}
		return isValid;
	}
	public  boolean isValidUserCircle(int circleId) throws DAOException
	{
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		boolean isValid=false;
		
		try {
			con = DBConnection.getDBConnection();
			ps = con.prepareStatement(SQL_VALIDATE_USER_CIRCLE_ID);
			ps.setInt(1,circleId);
			rs = ps.executeQuery();
			
			if(rs.next()) 
				isValid = true;
			
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				//DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				e.printStackTrace();
			}
		}
		return isValid;
	}
	
	public  boolean isValidCity(String cityCode,int circleId) throws DAOException
	{
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		boolean isValid=false;
		
		try {
			con = DBConnection.getDBConnection();
			ps = con.prepareStatement(SQL_VALIDATE_CITY_CODE);
			ps.setString(1,cityCode);
			ps.setInt(2,circleId);
			rs = ps.executeQuery();
			
			if(rs.next()) 
				isValid = true;
			
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				////DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				e.printStackTrace();
			}
		}
		return isValid;
	}
	
	
	
	/*public  boolean isValidZone(String zoneCode,String cityCode) throws DAOException
	{
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		boolean isValid=false;
		
		try {
			con = DBConnection.getDBConnection();
			ps = con.prepareStatement(SQL_VALIDATE_ZONE_CODE);
			ps.setString(1,zoneCode);
			ps.setString(2,cityCode);
			rs = ps.executeQuery();
			
			if(rs.next()) 
				isValid = true;
			
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				//DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				e.printStackTrace();
			}
		}
		return isValid;
	}*/
	
	public  boolean isValidRsu(String rsuCode,String cityZoneCode) throws DAOException
	{
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		boolean isValid=false;
		
		try {
			con = DBConnection.getDBConnection();
			ps = con.prepareStatement(SQL_VALIDATE_RSU_CODE);
			ps.setString(1,rsuCode);
			ps.setString(2,cityZoneCode);
			rs = ps.executeQuery();
			
			if(rs.next()) 
				isValid = true;
			
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured while validating Rsu Code :  "+ e.getMessage(),e);
		} finally {
			try {
				//DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				e.printStackTrace();
			}
		}
		return isValid;
	}
	
	public  boolean isValidPincode(String pincode,String cityZoneCode) throws DAOException //changed by neetika from citycode to cityzonecode
	{
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		boolean isValid=false;
		
		try {
			con = DBConnection.getDBConnection();
			ps = con.prepareStatement(SQL_VALIDATE_PINCODE);
			ps.setString(1,pincode);
			ps.setString(2,cityZoneCode);
			rs = ps.executeQuery();
			
			if(rs.next()) 
				isValid = true;
			
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception occured while validating Pincode :  "+ e.getMessage(),e);
		} finally {
			try {
				//DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				e.printStackTrace();
			}
		}		
		return isValid;
	}
	
	public  boolean isValidProduct(int productId) throws DAOException
	{
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		boolean isValid=false;
		
		try {
			con = DBConnection.getDBConnection();
			ps = con.prepareStatement(SQL_VALIDATE_PRODUCT_ID);
			ps.setInt(1,productId);
			rs = ps.executeQuery();
			
			if(rs.next()) 
				isValid = true;
			
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				////DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				e.printStackTrace();
			}
		}
		return isValid;
	}
	
	public  boolean isValidUserLoginId(String userLoginId) throws DAOException
	{
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		boolean isValid=false;
		
		try {
			con = DBConnection.getDBConnection();
			ps = con.prepareStatement(SQL_VALIDATE_USER_LOGIN_ID);
			ps.setString(1,userLoginId);
			rs = ps.executeQuery();
			
			if(rs.next()) 
				isValid = true;
			
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				////DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				e.printStackTrace();
			}
		}
		return isValid;
	}


	public boolean isValidProductLobId(int productLobId) throws DAOException {
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		boolean isValid=false;
		
		try {
			con = DBConnection.getDBConnection();
			ps = con.prepareStatement(SQL_VALIDATE_PRODUCT_LOB_ID);
			ps.setInt(1,productLobId);
			rs = ps.executeQuery();
			
			if(rs.next()) 
				isValid = true;
			
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				////DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				e.printStackTrace();
			}
		}
		return isValid;
	}
	
	public boolean isValidActorId(int actorId) throws DAOException {
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		boolean isValid=false;
		
		try {
			con = DBConnection.getDBConnection();
			ps = con.prepareStatement(SQL_VALIDATE_ACTOR_ID);
			ps.setInt(1,actorId);
			rs = ps.executeQuery();
			
			if(rs.next()) 
				isValid = true;
			
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				//DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				e.printStackTrace();
			}
		}
		return isValid;
	}
	public ArrayList<CityDTO> getCityForCircle(int circleMstriD) throws DAOException {
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		ArrayList<CityDTO> cityList = new ArrayList<CityDTO>();
		CityDTO dto = null;
			
        
		try {
			con = DBConnection.getDBConnection();
			ps = con.prepareStatement(SQL_SELECT_CITY_FOR_CIRCLE);
			
			
			ps.setInt(1, circleMstriD);
			rs = ps.executeQuery();
			while(rs.next()) {
				dto = new CityDTO();
				dto.setCityId(rs.getString("CITY_ID"));
				dto.setCityCode(rs.getString("CITY_CODE")); 
				dto.setCityName(rs.getString("CITY_NAME"));
				//dto.setCircleId(rs.getInt("CIRCLE_ID"));
				dto.setZoneCode(rs.getString("ZONE_CODE"));
				cityList.add(dto);
			}
		} catch (Exception e) {
			throw new DAOException("Exception occured while getting city list for Circle:  "+ e.getMessage(),e);
		} finally {
			try {
				////DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				throw new DAOException(e.getMessage(), e);
			}
		}
		return cityList;
	}
	public ArrayList<CityDTO> getCityForCircleForDialer(int circleMstriD) throws DAOException {
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		ArrayList<CityDTO> cityList = new ArrayList<CityDTO>();
		CityDTO dto = null;
		try {
			con = DBConnection.getDBConnection();
			ps = con.prepareStatement(SQL_SELECT_CITY_FOR_CIRCLE);
			
			ps.setInt(1, circleMstriD);
			rs = ps.executeQuery();
			while(rs.next()) {
				dto = new CityDTO();
				dto.setCityId(rs.getString("CITY_ID"));
				dto.setCityCode(rs.getString("ZONE_CODE")+"#"+rs.getString("CITY_CODE")); 
				dto.setCityName(rs.getString("CITY_NAME"));
				//dto.setCircleId(rs.getInt("CIRCLE_ID"));
				dto.setZoneCode(rs.getString("ZONE_CODE"));
				cityList.add(dto);
			}
		} catch (Exception e) {
			throw new DAOException("Exception occured while getting city list for Circle:  "+ e.getMessage(),e);
		} finally {
			try {
				//DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				throw new DAOException(e.getMessage(), e);
			}
		}
		return cityList;
	}

	public ArrayList<CityDTO> getCityForZone(String cityCode) throws DAOException { 
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		ArrayList<CityDTO> cityList = new ArrayList<CityDTO>();
		CityDTO dto = null;
		try {
			con = DBConnection.getDBConnection();
			logger.info("Query :"+SQL_SELECT_CITY_FOR_ZONE);
			ps = con.prepareStatement(SQL_SELECT_CITY_FOR_ZONE);
			ps.setString(1, cityCode);
			rs = ps.executeQuery();
			while(rs.next()) {
				dto = new CityDTO();
				dto.setCityId(rs.getString("CITY_ID"));
				dto.setCityCode(rs.getString("CITY_CODE")); 
				dto.setCityName(rs.getString("CITY_NAME"));
				dto.setCircleId(rs.getInt("CIRCLE_ID"));
				cityList.add(dto);
			}
		} catch (Exception e) {
			e.printStackTrace();
			throw new DAOException("Exception occured while getting city list for zone:  "+ e.getMessage(),e);
		} finally {
			try {
				////DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				throw new DAOException(e.getMessage(), e);
			}
		}
		return cityList;
	}
	public ArrayList<CircleForProductDTO> getCircleForProduct(int productLobId) throws DAOException {
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		ArrayList<CircleForProductDTO> circleList = new ArrayList<CircleForProductDTO>();
		CircleForProductDTO dto = null;
		try {
			con = DBConnection.getDBConnection();
			ps = con.prepareStatement(SQL_SELECT_CIRCLE_FOR_PRODUCT);
			ps.setInt(1, productLobId);
			rs = ps.executeQuery();
			while(rs.next()) {
				dto = new CircleForProductDTO();
				dto.setCircleId(rs.getInt("CIRCLE_ID"));
				dto.setCircleMstrId(rs.getInt("CIRCLE_MSTR_ID"));
				dto.setLobId(rs.getInt("LOB_ID"));
				dto.setCircleName(rs.getString("CIRCLE_NAME"));
				dto.setCircleDescription(rs.getString("CIRCLE_DESC"));
				dto.setCircleIdLobIdCircleMstrId(dto.getCircleId()+"#"+dto.getLobId()+"#"+dto.getCircleMstrId());
				circleList.add(dto);
			}
		} catch (Exception e) {
			e.printStackTrace();
			throw new DAOException("Exception occured while getting circle list for productLob "+productLobId+" :" + e.getMessage(),e);
		} finally {
			try {
				////DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				throw new DAOException(e.getMessage(), e);
			}
		}
		return circleList;
	}
	public ArrayList<PINCodeDTO> getPINCodeForCity(String cityCode)		throws DAOException {
		
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		ArrayList<PINCodeDTO> pinCodeList = new ArrayList<PINCodeDTO>();
		PINCodeDTO dto = null;
		try {
			con = DBConnection.getDBConnection();
			ps = con.prepareStatement(SQL_SELECT_PIN_FOR_CITY);
			ps.setString(1, cityCode);
			rs = ps.executeQuery();
			while(rs.next()) {
				dto = new PINCodeDTO();
				dto.setPinCode(rs.getString("PINCODE"));
				pinCodeList.add(dto);
			}
		} catch (Exception e) {
			e.printStackTrace();
			throw new DAOException("Exception occured while getting pinCode list for city:  "+ e.getMessage(),e);
		} finally {
			try {
				//DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				throw new DAOException(e.getMessage(), e);
			}
		}
		return pinCodeList;
	}

	public ArrayList<ZoneDTO> getZoneForCity(String cityCode)throws DAOException {
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		ArrayList<ZoneDTO> zoneList = new ArrayList<ZoneDTO>();
		ZoneDTO dto = null;
		try {
			con = DBConnection.getDBConnection();
			ps = con.prepareStatement(SQL_SELECT_ZONE_FOR_CITY);
			ps.setString(1, cityCode);
			rs = ps.executeQuery();
			while(rs.next()) {
				dto = new ZoneDTO();
				dto.setZoneId(rs.getString("ZONE_ID"));
				dto.setZoneCode(rs.getString("ZONE_CODE"));
				dto.setZoneName(rs.getString("ZONE_NAME"));
				zoneList.add(dto);
			}
		} catch (Exception e) {
			throw new DAOException("Exception occured while getting zone list for city :  "+ e.getMessage(),e);
		} finally {
			try {
				//DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				throw new DAOException(e.getMessage(), e);
			}
		}
		return zoneList;
	}

	public ArrayList<RSUDTO> getRsuForZone(String zoneCode) throws DAOException {
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		ArrayList<RSUDTO> rsuList = new ArrayList<RSUDTO>();
		RSUDTO dto = null;
		try {
			con = DBConnection.getDBConnection();
			ps = con.prepareStatement(SQL_SELECT_RSU_FOR_ZONE);
			ps.setString(1, zoneCode);
			rs = ps.executeQuery();
			while(rs.next()) {
				dto = new RSUDTO();
				dto.setRsuId(rs.getString("RSU_ID"));
				dto.setRsuCode(rs.getString("RSU_CODE"));
			//	dto.setZoneId(rs.getString("ZONE_ID"));
				rsuList.add(dto);
			}
		} catch (Exception e) {
			throw new DAOException("Exception occured while getting rsu list for Zone :  "+ e.getMessage(),e);
		} finally {
			try {
				//DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				throw new DAOException(e.getMessage(), e);
			}
		}
		return rsuList;
	}
	
	public  boolean isValidState(String stateCode) throws DAOException
	{
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		boolean isValid=false;
		
		try {
			con = DBConnection.getDBConnection();
			ps = con.prepareStatement(SQL_VALIDATE_STATE_CODE);
			ps.setString(1,stateCode);
			rs = ps.executeQuery();
			
			if(rs.next()) 
				isValid = true;
			
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				//DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				e.printStackTrace();
			}
		}
		return isValid;
	}
	
	public  boolean isValidRequestType(int requestId) throws DAOException
	{
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		boolean isValid=false;
		
		try {
			con = DBConnection.getDBConnection();
			ps = con.prepareStatement(SQL_VALIDATE_REQUEST_ID);
			ps.setInt(1,requestId);
			rs = ps.executeQuery();
			
			if(rs.next()) 
				isValid = true;
			
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				//DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				e.printStackTrace();
			}
		}
		return isValid;
	}
	public  boolean isValidSource(int sourceId) throws DAOException
	{
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		boolean isValid=false;
		
		try {
			con = DBConnection.getDBConnection();
			ps = con.prepareStatement(SQL_VALIDATE_SOURCE_ID);
			ps.setInt(1,sourceId);
			rs = ps.executeQuery();
			
			if(rs.next()) 
				isValid = true;
			
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				//DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				e.printStackTrace();
			}
		}
		return isValid;
	}
	public  boolean isValidSubSource(int subSourceId) throws DAOException
	{
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		boolean isValid=false;
		
		try {
			con = DBConnection.getDBConnection();
			ps = con.prepareStatement(SQL_VALIDATE_SUB_SOURCE_ID);
			ps.setInt(1,subSourceId);
			rs = ps.executeQuery();
			
			if(rs.next()) 
				isValid = true;
			
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				//DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				e.printStackTrace();
			}
		}
		return isValid;
	}


	public ArrayList<ProductLobDTO> getProductLobList() throws DAOException {
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		ArrayList<ProductLobDTO> productLobList = new ArrayList<ProductLobDTO>();
		ProductLobDTO dto = null;
		try {
			con = DBConnection.getDBConnection();
			ps = con.prepareStatement(SQL_SELECT_PRODUCT_LOB_MSTR);
			rs = ps.executeQuery();
			while(rs.next()) {
				dto = new ProductLobDTO();
				dto.setProductLobID(rs.getInt("PRODUCT_LOB_ID"));
				dto.setProductLobName(rs.getString("PRODUCT_LOB"));
				productLobList.add(dto);
			}
		} catch (Exception e) {
			throw new DAOException("Exception occured while getting Telemedia Product list :  "+ e.getMessage(),e);
		} finally {
			try {
				////DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				throw new DAOException(e.getMessage(), e);
			}
		}
		return productLobList;
	}

	public  HashMap getSubStatusList(int statusId) throws DAOException
	{
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		HashMap leadStatusSubList = new HashMap();
		LeadStatusDTO dto = null;
		try {
			con = DBConnection.getDBConnection();
			ps = con.prepareStatement("SELECT * FROM LEAD_SUB_STATUS WHERE LEAD_STATUS_ID=?");
			ps.setInt(1, statusId);
			rs = ps.executeQuery();
			while(rs.next()) {
				leadStatusSubList.put(rs.getString("SUB_STATUS_ID"), rs.getString(""));
			}
		} catch (Exception e) {
			throw new DAOException("Exception occured while getting Report Types list :  "+ e.getMessage(),e);
		} finally {
			try {
				//DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				throw new DAOException(e.getMessage(), e);
			}
		}
		return leadStatusSubList;
	}
	
	public  ArrayList<ReportsDTO> getReportList() throws DAOException
	{
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		ArrayList<ReportsDTO> reportList = new ArrayList<ReportsDTO>();
		ReportsDTO dto = null;
		try {
			con = DBConnection.getDBConnection();
			ps = con.prepareStatement(SQL_SELECT_REPORT_TYPE);
			rs = ps.executeQuery();
			while(rs.next()) {
				dto = new ReportsDTO();
				dto.setReportId(rs.getInt("REPORT_ID"));
				dto.setReportName(rs.getString("REPORT_NAME"));
				reportList.add(dto);
			}
		} catch (Exception e) {
			throw new DAOException("Exception occured while getting Report Types list :  "+ e.getMessage(),e);
		} finally {
			try {
				//DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				throw new DAOException(e.getMessage(), e);
			}
		}
		return reportList;
	}
	
	public  ArrayList<ReportsDTO> getReportListDayMonthwise() throws DAOException
	{
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		ArrayList<ReportsDTO> reportList = new ArrayList<ReportsDTO>();
		ReportsDTO dto = null;
		try {
			con = DBConnection.getDBConnection();
			ps = con.prepareStatement(SQL_SELECT_REPORT_TYPE_DAY_MONTHLY);
			rs = ps.executeQuery();
			while(rs.next()) {
				dto = new ReportsDTO();
				dto.setReportId(rs.getInt("REPORT_ID"));
				dto.setReportName(rs.getString("REPORT_NAME"));
				reportList.add(dto);
			}
		} catch (Exception e) {
			e.printStackTrace();
			throw new DAOException("Exception occured while getting Report Types list :  "+ e.getMessage(),e);
		} finally {
			try {
				//DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				throw new DAOException(e.getMessage(), e);
			}
		}
		return reportList;
	}
	
	public  ArrayList<LogsDTO> getLogsList() throws DAOException
	{
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		ArrayList<LogsDTO> logsList = new ArrayList<LogsDTO>();
		LogsDTO dto = null;
		try {
			con = DBConnection.getDBConnection();
			ps = con.prepareStatement(SQL_SELECT_LOG_TYPE);
			rs = ps.executeQuery();
			while(rs.next()) {
				dto = new LogsDTO();
				dto.setLogsId(rs.getInt("REPORT_ID"));
				dto.setLogName(rs.getString("REPORT_NAME"));
				logsList.add(dto);
			}
		} catch (Exception e) {
			throw new DAOException("Exception occured while getting Logs Types list :  "+ e.getMessage(),e);
		} finally {
			try {
				//DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				throw new DAOException(e.getMessage(), e);
			}
		}
		return logsList;
	}
	
	
	public String getReportName(int reportId) throws DAOException
	{
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		String reportName = "";
		
		try {
			con = DBConnection.getDBConnection();
			ps = con.prepareStatement(SQL_SELECT_REPORT_NAME);
			ps.setInt(1,reportId);
			rs = ps.executeQuery();
			
			if(rs.next()) 
				reportName = rs.getString("REPORT_NAME");
			
		} catch (Exception e) {
			e.printStackTrace();
			throw new DAOException("Exception occured while getReportName :  "+ e.getMessage(),e);
		} finally {
			try {
				//DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				throw new DAOException(e.getMessage(), e);
			}
		}
		return reportName;
	}
	
	public  ArrayList<MasterDataDTO> getMasterList() throws DAOException
	{
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		ArrayList<MasterDataDTO> masterList = new ArrayList<MasterDataDTO>();
		MasterDataDTO dto = null;
		try {
			con = DBConnection.getDBConnection();
			ps = con.prepareStatement(SQL_SELECT_MASTER_TYPE);
			rs = ps.executeQuery();
			while(rs.next()) {
				dto = new MasterDataDTO();
				dto.setMasterTableId(rs.getInt("MASTER_ID"));
				dto.setMasterTableName(rs.getString("MASTER_NAME"));
				masterList.add(dto);
			}
		} catch (Exception e) {
			throw new DAOException("Exception occured while getting Master Types list :  "+ e.getMessage(),e);
		} finally {
			try {
				//DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				throw new DAOException(e.getMessage(), e);
			}
		}
		return masterList;
	}
	//changes by aman
	public String getMasterData(String masterTable, int lobId,int mstr) throws DAOException
	{
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		String sql2="";
		
		int prodLobId=lobId;
		logger.info("prodLobId"+prodLobId);
		
		ResourceBundle rb=ResourceBundle.getBundle("ApplicationResources");
		String schemaName=rb.getString("lms.schema.bulk.download");
		String sql1 = "select distinct(colname) from syscat.columns where tabname=? and TABSCHEMA='"+schemaName+"' ";
		
		//chnged by Nancy for sub status download lob wise
		if(prodLobId==-2 || (masterTable=="LEAD_STATUS" || masterTable=="STATE_MSTR" || masterTable=="PRODUCT_LOB" || masterTable=="PRODUCT_MSTR" || masterTable=="REQUEST_TYPE_MSTR" || masterTable=="SOURCE_MSTR" || masterTable=="SUB_SOURCE_MSTR" || masterTable=="USER_MSTR_ADDITIONAL"  || masterTable=="AGENCY_ASSIGNMENT"||masterTable=="ESCALATION_MSTR"))
		{	
			if("USER_MSTR_ADDITIONAL".equalsIgnoreCase(masterTable)){
				sql2= "select USER_LOGIN_ID,UPDATED_BY,trim(UPDATE_TIME) UPDATE_TIME,STATUS,USER_MOBILE_NUMBER from " + masterTable;
			System.out.println("sql2-->>"+sql2);
			}
			else{
			 sql2 = "select * from " + masterTable;
			}
		}
		
		else if((masterTable=="LEAD_SUB_SUB_STATUS" || masterTable=="LEAD_SUB_STATUS" || masterTable=="CIRCLE_MSTR" || masterTable=="CITY_MSTR" ||masterTable=="ZONE_MSTR"|| masterTable=="RSU_MSTR"|| masterTable=="PINCODE_MSTR" ||masterTable=="CITY_ZONE_MSTR" ||masterTable=="AUTO_ASSIGNMENT_MATRIX"||masterTable=="ESCALATION_MSTR") &&   prodLobId != -2)
		{
			if(masterTable=="CIRCLE_MSTR")
			{
				sql2 = "SELECT * FROM CIRCLE_MSTR WHERE LOB_ID=?   ";
			}
		
			if(masterTable=="LEAD_SUB_SUB_STATUS")
			{
				
				sql2 = "SELECT * FROM LEAD_SUB_SUB_STATUS WHERE SUBSTATUS_CODE IN(SELECT UNIQUE_ID FROM LEAD_SUB_STATUS WHERE  PRODUCT_LOB_ID = ?)";

			}
			
			if(masterTable=="LEAD_SUB_STATUS")
			{
				
				sql2 = "SELECT * FROM LEAD_SUB_STATUS WHERE  PRODUCT_LOB_ID = ?  ";
			}
			else if(masterTable=="ZONE_MSTR")
			{
				sql2=	"SELECT * FROM ZONE_MSTR WHERE CIRCLE_MSTR_ID in(SELECT CIRCLE_MSTR_ID FROM CIRCLE_MSTR WHERE LOB_ID=?)   ";
			}
			
			else if(masterTable=="CITY_MSTR")
			{
				sql2=	"SELECT * FROM CITY_MSTR WHERE ZONE_CODE in(SELECT ZONE_CODE FROM ZONE_MSTR WHERE CIRCLE_MSTR_ID in(SELECT CIRCLE_MSTR_ID FROM CIRCLE_MSTR WHERE LOB_ID=?))  ";
			}
			
			else if(masterTable=="CITY_ZONE_MSTR")
			{
				sql2=	"SELECT * FROM CITY_ZONE_MSTR WHERE CITY_CODE in (SELECT CITY_CODE FROM CITY_MSTR WHERE ZONE_CODE in (SELECT ZONE_CODE FROM ZONE_MSTR WHERE CIRCLE_MSTR_ID in(SELECT CIRCLE_MSTR_ID FROM CIRCLE_MSTR WHERE LOB_ID=?)))  ";
			}
			
			else if(masterTable=="PINCODE_MSTR")
			{
				sql2=	"SELECT * FROM PINCODE_MSTR WHERE CITY_ZONE_CODE in(SELECT CITY_ZONE_CODE FROM CITY_ZONE_MSTR WHERE CITY_CODE in (SELECT CITY_CODE FROM CITY_MSTR WHERE ZONE_CODE in (SELECT ZONE_CODE FROM ZONE_MSTR WHERE CIRCLE_MSTR_ID in(SELECT CIRCLE_MSTR_ID FROM CIRCLE_MSTR WHERE LOB_ID=?))))  ";
			}
			
			else if(masterTable=="RSU_MSTR")
			{
				sql2=	"SELECT * FROM RSU_MSTR WHERE CITY_ZONE_CODE in(SELECT CITY_ZONE_CODE FROM CITY_ZONE_MSTR WHERE CITY_CODE in (SELECT CITY_CODE FROM CITY_MSTR WHERE ZONE_CODE in (SELECT ZONE_CODE FROM ZONE_MSTR WHERE CIRCLE_MSTR_ID in(SELECT CIRCLE_MSTR_ID FROM CIRCLE_MSTR WHERE LOB_ID=?))))  ";
			}
			
			else if(masterTable=="AUTO_ASSIGNMENT_MATRIX" && mstr==15)
			{
				sql2=	"SELECT * FROM AUTO_ASSIGNMENT_MATRIX WHERE LOB_ID=? AND AUTO_ASSIGNMENT_TYPE='2'  ";
			}
			else if(masterTable=="AUTO_ASSIGNMENT_MATRIX" && mstr==19)
			{
				sql2=	"SELECT * FROM AUTO_ASSIGNMENT_MATRIX WHERE LOB_ID=? AND AUTO_ASSIGNMENT_TYPE='1'  ";
			}
			else if (masterTable =="ESCALATION_MSTR")
			{
				sql2= "select * from ESCALATION_MSTR  ";
			}
			 
		}
		String data = "";
		String callValue="";
		try {
			con = DBConnection.getDBConnection();
			if("USER_MSTR_ADDITIONAL".equalsIgnoreCase(masterTable)){
				String sql11 = "select distinct(colname) from syscat.columns where tabname=? and COLNAME <> 'USER_MOBILE_NUMBER' and TABSCHEMA='"+schemaName+"' ";
				ps = con.prepareStatement(sql11);
				ps.setString(1,masterTable);
			}
			else{
			ps = con.prepareStatement(sql1);
			ps.setString(1,masterTable);
			}
			rs = ps.executeQuery();
			int i = 0;
			
			ArrayList<String> columns = new ArrayList<String>();
			while(rs.next()) { 
				if(i != 0) 
					data += ",";
				i++;
				String value = rs.getString(1);
				data += value;
				columns.add(value);
			}

			ps = null;
			rs = null;
			
			
			
			ps = con.prepareStatement(sql2);
			if((masterTable=="LEAD_SUB_SUB_STATUS" || masterTable=="LEAD_SUB_STATUS" || masterTable=="CIRCLE_MSTR" || masterTable=="CITY_MSTR" ||masterTable=="ZONE_MSTR"|| masterTable=="RSU_MSTR"|| masterTable=="PINCODE_MSTR" ||masterTable=="CITY_ZONE_MSTR" || (masterTable=="AUTO_ASSIGNMENT_MATRIX" && (mstr==15 || mstr==19))) &&   prodLobId != -2)
			{
				ps.setInt(1, prodLobId);
				
			}
			
			rs = ps.executeQuery();
			while(rs.next()) { 
				
				data += "\n";
				i = 0;
				for(int j = 0; j < columns.size(); j++) {
					if(i != 0) 
						data += ",";
					i++;
					callValue=rs.getString(columns.get(j));
					if(callValue==null)callValue="";
					data += callValue; // code chanded by pratap as null is not a valid for user on 10-Dec 2013
					//data +=rs.getString(columns.get(j));
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
			throw new DAOException("Exception occured while get Master Data :  "+ e.getMessage(),e);
		} finally {
			try {
				//DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				throw new DAOException(e.getMessage(), e);
			}
		}
		return data;
	}
	


	public int getProductLobId(int productId) throws DAOException {
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		String sql = "SELECT PRODUCT_LOB_ID  FROM PRODUCT_MSTR WHERE PRODUCT_ID = ? AND STATUS ='A'  ";
		int productLobId=0;
		
		try {
			con = DBConnection.getDBConnection();
			ps = con.prepareStatement(sql);
			ps.setInt(1,productId);
			rs = ps.executeQuery();
		
			while(rs.next()) { 
				 productLobId = rs.getInt("PRODUCT_LOB_ID");
				
			}
			
		//	System.out.println("\n\n\n productLobId   "+productLobId);

			
		} catch (Exception e) {
			e.printStackTrace();
			throw new DAOException("Exception occured in getProductLobId :  "+ e.getMessage(),e);
		} finally {
			try {
				//DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				throw new DAOException(e.getMessage(), e);
			}
		}
		return productLobId;
	}

	
	public ArrayList<ProductDTO> getDTHProductList() throws DAOException {
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		ArrayList<ProductDTO> dthProductList = new ArrayList<ProductDTO>();
		ProductDTO dto = null;
		try {
			con = DBConnection.getDBConnection();
			ps = con.prepareStatement(SQL_SELECT_DTH_PRODUCT);
			rs = ps.executeQuery();
			while(rs.next()) {
				dto = new ProductDTO();
				dto.setProductId(rs.getInt("PRODUCT_ID"));
				dthProductList.add(dto);
			}
		} catch (Exception e) {
			throw new DAOException("Exception occured while getting DTH Product list :  "+ e.getMessage(),e);
		} finally {
			try {
				//DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				throw new DAOException(e.getMessage(), e);
			}
		}
		return dthProductList;
	}


	/*public boolean isValidRsu(String rsuCode,String cityZoneCode) throws DAOException {
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		boolean isValid=false;
		
		try {
			con = DBConnection.getDBConnection();
			ps = con.prepareStatement(SQL_VALID_RSU_CODE);
			ps.setString(1,rsuCode);
			ps.setString(2, cityZoneCode);
			rs = ps.executeQuery();
			
			if(rs.next()) 
				isValid = true;
			
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				//DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				e.printStackTrace();
			}
		}
		return isValid;
	}*/

	public ArrayList<KmActorMstr> getActorList(String actorID) throws DAOException {
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		ArrayList<KmActorMstr> masterList = new ArrayList<KmActorMstr>();
		KmActorMstr dto = null;
		try {
			con = DBConnection.getDBConnection();
			
			if(actorID != null && Integer.parseInt(actorID)== Constants.KM_USERCREATOR_ACTOR_ID) {
				ps = con.prepareStatement(SQL_SELECT_ACTOR_FOR_USERCREATION);
			}else {
				ps = con.prepareStatement(SQL_SELECT_ACTOR);
			}
			
			ps.setInt(1, Integer.parseInt(actorID));
			rs = ps.executeQuery();
			while(rs.next()) {
				dto = new KmActorMstr();
				dto.setKmActorId(rs.getString("KM_ACTOR_ID"));
				dto.setKmActorName(rs.getString("KM_ACTOR_NAME"));
				masterList.add(dto);
			}
		} catch (Exception e) {
			throw new DAOException("Exception occured while getting Master Types list :  "+ e.getMessage(),e);
		} finally {
			try {
				//DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				throw new DAOException(e.getMessage(), e);
			}
		}
		return masterList;
	}

	public boolean isValidLeadforFeasibility(Long leadId,int status) throws DAOException {
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		boolean isValid=false;
		
		try {
			con = DBConnection.getDBConnection();
			ps = con.prepareStatement(SQL_VALIDATE_FEASIBILITY_LEAD_ID);
			ps.setLong(1,leadId);
			ps.setInt(2, status);
			rs = ps.executeQuery();
			
			if(rs.next()) 
				isValid = true;
			
		} catch (Exception e) {
			e.printStackTrace();
			throw new DAOException("Exception occured while validating lead Id :  "+ e.getMessage(),e);
		} finally {
			try {
				//DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				throw new DAOException(e.getMessage(), e);
			}
		}
		return isValid;
	}


	public ArrayList<BulkAssignmentCircleDTO> getCircleTypeList() throws DAOException {
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		ArrayList<BulkAssignmentCircleDTO> circleTypeList = new ArrayList<BulkAssignmentCircleDTO>();
		BulkAssignmentCircleDTO dto = null;
		try {
			con = DBConnection.getDBConnection();
			ps = con.prepareStatement(SQL_SELECT_ASSIGNMENTCIRCLE_TYPE);
			rs = ps.executeQuery();
			while(rs.next()) {
				dto = new BulkAssignmentCircleDTO();
				dto.setCircleId(rs.getInt("CIRCLE_ID"));
				dto.setCircleName(rs.getString("CIRCLE_NAME"));
				
				
				circleTypeList.add(dto);
			}
		} catch (Exception e) {
			throw new DAOException("Exception occured while getting Report Types list :  "+ e.getMessage(),e);
		} finally {
			try {
				//DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				throw new DAOException(e.getMessage(), e);
			}
		}
		return circleTypeList;
	}


	public ArrayList<ProductLobDTO> getLobsNameList() throws DAOException {
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		ArrayList<ProductLobDTO> productLobList = new ArrayList<ProductLobDTO>();
		ProductLobDTO dto = null;
		try {
			con = DBConnection.getDBConnection();
			ps = con.prepareStatement(SQL_SELECT_ASSIGNMENTLOB_TYPE);
			rs = ps.executeQuery();
			while(rs.next()) {
				dto = new ProductLobDTO();
				
				dto.setProductLobID(rs.getInt("PRODUCT_LOB_ID"));
				dto.setProductLobName(rs.getString("PRODUCT_LOB"));
				
				
				productLobList.add(dto);
			}
		} catch (Exception e) {
			throw new DAOException("Exception occured while getting Report Types list :  "+ e.getMessage(),e);
		} finally {
			try {
				//DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				throw new DAOException(e.getMessage(), e);
			}
		}
		return productLobList;
	}


	/*public ArrayList<BulkMatrixDownloadDTO> getAssignmentDownloadData(int circleTableId, int lobTableId,String usertype) throws DAOException {Connection con = null;
	
	
	StringBuilder builder=new StringBuilder();
	PreparedStatement ps = null;
	ResultSet rs = null;
	BulkMatrixDownloadDTO dto= null;
	String circle = null;String city = null;
	String rsu;String product = null;
	String leadProductId = null;
	int  primary = 0;
	String zone = null;String olm = null;String pincode = null;String query=null;
	
	 ArrayList<BulkMatrixDownloadDTO> matrixList = new ArrayList<BulkMatrixDownloadDTO>();

	try {
	
		
		logger.info("User Type......."+usertype);
		System.out.println("circle type all"+circleTableId);
		con = DBConnection.getDBConnection();
			
		if(circleTableId == Constants.CIRCLE_TABLE_ID &&  usertype.equalsIgnoreCase("both"))
		{
			logger.info("All and Both  block");
			
			query="SELECT a.ASSIGNMENT_KEY,a.CIRCLE_ID,a.CITY_ID,a.LEVEL_ID,a.OLM_ID,a.PINCODE,a.PRIMARY_AUTH,a.PRODUCT_LOB_ID,a.RSU_ID,a.USER_TYPE,a.ZONE_ID,a.CREATED,a.CREATED_BY,a.UPDATED_BY,a.UPDATED,a.LEVEL1_CC,a.LEVEL2_CC,a.LEVEL3_CC,a.LEVEL4_CC,a.PRODUCT_ID,a.CITY_ZONE_CODE,"+
			"(select city.CITY_NAME from city_mstr city where a.CITY_ID = city.CITY_CODE) as CITY_NAME,"+
			"(select z.ZONE_NAME from ZONE_MSTR z where a.ZONE_ID=z.ZONE_CODE) as ZONE_NAME,"+
			"(select c.CIRCLE_NAME from CIRCLE_MSTR c where a.CIRCLE_ID=c.CIRCLE_ID and c.LOB_ID="+lobTableId+") as CIRCLE_NAME,"+
			"(SELECT p.PRODUCT_LOB FROM PRODUCT_LOB p WHERE a.PRODUCT_LOB_ID=p.PRODUCT_LOB_ID ) AS PRODUCT_LOB,"+
			"(SELECT u.PARTNER_NAME FROM USER_MSTR U WHERE  a.OLM_ID=u.USER_LOGIN_ID)AS PARTNER_NAME FROM ASSIGNMENT_MATRIX a   WHERE  a.PRODUCT_LOB_ID="+lobTableId+" AND  a.STATUS='A'   ";
							
		
		}
		else if(usertype.equalsIgnoreCase("both"))
		{
			
			logger.info("both block");
			
			query="SELECT a.ASSIGNMENT_KEY,a.CIRCLE_ID,a.CITY_ID,a.LEVEL_ID,a.OLM_ID,a.PINCODE,a.PRIMARY_AUTH,a.PRODUCT_LOB_ID,a.RSU_ID,a.USER_TYPE,a.ZONE_ID,a.CREATED,a.CREATED_BY,a.UPDATED_BY,a.UPDATED,a.LEVEL1_CC,a.LEVEL2_CC,a.LEVEL3_CC,a.LEVEL4_CC,a.PRODUCT_ID,a.CITY_ZONE_CODE,"+
			"(select city.CITY_NAME from city_mstr city where a.CITY_ID = city.CITY_CODE) as CITY_NAME,"+
			"(select z.ZONE_NAME from ZONE_MSTR z where a.ZONE_ID=z.ZONE_CODE) as ZONE_NAME,"+
			"(select c.CIRCLE_NAME from CIRCLE_MSTR c where a.CIRCLE_ID=c.CIRCLE_ID and c.LOB_ID="+lobTableId+") as CIRCLE_NAME,"+
			"(SELECT p.PRODUCT_LOB FROM PRODUCT_LOB p WHERE a.PRODUCT_LOB_ID=p.PRODUCT_LOB_ID ) AS PRODUCT_LOB,"+
			"(SELECT u.PARTNER_NAME FROM USER_MSTR U WHERE  a.OLM_ID=u.USER_LOGIN_ID)AS PARTNER_NAME FROM ASSIGNMENT_MATRIX a   WHERE a.CIRCLE_ID="+circleTableId+" AND a.PRODUCT_LOB_ID="+lobTableId+" AND  a.STATUS='A'   ";
						
		}
		else if (circleTableId == Constants.CIRCLE_TABLE_ID)
		{
			logger.info("All Other  block");
			
			query="SELECT a.ASSIGNMENT_KEY,a.CIRCLE_ID,a.CITY_ID,a.LEVEL_ID,a.OLM_ID,a.PINCODE,a.PRIMARY_AUTH,a.PRODUCT_LOB_ID,a.RSU_ID,a.USER_TYPE,a.ZONE_ID,a.CREATED,a.CREATED_BY,a.UPDATED_BY,a.UPDATED,a.LEVEL1_CC,a.LEVEL2_CC,a.LEVEL3_CC,a.LEVEL4_CC,a.PRODUCT_ID,a.CITY_ZONE_CODE,"+
			"(select city.CITY_NAME from city_mstr city where a.CITY_ID = city.CITY_CODE) as CITY_NAME,"+
			"(select z.ZONE_NAME from ZONE_MSTR z where a.ZONE_ID=z.ZONE_CODE) as ZONE_NAME,"+
			"(select c.CIRCLE_NAME from CIRCLE_MSTR c where a.CIRCLE_ID=c.CIRCLE_ID and c.LOB_ID="+lobTableId+") as CIRCLE_NAME,"+
			"(SELECT p.PRODUCT_LOB FROM PRODUCT_LOB p WHERE a.PRODUCT_LOB_ID=p.PRODUCT_LOB_ID ) AS PRODUCT_LOB,"+
			"(SELECT u.PARTNER_NAME FROM USER_MSTR U WHERE  a.OLM_ID=u.USER_LOGIN_ID)AS PARTNER_NAME FROM ASSIGNMENT_MATRIX a   WHERE   a.PRODUCT_LOB_ID="+lobTableId+" AND a.USER_TYPE= '"+usertype+"' AND  a.STATUS='A'   ";
			
		}
		else
		{
			logger.info("other block");
			
			query="SELECT a.ASSIGNMENT_KEY,a.CIRCLE_ID,a.CITY_ID,a.LEVEL_ID,a.OLM_ID,a.PINCODE,a.PRIMARY_AUTH,a.PRODUCT_LOB_ID,a.RSU_ID,a.USER_TYPE,a.ZONE_ID,a.CREATED,a.CREATED_BY,a.UPDATED_BY,a.UPDATED,a.LEVEL1_CC,a.LEVEL2_CC,a.LEVEL3_CC,a.LEVEL4_CC,a.PRODUCT_ID,a.CITY_ZONE_CODE,"+
			"(select city.CITY_NAME from city_mstr city where a.CITY_ID = city.CITY_CODE) as CITY_NAME,"+
			"(select z.ZONE_NAME from ZONE_MSTR z where a.ZONE_ID=z.ZONE_CODE) as ZONE_NAME,"+
			"(select c.CIRCLE_NAME from CIRCLE_MSTR c where a.CIRCLE_ID=c.CIRCLE_ID and c.LOB_ID="+lobTableId+") as CIRCLE_NAME,"+
			"(SELECT p.PRODUCT_LOB FROM PRODUCT_LOB p WHERE a.PRODUCT_LOB_ID=p.PRODUCT_LOB_ID ) AS PRODUCT_LOB,"+
			"(SELECT u.PARTNER_NAME FROM USER_MSTR U WHERE  a.OLM_ID=u.USER_LOGIN_ID)AS PARTNER_NAME FROM ASSIGNMENT_MATRIX a   WHERE a.CIRCLE_ID="+circleTableId+" AND a.PRODUCT_LOB_ID="+lobTableId+" AND a.USER_TYPE= '"+usertype+"' AND  a.STATUS='A'   ";
			
		}
		ps= con.prepareStatement(query);
		
		rs = ps.executeQuery();
		ArrayList<BulkMatrixDownloadDTO> temp=new ArrayList<BulkMatrixDownloadDTO>();
		
		while(rs.next()) {
			
			dto = new BulkMatrixDownloadDTO();
			
			String Assignment=rs.getString(1);
			String AssignmentValue=Assignment.split("~")[8];
			//System.out.println("Assignment Key"+AssignmentValue);
			circle=rs.getString("CIRCLE_ID");
			//System.out.println("CIRCLE_ID"+circle);
			city=rs.getString("CITY_ID");
			//System.out.println("CITY_ID"+city);
			String level=rs.getString("LEVEL_ID");
			//System.out.println("Level Id......"+level);
			olm=rs.getString("OLM_ID");
			//System.out.println("OLMiD"+olm);
			pincode=rs.getString("PINCODE");
			//System.out.println("PINCODE..."+pincode);
			primary=rs.getInt("PRIMARY_AUTH");
			//System.out.println("PRIMARY_AUTH"+primary);
			product=rs.getString(8);
			rsu=rs.getString(9);
			String user=rs.getString(10);
			zone=rs.getString("ZONE_ID");
			String cityZone=rs.getString("CITY_ZONE_CODE");
			//System.out.println("city zone"+cityZone);
			 Added By Parnika on 2 July 
			leadProductId = rs.getString("PRODUCT_ID");
			 End of changes By parnika 
			
		
			
			if (primary == 1 && AssignmentValue.equals("A")) {
				
				
				String productId = rs.getString("PRODUCT_ID");
				
				dto.setProductLobId(rs.getString("PRODUCT_LOB_ID"));
				dto.setOlmId(rs.getString("OLM_ID"));
				dto.setCircleId(rs.getString("CIRCLE_ID"));
				dto.setCityId(rs.getString("CITY_ID"));
				dto.setZoneId(rs.getString("ZONE_ID"));
				dto.setPincode(rs.getString("PINCODE"));
				dto.setRsuId(rs.getString("RSU_ID"));
				//dto.setLevelId(rs.getString("LEVEL_ID"));
				if(temp.size()>0)
						{
                       ListIterator<BulkMatrixDownloadDTO> iterator=temp.listIterator();
					
					while(iterator.hasNext()){
						BulkMatrixDownloadDTO bDTO=iterator.next();
						if((bDTO.getCityId().equals(city)) && (bDTO.getCircleId().equals(circle)) && (bDTO.getProductLobId().equals(product)) && (bDTO.getPincode().equals(pincode)) && (bDTO.getRsuId().equals(rsu)) && (bDTO.getZoneId().equals(zone)) && (bDTO.getCityZoneCode().equals(cityZone)) && (bDTO.getProductId().equals(leadProductId)))
						{
							builder.append(bDTO.getOlmId()+",");
						}
						}
						}
				if(builder.length()>0)
				{
					 dto.setSecondaryOlmId(builder.substring(0, builder.length()-1));
					 builder.delete(0,builder.length());
				}
				
				dto.setUserType(rs.getString("USER_TYPE"));
				dto.setCreated(rs.getString("CREATED"));
				dto.setCreatedBy(rs.getString("CREATED_BY"));
				dto.setUpdatedBy(rs.getString("UPDATED_BY"));
				dto.setUpdated(rs.getString("UPDATED"));
				
				//Added By Bhaskar
				if(temp.size()>0)
				{
               ListIterator<BulkMatrixDownloadDTO> iterator=temp.listIterator();
			
			while(iterator.hasNext()){
				
				BulkMatrixDownloadDTO bDTO=iterator.next();
				dto.setLevel1CC(bDTO.getLevel1CC());
				dto.setLevel2CC(bDTO.getLevel2CC());
				dto.setLevel3CC(bDTO.getLevel3CC());
				dto.setLevel4CC(bDTO.getLevel4CC());
				}
				}
				
				//End By Bhaskar
				
				dto.setProductName(rs.getString("PRODUCT_LOB"));
				dto.setCircleName(rs.getString("CIRCLE_NAME"));
				dto.setCityName(rs.getString("CITY_NAME"));
				dto.setZonename(rs.getString("ZONE_NAME"));
				dto.setPartnerName(rs.getString("PARTNER_NAME"));
				 Added by Parnika 
				if (!productId.equalsIgnoreCase("-1")){
					dto.setProductId(productId);
				}
				else{
					dto.setProductId("");
				}
				 End of changes by Parnika 
				dto.setCityZoneCode(rs.getString("CITY_ZONE_CODE"));

				matrixList.add(dto);
			}
			//if(AssignmentValue.equals("A")) 
			else {
				
				if(matrixList!=null && !matrixList.isEmpty()){
					ListIterator<BulkMatrixDownloadDTO> iterator=matrixList.listIterator();
					
					while(iterator.hasNext()){
						BulkMatrixDownloadDTO bDTO=iterator.next();
						//System.out.println("Parnika ::::::::"+ bDTO.getProductId() + "Lead Product Id "+leadProductId );
						if(!leadProductId.equalsIgnoreCase("-1")){
							if((bDTO.getCityId().equals(city)) && (bDTO.getCircleId().equals(circle)) && (bDTO.getProductLobId().equals(product)) && (bDTO.getPincode().equals(pincode)) && (bDTO.getRsuId().equals(rsu)) && (bDTO.getZoneId().equals(zone)) && (bDTO.getCityZoneCode().equals(cityZone)) && (AssignmentValue.equalsIgnoreCase("A")) && (bDTO.getProductId().equals(leadProductId)))
							{
								String olmid=bDTO.getSecondaryOlmId();
								if(olmid!=null){
									bDTO.setSecondaryOlmId(olmid+","+olm);
								}else{
									bDTO.setSecondaryOlmId(olm);
								}
							}
						}
						else{
							if((bDTO.getCityId().equals(city)) && (bDTO.getCircleId().equals(circle)) && (bDTO.getProductLobId().equals(product)) && (bDTO.getPincode().equals(pincode)) && (bDTO.getRsuId().equals(rsu)) && (bDTO.getZoneId().equals(zone)) && (bDTO.getCityZoneCode().equals(cityZone)) && (AssignmentValue.equalsIgnoreCase("A")) && (bDTO.getProductId().equals("")))
							{
								String olmid=bDTO.getSecondaryOlmId();
								if(olmid!=null){
									bDTO.setSecondaryOlmId(olmid+","+olm);
								}else{
									bDTO.setSecondaryOlmId(olm);
								}
							}
						}

						iterator.set(bDTO);
					}
				}
				
				String productId = rs.getString("PRODUCT_ID");
				dto.setProductLobId(rs.getString("PRODUCT_LOB_ID"));
				dto.setOlmId(rs.getString("OLM_ID"));
				dto.setCircleId(rs.getString("CIRCLE_ID"));
				dto.setCityId(rs.getString("CITY_ID"));
				dto.setZoneId(rs.getString("ZONE_ID"));
				dto.setPincode(rs.getString("PINCODE"));
				dto.setRsuId(rs.getString("RSU_ID"));
				//dto.setLevelId(rs.getString("LEVEL_ID"));	
				dto.setUserType(rs.getString("USER_TYPE"));
				dto.setCreated(rs.getString("CREATED"));
				dto.setCreatedBy(rs.getString("CREATED_BY"));
				dto.setUpdatedBy(rs.getString("UPDATED_BY"));
				dto.setUpdated(rs.getString("UPDATED"));
				//Added By Bhaskar
				
				if(matrixList!=null && !matrixList.isEmpty()){
					ListIterator<BulkMatrixDownloadDTO> iterator=matrixList.listIterator();
					
					while(iterator.hasNext()){
						BulkMatrixDownloadDTO bDTO=iterator.next();
				if( level.equalsIgnoreCase("1") && (bDTO.getCityId().equals(city)) && (bDTO.getCircleId().equals(circle)) && (bDTO.getProductLobId().equals(product)) && (bDTO.getPincode().equals(pincode)) && (bDTO.getRsuId().equals(rsu)) && (bDTO.getZoneId().equals(zone) && (bDTO.getCityZoneCode().equals(cityZone)) && AssignmentValue.equalsIgnoreCase("E")))
				{
							
					bDTO.setLevel1CC(rs.getString("LEVEL1_CC"));
					System.out.println("level1cc"+bDTO.getLevel1CC());
					bDTO.setLevel2CC(rs.getString("LEVEL2_CC"));
					bDTO.setLevel3CC(rs.getString("LEVEL3_CC"));
					bDTO.setLevel4CC(rs.getString("LEVEL4_CC"));
					iterator.set(bDTO);
					}
					}
					}
				//End By Bhaskar
				
				dto.setProductName(rs.getString("PRODUCT_LOB"));
				dto.setCircleName(rs.getString("CIRCLE_NAME"));
				dto.setCityName(rs.getString("CITY_NAME"));
				dto.setZonename(rs.getString("ZONE_NAME"));
				dto.setPartnerName(rs.getString("PARTNER_NAME"));
				if (!productId.equalsIgnoreCase("-1")){
					dto.setProductId(productId);
				}
				else{
					dto.setProductId("");
				}
				dto.setCityZoneCode(rs.getString("CITY_ZONE_CODE"));

				temp.add(dto);
			}
		}
		
	}
catch (Exception e) {
		e.printStackTrace();
		throw new DAOException("Exception occured while getAssignmentDownloadReport :  "+ e.getMessage(),e);
	} finally {
		try {
			//DBConnection.releaseResources(con,ps,rs);
		} catch (Exception e) {				
			throw new DAOException(e.getMessage(), e);
		}
	}
	return  matrixList;}
	*/
public ArrayList<BulkMatrixDownloadDTO> getAssignmentDownloadData(int circleTableId, int lobTableId,String usertype) throws DAOException {Connection con = null;
	
	
	StringBuilder builder=null;
	PreparedStatement ps = null;
	ResultSet rs = null;
	BulkMatrixDownloadDTO dto= null;
	String circle = null;String city = null;
	String rsu;String product = null;
	//String leadProductId = null;
	String productId=null;
	int  primary = 0;
	String zone = null;String olm = null;String pincode = null;String query=null;
	String Assignment=null;String AssignmentValue=null;
	//Set set=new HashSet();
	 ArrayList<BulkMatrixDownloadDTO> matrixList = new ArrayList<BulkMatrixDownloadDTO>();

	try {
	
		
		logger.info("User Type......."+usertype);
		
		con = DBConnection.getDBConnection();
			
		if(circleTableId == Constants.CIRCLE_TABLE_ID &&  usertype.equalsIgnoreCase("both"))
		{
			logger.info("All and Both  block");
			
			query="SELECT a.ASSIGNMENT_KEY,a.CIRCLE_ID,a.CITY_ID,a.LEVEL_ID,a.OLM_ID,a.PINCODE,a.PRIMARY_AUTH,a.PRODUCT_LOB_ID,a.RSU_ID,a.USER_TYPE,a.ZONE_ID,a.CREATED,a.CREATED_BY,a.UPDATED_BY,a.UPDATED,a.LEVEL1_CC,a.LEVEL2_CC,a.LEVEL3_CC,a.LEVEL4_CC,a.PRODUCT_ID,a.CITY_ZONE_CODE,a.REQUEST_CATEGORY_ID,"+
			"(select city.CITY_NAME from city_mstr city where a.CITY_ID = city.CITY_CODE) as CITY_NAME,"+
			"(select z.ZONE_NAME from ZONE_MSTR z where a.ZONE_ID=z.ZONE_CODE) as ZONE_NAME,"+
			"(select c.CIRCLE_NAME from CIRCLE_MSTR c where a.CIRCLE_ID=c.CIRCLE_ID and c.LOB_ID="+lobTableId+") as CIRCLE_NAME,"+
			"(SELECT p.PRODUCT_LOB FROM PRODUCT_LOB p WHERE a.PRODUCT_LOB_ID=p.PRODUCT_LOB_ID ) AS PRODUCT_LOB,"+
			"(SELECT u.PARTNER_NAME FROM USER_MSTR U WHERE  a.OLM_ID=u.USER_LOGIN_ID)AS PARTNER_NAME FROM ASSIGNMENT_MATRIX a   WHERE  a.PRODUCT_LOB_ID="+lobTableId+" AND  a.STATUS='A' ORDER BY a.PRIMARY_AUTH desc   ";
							
		
		}
		else if(usertype.equalsIgnoreCase("both"))
		{
			
			logger.info("both block");
			
			query="SELECT a.ASSIGNMENT_KEY,a.CIRCLE_ID,a.CITY_ID,a.LEVEL_ID,a.OLM_ID,a.PINCODE,a.PRIMARY_AUTH,a.PRODUCT_LOB_ID,a.RSU_ID,a.USER_TYPE,a.ZONE_ID,a.CREATED,a.CREATED_BY,a.UPDATED_BY,a.UPDATED,a.LEVEL1_CC,a.LEVEL2_CC,a.LEVEL3_CC,a.LEVEL4_CC,a.PRODUCT_ID,a.CITY_ZONE_CODE,a.REQUEST_CATEGORY_ID,"+
			"(select city.CITY_NAME from city_mstr city where a.CITY_ID = city.CITY_CODE) as CITY_NAME,"+
			"(select z.ZONE_NAME from ZONE_MSTR z where a.ZONE_ID=z.ZONE_CODE) as ZONE_NAME,"+
			"(select c.CIRCLE_NAME from CIRCLE_MSTR c where a.CIRCLE_ID=c.CIRCLE_ID and c.LOB_ID="+lobTableId+") as CIRCLE_NAME,"+
			"(SELECT p.PRODUCT_LOB FROM PRODUCT_LOB p WHERE a.PRODUCT_LOB_ID=p.PRODUCT_LOB_ID ) AS PRODUCT_LOB,"+
			"(SELECT u.PARTNER_NAME FROM USER_MSTR U WHERE  a.OLM_ID=u.USER_LOGIN_ID)AS PARTNER_NAME FROM ASSIGNMENT_MATRIX a   WHERE a.CIRCLE_ID="+circleTableId+" AND a.PRODUCT_LOB_ID="+lobTableId+" AND  a.STATUS='A' ORDER BY a.PRIMARY_AUTH desc  ";
						
		}
		else if (circleTableId == Constants.CIRCLE_TABLE_ID)
		{
			logger.info("All Other  block");
			
			query="SELECT a.ASSIGNMENT_KEY,a.CIRCLE_ID,a.CITY_ID,a.LEVEL_ID,a.OLM_ID,a.PINCODE,a.PRIMARY_AUTH,a.PRODUCT_LOB_ID,a.RSU_ID,a.USER_TYPE,a.ZONE_ID,a.CREATED,a.CREATED_BY,a.UPDATED_BY,a.UPDATED,a.LEVEL1_CC,a.LEVEL2_CC,a.LEVEL3_CC,a.LEVEL4_CC,a.PRODUCT_ID,a.CITY_ZONE_CODE,a.REQUEST_CATEGORY_ID,"+
			"(select city.CITY_NAME from city_mstr city where a.CITY_ID = city.CITY_CODE) as CITY_NAME,"+
			"(select z.ZONE_NAME from ZONE_MSTR z where a.ZONE_ID=z.ZONE_CODE) as ZONE_NAME,"+
			"(select c.CIRCLE_NAME from CIRCLE_MSTR c where a.CIRCLE_ID=c.CIRCLE_ID and c.LOB_ID="+lobTableId+") as CIRCLE_NAME,"+
			"(SELECT p.PRODUCT_LOB FROM PRODUCT_LOB p WHERE a.PRODUCT_LOB_ID=p.PRODUCT_LOB_ID ) AS PRODUCT_LOB,"+
			"(SELECT u.PARTNER_NAME FROM USER_MSTR U WHERE  a.OLM_ID=u.USER_LOGIN_ID)AS PARTNER_NAME FROM ASSIGNMENT_MATRIX a   WHERE   a.PRODUCT_LOB_ID="+lobTableId+" AND a.USER_TYPE= '"+usertype+"' AND  a.STATUS='A' ORDER BY a.PRIMARY_AUTH desc  ";
			
		}
		else
		{
			logger.info("other block");
			
			query="SELECT a.ASSIGNMENT_KEY,a.CIRCLE_ID,a.CITY_ID,a.LEVEL_ID,a.OLM_ID,a.PINCODE,a.PRIMARY_AUTH,a.PRODUCT_LOB_ID,a.RSU_ID,a.USER_TYPE,a.ZONE_ID,a.CREATED,a.CREATED_BY,a.UPDATED_BY,a.UPDATED,a.LEVEL1_CC,a.LEVEL2_CC,a.LEVEL3_CC,a.LEVEL4_CC,a.PRODUCT_ID,a.CITY_ZONE_CODE,a.REQUEST_CATEGORY_ID,"+
			"(select city.CITY_NAME from city_mstr city where a.CITY_ID = city.CITY_CODE) as CITY_NAME,"+
			"(select z.ZONE_NAME from ZONE_MSTR z where a.ZONE_ID=z.ZONE_CODE) as ZONE_NAME,"+
			"(select c.CIRCLE_NAME from CIRCLE_MSTR c where a.CIRCLE_ID=c.CIRCLE_ID and c.LOB_ID="+lobTableId+") as CIRCLE_NAME,"+
			"(SELECT p.PRODUCT_LOB FROM PRODUCT_LOB p WHERE a.PRODUCT_LOB_ID=p.PRODUCT_LOB_ID ) AS PRODUCT_LOB,"+
			"(SELECT u.PARTNER_NAME FROM USER_MSTR U WHERE  a.OLM_ID=u.USER_LOGIN_ID)AS PARTNER_NAME FROM ASSIGNMENT_MATRIX a   WHERE a.CIRCLE_ID="+circleTableId+" AND a.PRODUCT_LOB_ID="+lobTableId+" AND a.USER_TYPE= '"+usertype+"' AND  a.STATUS='A' ORDER BY a.PRIMARY_AUTH desc   ";
			
		}
		
		ps= con.prepareStatement(query);
		
        rs = ps.executeQuery();
		ArrayList<BulkMatrixDownloadDTO> temp=new ArrayList<BulkMatrixDownloadDTO>();
		
		while(rs.next()) {
			
			dto = new BulkMatrixDownloadDTO();
			
			Assignment=rs.getString(1);
		AssignmentValue=Assignment.split("~")[9];
			//System.out.println("Assignment Key"+AssignmentValue);
			circle=rs.getString("CIRCLE_ID");
			//System.out.println("CIRCLE_ID"+circle);
			city=rs.getString("CITY_ID");
			//System.out.println("CITY_ID"+city);
			String level=rs.getString("LEVEL_ID");
			//System.out.println("Level Id......"+level);
			olm=rs.getString("OLM_ID");
			//System.out.println("OLMiD"+olm);
			pincode=rs.getString("PINCODE");
			//System.out.println("PINCODE..."+pincode);
			primary=rs.getInt("PRIMARY_AUTH");
			//System.out.println("PRIMARY_AUTH"+primary);
			product=rs.getString("PRODUCT_LOB_ID");
			rsu=rs.getString("RSU_ID");
			String user=rs.getString("USER_TYPE");
			zone=rs.getString("ZONE_ID");
			String cityZone=rs.getString("CITY_ZONE_CODE");
			//System.out.println("city zone"+cityZone);
			/* Added By Parnika on 2 July */
			//leadProductId = rs.getString("PRODUCT_ID");

			productId = rs.getString("PRODUCT_ID");
			
			/* End of changes By parnika */
			
		
			
			if (primary == 1) {
				
				
				dto.setProductLobId(rs.getString("PRODUCT_LOB_ID"));
				dto.setOlmId(rs.getString("OLM_ID"));
				dto.setCircleId(rs.getString("CIRCLE_ID"));
				dto.setCityId(rs.getString("CITY_ID"));
				dto.setZoneId(rs.getString("ZONE_ID"));
				dto.setPincode(rs.getString("PINCODE"));
				dto.setRsuId(rs.getString("RSU_ID"));
				//dto.setLevelId(rs.getString("LEVEL_ID"));
				 builder=new StringBuilder();
				if(temp.size()>0)
						{
                       ListIterator<BulkMatrixDownloadDTO> iterator=temp.listIterator();
                       BulkMatrixDownloadDTO bDTO=null;
					while(iterator.hasNext()){
						 bDTO=iterator.next();
				//	System.out.println("bDTO.getProductId(). PRIMARY LOOP..................."+bDTO.getProductId());
					if(!bDTO.getProductId().equalsIgnoreCase("-1") && bDTO.getProductId() !=null && !bDTO.getProductId().equalsIgnoreCase("")){
						if((bDTO.getCityId().equals(city)) && AssignmentValue.equalsIgnoreCase("A") && (bDTO.getCircleId().equals(circle)) && (bDTO.getProductLobId().equals(product)) && (bDTO.getPincode().equals(pincode)) && (bDTO.getRsuId().equals(rsu)) && (bDTO.getZoneId().equals(zone)) && (bDTO.getCityZoneCode().equals(cityZone)) && (bDTO.getProductId().equals(productId)) && level.equalsIgnoreCase("0"))
						{
							if(!builder.toString().contains(bDTO.getOlmId().trim()))
								builder.append(bDTO.getOlmId()+",");
						}
					}else
					if (bDTO.getCityId().equals(city)&& AssignmentValue.equalsIgnoreCase("A") && (bDTO.getCircleId().equals(circle)) && (bDTO.getProductLobId().equals(product)) && (bDTO.getPincode().equals(pincode)) && (bDTO.getRsuId().equals(rsu)) && (bDTO.getZoneId().equals(zone)) && (bDTO.getCityZoneCode().equals(cityZone)) && (bDTO.getProductId().equals(productId))  && level.equalsIgnoreCase("0"))	{
						if(!builder.toString().contains(bDTO.getOlmId().trim()))
							builder.append(bDTO.getOlmId()+",");
							
						}
						}
						}
					
				if(builder.length()>0)
				{
					dto.setSecondaryOlmId(builder.substring(0, builder.length()-1));
					builder.delete(0,builder.length());
				
				}
				
				dto.setUserType(rs.getString("USER_TYPE"));
				dto.setCreated(rs.getString("CREATED"));
				dto.setCreatedBy(rs.getString("CREATED_BY"));
				dto.setUpdatedBy(rs.getString("UPDATED_BY"));
				dto.setUpdated(rs.getString("UPDATED"));
				
				//Added By Bhaskar
				if(temp.size()>0)
				{
               ListIterator<BulkMatrixDownloadDTO> iterator=temp.listIterator();
			
			while(iterator.hasNext()){
				
				BulkMatrixDownloadDTO bDTO=iterator.next();
				dto.setLevel1CC(bDTO.getLevel1CC());
				dto.setLevel2CC(bDTO.getLevel2CC());
				dto.setLevel3CC(bDTO.getLevel3CC());
				dto.setLevel4CC(bDTO.getLevel4CC());
				}
				}
				
				//End By Bhaskar
				
				dto.setProductName(rs.getString("PRODUCT_LOB"));
				dto.setCircleName(rs.getString("CIRCLE_NAME"));
				dto.setCityName(rs.getString("CITY_NAME"));
				dto.setZonename(rs.getString("ZONE_NAME"));
				dto.setPartnerName(rs.getString("PARTNER_NAME"));
				/* Added by Parnika */
			/*if (!productId.equalsIgnoreCase("-1")){
					dto.setProductId(productId);
				}
				else{
					dto.setProductId("");
				}*/
				/* End of changes by Parnika */
				dto.setProductId(rs.getString("PRODUCT_ID"));
				dto.setCityZoneCode(rs.getString("CITY_ZONE_CODE"));
				dto.setRequestCategoryId(rs.getString("REQUEST_CATEGORY_ID"));

				matrixList.add(dto);
			}
			//if(AssignmentValue.equals("A")) 
			else {
				
				if(matrixList!=null && !matrixList.isEmpty()){
					ListIterator<BulkMatrixDownloadDTO> iterator=matrixList.listIterator();
					String olmid;
					
					while(iterator.hasNext()){
						BulkMatrixDownloadDTO bDTO=iterator.next();
						//System.out.println("Parnika ::::::::"+ bDTO.getProductId() );
						if(!bDTO.getProductId().equalsIgnoreCase("-1") && bDTO.getProductId() !=null && !bDTO.getProductId().equalsIgnoreCase("")){
							if((bDTO.getCityId().equals(city)) && (bDTO.getCircleId().equals(circle)) && (bDTO.getProductLobId().equals(product)) && (bDTO.getPincode().equals(pincode)) && (bDTO.getRsuId().equals(rsu)) && (bDTO.getZoneId().equals(zone)) && (bDTO.getCityZoneCode().equals(cityZone)) && (AssignmentValue.equalsIgnoreCase("A")) && (bDTO.getProductId().equals(productId)) && level.equalsIgnoreCase("0"))
							{
								//Set set= new HashSet();
								/*String olmid=bDTO.getSecondaryOlmId();
								if(olmid!=null)
								{
								set.add(bDTO.getSecondaryOlmId());
								}
								bDTO.setSecondaryOlmIdSet(set);*/
							olmid=bDTO.getSecondaryOlmId();
								if(olmid!=null && !(olmid.trim().contains(olm.trim()))){
									
									bDTO.setSecondaryOlmId(olmid.trim()+","+olm.trim());
									
								
								}else{
									bDTO.setSecondaryOlmId(olm.trim());
								}
							}
							//logger.info("in if block pop :leadProductId :"+leadProductId+" secondary olm id  :"+bDTO.getSecondaryOlmId());
						}
						else{
							if((bDTO.getCityId().equals(city)) && (bDTO.getCircleId().equals(circle)) && (bDTO.getProductLobId().equals(product)) && (bDTO.getPincode().equals(pincode)) && (bDTO.getRsuId().equals(rsu)) && (bDTO.getZoneId().equals(zone)) && (bDTO.getCityZoneCode().equals(cityZone)) && (AssignmentValue.equalsIgnoreCase("A")) && (bDTO.getProductId().equals(productId)) && level.equalsIgnoreCase("0"))
							{
								
								//String olmid=bDTO.getSecondaryOlmId();
								//Set set= new HashSet();
								/*String olmid=bDTO.getSecondaryOlmId();
								if(olmid!=null)
								{
								set.add(bDTO.getSecondaryOlmId());
								}
								bDTO.setSecondaryOlmIdSet(set);*/
								
								olmid=bDTO.getSecondaryOlmId();
								if(olmid!=null && !(olmid.trim().contains(olm.trim()))){
									
									bDTO.setSecondaryOlmId(olmid.trim()+","+olm.trim());
									
								}else{
									bDTO.setSecondaryOlmId(olm.trim());
								}
							}
						//	logger.info("in else block pop :leadProductId :"+leadProductId+" secondary olm id  :"+bDTO.getSecondaryOlmId());
						}

						iterator.set(bDTO);
						//temp.add(bDTO);
					}
				}
				
				
				//productId = rs.getString("PRODUCT_ID");
				dto.setProductLobId(rs.getString("PRODUCT_LOB_ID"));
				dto.setOlmId(rs.getString("OLM_ID"));
				dto.setCircleId(rs.getString("CIRCLE_ID"));
				dto.setCityId(rs.getString("CITY_ID"));
				dto.setZoneId(rs.getString("ZONE_ID"));
				dto.setPincode(rs.getString("PINCODE"));
				dto.setRsuId(rs.getString("RSU_ID"));
				//dto.setLevelId(rs.getString("LEVEL_ID"));	
				dto.setUserType(rs.getString("USER_TYPE"));
				dto.setCreated(rs.getString("CREATED"));
				dto.setCreatedBy(rs.getString("CREATED_BY"));
				dto.setUpdatedBy(rs.getString("UPDATED_BY"));
				dto.setUpdated(rs.getString("UPDATED"));
				//Added By Bhaskar
			
				if(matrixList!=null && !matrixList.isEmpty()){
					ListIterator<BulkMatrixDownloadDTO> iterator=matrixList.listIterator();
					
					while(iterator.hasNext()){
						BulkMatrixDownloadDTO bDTO=iterator.next();
				if( level.equalsIgnoreCase("1") && (bDTO.getCityId().equals(city)) && (bDTO.getCircleId().equals(circle)) && (bDTO.getProductLobId().equals(product)) && (bDTO.getPincode().equals(pincode)) && (bDTO.getRsuId().equals(rsu)) && (bDTO.getZoneId().equals(zone) && (bDTO.getCityZoneCode().equals(cityZone))   && AssignmentValue.equalsIgnoreCase("E")))
				{
							
					bDTO.setLevel1CC(rs.getString("LEVEL1_CC"));
					//System.out.println("level1cc"+bDTO.getLevel1CC());
					bDTO.setLevel2CC(rs.getString("LEVEL2_CC"));
					bDTO.setLevel3CC(rs.getString("LEVEL3_CC"));
					bDTO.setLevel4CC(rs.getString("LEVEL4_CC"));
					//temp.add(bDTO);
					iterator.set(bDTO);
					}
					}
					}
				//End By Bhaskar
				
			dto.setProductName(rs.getString("PRODUCT_LOB"));
				dto.setCircleName(rs.getString("CIRCLE_NAME"));
				dto.setCityName(rs.getString("CITY_NAME"));
				dto.setZonename(rs.getString("ZONE_NAME"));
				dto.setPartnerName(rs.getString("PARTNER_NAME"));
				dto.setProductId(rs.getString("PRODUCT_ID"));
				/*if (!productId.equalsIgnoreCase("-1")){
					dto.setProductId(productId);
				}
				else{
					dto.setProductId("");
				}*/
				dto.setCityZoneCode(rs.getString("CITY_ZONE_CODE"));
				dto.setRequestCategoryId(rs.getString("REQUEST_CATEGORY_ID"));

				temp.add(dto);
			}
		}
		
	}
catch (Exception e) {
		e.printStackTrace();
		throw new DAOException("Exception occured while getAssignmentDownloadReport :  "+ e.getMessage(),e);
	} finally {
		try {
			//DBConnection.releaseResources(con,ps,rs);
		} catch (Exception e) {				
			throw new DAOException(e.getMessage(), e);
		}
	}
	return  matrixList;}
	
	public  boolean isValidZoneCode(int CircleID,int prodid,String zoneCode) throws DAOException
	{
		Connection con = null;
		PreparedStatement ps =	 null;
		ResultSet rs = null;
		boolean isValid=false;
		
		try {
			con = DBConnection.getDBConnection();
			//logger.info(SQL_VALIDATE_ZONE_CIRCLE);
			ps = con.prepareStatement(SQL_VALIDATE_ZONE_CIRCLE);
			ps.setString(1,zoneCode);
			ps.setInt(2,CircleID);
			ps.setInt(3,prodid);
			rs = ps.executeQuery();
			
			if(rs.next()) 
			{
				isValid = true;
				logger.info("isValid is  "+isValid);
			}
			
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				//DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				e.printStackTrace();
			}
		}
		return isValid;
	}
	public  boolean isValidCityFromZone(String cityCode,String zonecode) throws DAOException
	{
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		boolean isValid=false;
		
		try {
			con = DBConnection.getDBConnection();
		//	logger.info(SQL_VALIDATE_CITY_FROM_ZONE);
			ps = con.prepareStatement(SQL_VALIDATE_CITY_FROM_ZONE);
			ps.setString(1,zonecode);
			ps.setString(2,cityCode);
			rs = ps.executeQuery();
			
			if(rs.next()) 
				isValid = true;
			
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				////DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				e.printStackTrace();
			}
		}
		return isValid;
	}
	public  boolean isValidCityZoneCode(String cityCode,String zonecode) throws DAOException
	{
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		boolean isValid=false;
		
		try {
			con = DBConnection.getDBConnection();
			//logger.info(SQL_VALIDATE_CITY_ZONE_CODE);
			ps = con.prepareStatement(SQL_VALIDATE_CITY_ZONE_CODE);
			ps.setString(1,zonecode);
			ps.setString(2,cityCode);
			rs = ps.executeQuery();
			
			if(rs.next()) 
				isValid = true;
			
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				//DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				e.printStackTrace();
			}
		}
		return isValid;
	}
	public  boolean isValidCityZoneCodeReverse(int CircleID,int prodid,String cityzoneCode) throws DAOException
	{
		Connection con = null;
		PreparedStatement ps =	 null;
		ResultSet rs = null;
		boolean isValid=false;
		
		try {
			con = DBConnection.getDBConnection();
			//logger.info(SQL_VALIDATE_ZONE_CIRCLE);
			ps = con.prepareStatement(SQL_VALIDATE_ZONE_CIRCLE_REVERSE);
			ps.setString(1,cityzoneCode);
			ps.setInt(2,CircleID);
			ps.setInt(3,prodid);
			rs = ps.executeQuery();
			
			if(rs.next()) 
			{
				isValid = true;
				//System.out.println("");
				logger.info("isValidCityZoneCodeReverse is  "+isValid);
				return true;
				
			}
			
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				//DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				e.printStackTrace();
			}
		}
		return isValid;
	}
	public  boolean isValidCityReverse(int CircleID,int prodid,String cityeCode) throws DAOException
	{
		Connection con = null;
		PreparedStatement ps =	 null;
		ResultSet rs = null;
		boolean isValid=false;
		
		try {
			con = DBConnection.getDBConnection();
			//logger.info(SQL_VALIDATE_ZONE_CIRCLE);
			ps = con.prepareStatement(SQL_VALIDATE_CITY_REVERSE);
			ps.setString(1,cityeCode);
			ps.setInt(2,CircleID);
			ps.setInt(3,prodid);
			rs = ps.executeQuery();
			
			if(rs.next()) 
			{
				isValid = true;
				logger.info("isValidCityReverse is  "+isValid);
			}
			
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				//DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				e.printStackTrace();
			}
		}
		return isValid;
	}
	public  boolean isValidPinReverse(int CircleID,int prodid,String pincode) throws DAOException
	{
		Connection con = null;
		PreparedStatement ps =	 null;
		ResultSet rs = null;
		boolean isValid=false;
		
		try {
			con = DBConnection.getDBConnection();
			//logger.info(SQL_VALIDATE_ZONE_CIRCLE);
			ps = con.prepareStatement(SQL_VALIDATE_PIN_REVERSE);
			ps.setString(1,pincode);
			ps.setInt(2,CircleID);
			ps.setInt(3,prodid);
			rs = ps.executeQuery();
			
			if(rs.next()) 
			{
				isValid = true;
				logger.info("isValidPinReverse is  "+isValid);
			}
			
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				//DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				e.printStackTrace();
			}
		}
		return isValid;
	}
	public ArrayList<ZoneDTO> getZoneForCircle(int circleID) throws DAOException {
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		ArrayList<ZoneDTO> zoneList = new ArrayList<ZoneDTO>();
		ZoneDTO dto = null;
		try {
			con = DBConnection.getDBConnection();
			ps = con.prepareStatement(SQL_SELECT_ZONE_FOR_CIRCLE);
			ps.setInt(1, circleID);
			rs = ps.executeQuery();
			while(rs.next()) {
				dto = new ZoneDTO();
				dto.setZoneCode(rs.getString("ZONE_CODE"));				
				dto.setZoneName(rs.getString("ZONE_NAME"));
				zoneList.add(dto);
			}
		} catch (Exception e) {
			e.printStackTrace();
			throw new DAOException("Exception occured while getting city list for Circle:  "+ e.getMessage(),e);
		} finally {
			try {
				////DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				throw new DAOException(e.getMessage(), e);
			}
		}
		return zoneList;
	}
	public ArrayList<CityZoneDTO> getCityZoneOnCityChange(String cityCode) throws DAOException {  
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		ArrayList<CityZoneDTO> cityList = new ArrayList<CityZoneDTO>();
		CityZoneDTO dto = null;
		try {
			con = DBConnection.getDBConnection();
			ps = con.prepareStatement(SQL_SELECT_CITY_ZONE_FOR_CITY);
			ps.setString(1, cityCode);
			rs = ps.executeQuery();
			while(rs.next()) {
				dto = new CityZoneDTO();
				dto.setCityZoneId(rs.getInt("CITY_ZONE_ID"));
				dto.setCityZoneCode(rs.getString("CITY_ZONE_CODE")); 
				dto.setCityZoneName(rs.getString("CITY_ZONE_NAME"));
				cityList.add(dto);
			}
		} catch (Exception e) {
			e.printStackTrace();
			throw new DAOException("Exception occured while getting cityzone list for city:  "+ e.getMessage(),e);
		} finally {
			try {
				////DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				throw new DAOException(e.getMessage(), e);
			}
		}
		return cityList;
	}
	
	public String getZoneCode(String zonec) throws DAOException {  
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		String zoneCode="";
		String zoneName="";
		
		try {
			
			con = DBConnection.getDBConnection();
			ps = con.prepareStatement(SQL_SELECT_ZONE_FOR_CITY);
			ps.setString(1, zonec);
			rs = ps.executeQuery();
			if(rs.next()) {
				zoneCode=rs.getString("ZONE_CODE");
				zoneName=rs.getString("ZONE_NAME");
			}
		} catch (Exception e) {
			e.printStackTrace();
			throw new DAOException("Exception occured while getting zonecode for zonec: "+zonec+" :Exception"+ e.getMessage(),e);
		} finally {
			try {
				//DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				throw new DAOException(e.getMessage(), e);
			}
		}
		
		return zoneCode+"#"+zoneName;
	}
	// added by amarjeet for lead search dialer
	public String getZoneCodeforCity(String cityCode) throws DAOException {  
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		String zoneCode="";
		String zoneName="";
		try {
			
			con = DBConnection.getDBConnection();
			ps = con.prepareStatement(SQL_SELECT_ZONE_FOR_CITY_DIALER);
			ps.setString(1, cityCode);
			rs = ps.executeQuery();
			if(rs.next()) {
				zoneCode=rs.getString("ZONE_CODE");
				
			}
		} catch (Exception e) {
			e.printStackTrace();
			throw new DAOException("Exception occured while getting ZONEcODE: "+cityCode+" :Exception"+ e.getMessage(),e);
		} finally {
			try {
				//DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				throw new DAOException(e.getMessage(), e);
			}
		}
		
		return zoneCode;
	}
	//Code added by pratap to find out City zone, City code, zone code if we have the pin code i
	/*public String getDataForPinCode(String pinCode,int circleMstrId) throws DAOException {
		System.out.println("111111 came in daoimple getDataForPinCode  ***********:"+pinCode);
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		String cityCode="";
		String cityName="";
		String GET_CITY_CODE=" SELECT ZONE_CODE,CITY_CODE,CITY_NAME FROM CITY_MSTR WHERE CITY_CODE=? AND STATUS='A'  ";
		String GET_ZONE_CODE=" SELECT ZONE_CODE,ZONE_NAME,CIRCLE_MSTR_ID FROM ZONE_MSTR WHERE ZONE_CODE=? AND STATUS='A'   ";
		String GET_ZONE_CODE_FROM_CITY=" SELECT ZONE_CODE  from CITY_MSTR WHERE CITY_CODE= ? AND STATUS='A'   ";
		String GET_CITYZONE_FROM_PIN_CODE=" SELECT CITY_CODE,CITY_ZONE_CODE,CITY_ZONE_NAME FROM CITY_ZONE_MSTR WHERE CITY_ZONE_CODE = ( SELECT CITY_ZONE_CODE FROM PINCODE_MSTR WHERE PINCODE=?  AND STATUS='A'   ) AND STATUS='A'  ";
		String zone_code="";
		String zone_name="";
		String cityZone_code="";
		String cityZone_name="";
		int circleMstr_Id=-1;
		PreparedStatement pstmtCityZone=null;
        PreparedStatement pstmtCity=null;
        PreparedStatement pstmtZoneFromCity=null;
        PreparedStatement pstmtPinCode=null;
        ResultSet rsCityZone=null;
        ResultSet rsCity=null;
        ResultSet rsPin=null;
      
		try {
			 if (!pinCode.equalsIgnoreCase(""))
	    		{
				  con = DBConnection.getDBConnection();
					pstmtCityZone = con.prepareStatement(GET_CITY_CODE);
					pstmtCity = con.prepareStatement(GET_ZONE_CODE);
					pstmtZoneFromCity = con.prepareStatement(GET_ZONE_CODE_FROM_CITY);
					pstmtPinCode = con.prepareStatement(GET_CITYZONE_FROM_PIN_CODE);
				  	pstmtPinCode.setString(1, pinCode.trim());
				  	rsPin=pstmtPinCode.executeQuery();
	    			if(rsPin.next())
	    			{ 
	    				cityZone_code=rsPin.getString("CITY_ZONE_CODE");
	    				cityZone_name=rsPin.getString("CITY_ZONE_NAME");
	    				cityCode=rsPin.getString("CITY_CODE");
	    			}
	    			else
	    			{
	    			return "";
	    			}
	    			pstmtCityZone.setString(1,cityCode);
	    			rsCityZone=pstmtCityZone.executeQuery();
	    			if(rsCityZone.next())
	    			{
	    				zone_code=rsCityZone.getString("ZONE_CODE");
	    				cityCode=rsCityZone.getString("CITY_CODE");
	    				cityName=rsCityZone.getString("CITY_NAME");
	    			}
	    			pstmtCity.setString(1, zone_code);
	    			rsCity=pstmtCity.executeQuery();
	    			if(rsCity.next())
	    			{
	    				zone_code=rsCity.getString("ZONE_CODE");
	    				zone_name=rsCity.getString("ZONE_NAME");
	    				circleMstr_Id=rsCity.getInt("CIRCLE_MSTR_ID");
	    			}
	    			 System.out.println("circleMstrId != circleMstr_Id :"+" "+(circleMstrId != circleMstr_Id));
	    			 System.out.println("cityZone_code :"+cityZone_code+"  cityzone_name :"+cityZone_name+" citycode :"+cityCode+" cityname :"+cityName+"  zonecode  :"+zone_code+" zone_name : "+zone_name);
	     			logger.info("11111111111111111111111popcityZone_code :"+cityZone_code+"  cityzone_name :"+cityZone_name+" citycode :"+cityCode+" cityname :"+cityName+"  zonecode  :"+zone_code+" zone_name : "+zone_name);
	     		
	    			if(circleMstrId != circleMstr_Id) return "";
	    			
	    			
	    		}
				
		} catch (Exception e) {
			e.printStackTrace();
			throw new DAOException("Exception occured while getting gData for pincode : "+pinCode+" :Exception"+ e.getMessage(),e);
		} finally {
			try {
				//DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				throw new DAOException(e.getMessage(), e);
			}
		}
		return cityZone_code+"#"+cityZone_name+"#"+cityCode+"#"+cityName+"#"+zone_code+"#"+zone_name;
	}*/
	public String getDataForPinCode(String pinCode,int circleMstrId) throws DAOException {
		System.out.println(" in getDataForPinCode of masterdaoimpl :::::");
		Connection con = null;
		PreparedStatement getDetailForPinCodePs = null;
		PreparedStatement serviceablePinCodePs = null;
		PreparedStatement lobIdPs = null;
		ResultSet getDetailForPinCodeRs = null;
		ResultSet serviceablePinCodeRs = null;
		ResultSet lobIdRs = null;
		String cityCode="";
		String cityName="";
		String zone_code="";
		String zone_name="";
		String cityZone_code="";
		String cityZone_name="";
		int circleMstr_Id=-1;
		int lob_id = -1;
		String Value = "";
		String GET_ALL_DETAILS_ON_PINCODE="SELECT pm.CITY_ZONE_CODE,czm.CITY_ZONE_NAME, czm.CITY_CODE,ctm.CITY_NAME,ctm.ZONE_CODE,zm.ZONE_NAME,zm.CIRCLE_MSTR_ID FROM CIRCLE_MSTR CM,ZONE_MSTR ZM,CITY_MSTR CTM ,CITY_ZONE_MSTR CZM,PINCODE_MSTR PM "+
 "WHERE  PM.CITY_ZONE_CODE=czm.CITY_ZONE_CODE AND czm.CITY_CODE=ctm.CITY_CODE AND ctm.ZONE_CODE= zm.ZONE_CODE AND "+
"zm.CIRCLE_MSTR_ID= cm.CIRCLE_MSTR_ID and pm.PINCODE=? AND cm.CIRCLE_MSTR_ID=? AND pm.STATUS='A'  ";
		String SERVICEABLE_PINCODE_MSTR="SELECT SERVICEABLE_PINCODE_ID,PINCODE FROM SERVICEABLE_PINCODE_MSTR WHERE PINCODE=?";
		String SELECT_LOB = "SELECT LOB_ID FROM CIRCLE_MSTR WHERE CIRCLE_MSTR_ID = ?";
		try {
			logger.info("GET_ALL_DETAILS_ON_PINCODE :"+GET_ALL_DETAILS_ON_PINCODE+"  circleMstrId:"+circleMstrId+" pinCode:"+pinCode);
			
			 if (!pinCode.equalsIgnoreCase(""))
			 {		 
				  con = DBConnection.getDBConnection();
					 // Checking if LOB is Mobility 
				  lobIdPs = con.prepareStatement(SELECT_LOB);
				  lobIdPs.setInt(1, circleMstrId);
				  lobIdRs = lobIdPs.executeQuery();
				  if(lobIdRs.next()){
					  lob_id = lobIdRs.getInt("LOB_ID");
				  }
				  
				  // Checking serviceable Pincode only in case of Mobility 
				  
				  if(lob_id == Integer.parseInt(Constants.MOBILITY_LOB)){
					  serviceablePinCodePs = con.prepareStatement(SERVICEABLE_PINCODE_MSTR);
					  serviceablePinCodePs.setString(1, pinCode);
					  serviceablePinCodeRs=serviceablePinCodePs.executeQuery();
					  if(serviceablePinCodeRs.next())
					  {
						  
						  getDetailForPinCodePs = con.prepareStatement(GET_ALL_DETAILS_ON_PINCODE);
						  getDetailForPinCodePs.setString(1, pinCode);
						  getDetailForPinCodePs.setInt(2, circleMstrId);
						  getDetailForPinCodeRs=getDetailForPinCodePs.executeQuery();
		    			if(getDetailForPinCodeRs.next())
		    			{ 
		    				cityZone_code=getDetailForPinCodeRs.getString("CITY_ZONE_CODE");
		    				cityZone_name=getDetailForPinCodeRs.getString("CITY_ZONE_NAME");
		    				
		    				cityCode=getDetailForPinCodeRs.getString("CITY_CODE");
		    				cityName=getDetailForPinCodeRs.getString("CITY_NAME");
		    				
		    				zone_code=getDetailForPinCodeRs.getString("ZONE_CODE");
		    				zone_name=getDetailForPinCodeRs.getString("ZONE_NAME");
		    				
		    				circleMstr_Id=getDetailForPinCodeRs.getInt("CIRCLE_MSTR_ID");
		    			}
		    			else
		    			{
		    			return "";
		    			}
		    		}
					  else
					  {
						  return Constants.NON_SERVICEABLE_PINCODE;
					  }
				  }
				  // For all other LOBs
				  else{
					  getDetailForPinCodePs = con.prepareStatement(GET_ALL_DETAILS_ON_PINCODE);
					  getDetailForPinCodePs.setString(1, pinCode);
					  getDetailForPinCodePs.setInt(2, circleMstrId);
					  getDetailForPinCodeRs=getDetailForPinCodePs.executeQuery();
	    			if(getDetailForPinCodeRs.next())
	    			{ 
	    				cityZone_code=getDetailForPinCodeRs.getString("CITY_ZONE_CODE");
	    				cityZone_name=getDetailForPinCodeRs.getString("CITY_ZONE_NAME");
	    				
	    				cityCode=getDetailForPinCodeRs.getString("CITY_CODE");
	    				cityName=getDetailForPinCodeRs.getString("CITY_NAME");
	    				
	    				zone_code=getDetailForPinCodeRs.getString("ZONE_CODE");
	    				zone_name=getDetailForPinCodeRs.getString("ZONE_NAME");
	    				
	    				circleMstr_Id=getDetailForPinCodeRs.getInt("CIRCLE_MSTR_ID");
	    			}
	    			else
	    			{
	    			return "";
	    			}
				  }

	    			
	    		}
				
		} catch (Exception e) {
			e.printStackTrace();
			throw new DAOException("Exception occured while getting gData for pincode : "+pinCode+" :Exception"+ e.getMessage(),e);
		} finally {
			try {
				//DBConnection.releaseResources(con, getDetailForPinCodePs, getDetailForPinCodeRs);
				//DBConnection.releaseResources(con, serviceablePinCodePs, serviceablePinCodeRs);
			} catch (Exception e) {				
				throw new DAOException(e.getMessage(), e);
			}
		}
		return cityZone_code+"#"+cityZone_name+"#"+cityCode+"#"+cityName+"#"+zone_code+"#"+zone_name;
	} 
	public String getLeadStatusIfLeadNotServiceAble(int product_id) throws DAOException {
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		String status_subStatus_id=null;
		String status_substatus=null;
		String LEAD_SUB_STATUS_IF_LEAD_NOT_SERVICEABLE="select LSS.LEAD_STATUS_ID ||'#' || LSS.SUB_STATUS_ID as STATUS_SUBSTATUS_ID, LS.LEAD_STATUS ||'-' || LSS.SUB_STATUS AS STATUS_SUBSTATUS from LEAD_SUB_STATUS LSS, LEAD_STATUS LS where LSS.LEAD_STATUS_ID ="+   
	  " LS.LEAD_STATUS_ID AND LSS.PRODUCT_LOB_ID=? AND LSS.LEAD_STATUS_ID in (SELECT LEAD_STATUS_ID FROM LEAD_STATUS WHERE LEAD_STATUS IN ('LOST')) and LSS.LEAD_STATUS_ID <> LSS.SUB_STATUS_ID  and SUB_STATUS_ID=611";
		try
		{
			con = DBConnection.getDBConnection();
			ps=con.prepareStatement(LEAD_SUB_STATUS_IF_LEAD_NOT_SERVICEABLE);
			ps.setInt(1,product_id);
			rs=ps.executeQuery();
			while(rs.next())
			{
				status_subStatus_id=rs.getString("STATUS_SUBSTATUS_ID");
				status_substatus=rs.getString("STATUS_SUBSTATUS");
			}
		}
		catch(Exception ex)
		{
			ex.printStackTrace();
			throw new DAOException("Exception occured while getting gData for LeadStatus If Lead Not ServiceAble "+" :Exception"+ ex.getMessage(),ex);
		
		}
		finally
		{
			try
			{
				//DBConnection.releaseResources(con, ps, rs);
			}
			catch(Exception e)
			{
				throw new DAOException(e.getMessage(), e);
			}
		}
		return status_subStatus_id+"="+status_substatus;
	}
	public String getCityForPinCode(String pinCode) throws DAOException {  
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		String cityCode="";
		String cityName="";
		try {
			con = DBConnection.getDBConnection();
			
			ps = con.prepareStatement(SQL_SELECT_CITY_FOR_PIN);
			
			ps.setString(1, pinCode);
			rs = ps.executeQuery();
			if(rs.next()) {
				cityCode=rs.getString("CITY_CODE");
				cityName=rs.getString("CITY_NAME");
			}
		} catch (Exception e) {
			e.printStackTrace();
			throw new DAOException("Exception occured while getting city for pincode : "+pinCode+" :Exception"+ e.getMessage(),e);
		} finally {
			try {
				//DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				throw new DAOException(e.getMessage(), e);
			}
		}
		return cityCode+"#"+cityName;
	}

	public boolean isValidCircle(int circleId, int productLobId) throws DAOException {
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		boolean isValid=false;
		try {
			con = DBConnection.getDBConnection();
			ps = con.prepareStatement(SQL_VALIDATE_CIRCLE_ID);
			ps.setInt(1,circleId);
			ps.setInt(2,productLobId);
			rs = ps.executeQuery();
			
			if(rs.next()) 
				isValid = true;
			
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				//DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				e.printStackTrace();
			}
		}
		return isValid;
	}


	public boolean isValidCity(String cityCode, String cityZone) throws DAOException {
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		boolean isValid=false;
		
		try {
			con = DBConnection.getDBConnection();
			ps = con.prepareStatement(SQL_VALIDATE_CITY_CODE);
			ps.setString(1,cityCode);
			ps.setString(2,cityZone);
			rs = ps.executeQuery();
			
			if(rs.next()) 
				isValid = true;
			
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				//DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				e.printStackTrace();
			}
		}
		return isValid;
	}


	public boolean isValidCityZoneCodeId(String cityZoneCode, String city) throws DAOException {
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		boolean isValid=false;
		
		try {
			con = DBConnection.getDBConnection();
			ps = con.prepareStatement(SQL_VALIDATE_CITY_ZONE_CODE);
			ps.setString(1,cityZoneCode);
			ps.setString(2, city);
			rs = ps.executeQuery();
			
			if(rs.next()) 
				isValid = true;
			
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				//DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				e.printStackTrace();
			}
		}
		return isValid;
	}


	public boolean isValidProductid(int productId, int productLobId) throws DAOException {
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		boolean isValid=false;
		
		try {
			con = DBConnection.getDBConnection();
			ps = con.prepareStatement(SQL_VALIDATE_PRODUCT_ID_NAME);
			ps.setInt(1,productId);
			ps.setInt(2,productLobId);
			rs = ps.executeQuery();
			
			if(rs.next()) 
				isValid = true;
			
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				//DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				e.printStackTrace();
			}
		}
		return isValid;
	}


	public boolean isValidZoneId(String cityZone, int circleId, int productLobId) throws DAOException {
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		boolean isValid=false;
		
		try {
			con = DBConnection.getDBConnection();
			ps = con.prepareStatement(SQL_VALIDATE_ZONE_CODE);
			ps.setString(1,cityZone);
			ps.setInt(2, circleId);
			ps.setInt(3, productLobId);
			
			rs = ps.executeQuery();
			
			if(rs.next()) 
				isValid = true;
			
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				//DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				e.printStackTrace();
			}
		}
		return isValid;
	}


		public boolean isValidRsu(String rsuCode) throws LMSException {
			Connection con = null;
			ResultSet rs = null;
			PreparedStatement ps = null;
			boolean isValidRSU = false; 		
			try {
				con = DBConnection.getDBConnection();
				ps = con.prepareStatement(SQL_SELECT_RSU);
				ps.setString(1, rsuCode);
				rs = ps.executeQuery();
				if (rs.next()) {
					isValidRSU = true;
				}
				//System.out.println("isValidRSU : "+isValidRSU);
				
			}  catch (Exception e) {
				e.printStackTrace();
				logger.error(" Exception occured while validating RSU Code : "+ e.getMessage());
				throw new LMSException("Exception: " + e.getMessage(), e);
			} finally {
				try {
					//DBConnection.releaseResources(con, ps, rs);
				} catch (Exception e) {
					logger.error("Exception occured while releasing resources, Exception Message: "+ e.getMessage());
					throw new LMSException("Exception: " + e.getMessage(), e);
				}
			}
			return isValidRSU;
		}
	
	public boolean isValidCircleUsingProd(int circleId, int prodId) throws DAOException {
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		boolean isValid=false;
		try {
			con = DBConnection.getDBConnection();
			ps = con.prepareStatement(SQL_VALIDATE_CIRCLE_ID_PROD);
			ps.setInt(1,circleId);
			ps.setInt(2,prodId);
			rs = ps.executeQuery();
			
			if(rs.next()) 
				isValid = true;
			
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				//DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				e.printStackTrace();
			}
		}
		return isValid;
	}


	public boolean isValidCircleId(int circleId, int productLobId) throws DAOException {
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		boolean isValid=false;
		
		try {
			con = DBConnection.getDBConnection();
			ps = con.prepareStatement(SQL_VALIDATE_CIRCLE_ID_NEW);
			ps.setInt(1,circleId);
			ps.setInt(2, productLobId);
			rs = ps.executeQuery();
			
			if(rs.next()) 
				isValid = true;
			
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				//DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				e.printStackTrace();
			}
		}
		return isValid;
	}


	public boolean isValidCityId(String city, String cityZone) throws DAOException {
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		boolean isValid=false;
		
		try {
			con = DBConnection.getDBConnection();
			ps = con.prepareStatement(SQL_VALIDATE_CITY_ID_NEW);
			ps.setString(1,city);
			ps.setString(2, cityZone);
			rs = ps.executeQuery();
			
			if(rs.next()) 
				isValid = true;
			
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				//DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				e.printStackTrace();
			}
		}
		return isValid;
	}


	public boolean isValidPincodeNew(String pincode, String cityZoneCode) throws DAOException {
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		boolean isValid=false;
		
		try {
			con = DBConnection.getDBConnection();
			ps = con.prepareStatement(SQL_VALIDATE_PINCODE_NEW);
			ps.setString(1,pincode);
			ps.setString(2,cityZoneCode);
			
			rs = ps.executeQuery();
			
			if(rs.next()) 
				isValid = true;
			
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				//DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				e.printStackTrace();
			}
		}
		return isValid;
	}


	public boolean isValidRsuNew(String rsu, String cityZoneCode) throws DAOException {
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		boolean isValid=false;
		
		try {
			con = DBConnection.getDBConnection();
			ps = con.prepareStatement(SQL_VALIDATE_RSUCODE_NEW);
			ps.setString(1,rsu);
			ps.setString(2,cityZoneCode);
			
			rs = ps.executeQuery();
			
			if(rs.next()) 
				isValid = true;
			
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				//DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				e.printStackTrace();
			}
		}
		return isValid;
	}


	public ArrayList<CircleForProductLob> getCircleForProductName(int productLobId) throws DAOException {
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		ArrayList<CircleForProductLob> circleList = new ArrayList<CircleForProductLob>();
		CircleForProductLob dto = null;
		try {
			con = DBConnection.getDBConnection();
			ps = con.prepareStatement(SQL_SELECT_CIRCLE_FOR_PRODUCTLOB);
			ps.setInt(1, productLobId);
			rs = ps.executeQuery();
			while(rs.next()) {
				
				dto = new CircleForProductLob();
				dto.setCircleId(rs.getInt("CIRCLE_ID"));
				dto.setCircleName(rs.getString("CIRCLE_NAME"));
				
				circleList.add(dto);
			}
		} catch (Exception e) {
			e.printStackTrace();
			throw new DAOException("Exception occured while getting circle list for productLob "+productLobId+" :" + e.getMessage(),e);
		} finally {
			try {
				//DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				throw new DAOException(e.getMessage(), e);
			}
		}
		return circleList;
	}

	/* Added By Parnika for LMS Phase2 */
	
	public ArrayList<CircleDTO> getCircleListBasedOnLob(int lobId) throws DAOException {
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		ArrayList<CircleDTO> circleList = new ArrayList<CircleDTO>();
		CircleDTO dto = null;
		try {
			con = DBConnection.getDBConnection();
			if(lobId==-2){
				ps = con.prepareStatement(SQL_SELECT_CIRCLE_LOB_MSTR_ALL);
			}
			else{
			ps = con.prepareStatement(SQL_SELECT_CIRCLE_LOB_MSTR);
			ps.setInt(1, lobId);
			}
			rs = ps.executeQuery();
			while(rs.next()) {
				dto = new CircleDTO();
				dto.setCircleMstrId(rs.getInt("CIRCLE_MSTR_ID"));
				dto.setCircleName(rs.getString("CIRCLE_NAME"));
				dto.setCircleId(rs.getInt("CIRCLE_ID"));
				circleList.add(dto);
			}
		} catch (Exception e) {
			throw new DAOException("Exception occured while getting Circle list :  "+ e.getMessage(),e);
		} finally {
			try {
				//DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				throw new DAOException(e.getMessage(), e);
			}
		}
		return circleList;
	}	
	
	public ArrayList<ZoneDTO> getZoneListBasedOnCircleAndType(int selectedTypeId, int circleMstrId) throws DAOException {
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		ArrayList<ZoneDTO> zoneList = new ArrayList<ZoneDTO>();
		ZoneDTO dto = null;
		try {
			con = DBConnection.getDBConnection();
			if (selectedTypeId == 1){
				ps = con.prepareStatement(SQL_SELECT_CIRCLE_ZONE_TYPE_MSTR);
			}
			else{
				ps = con.prepareStatement(SQL_SELECT_CIRCLE_CITY_ZONE_MSTR);
			}
						
			ps.setInt(1, circleMstrId);
			rs = ps.executeQuery();
			while(rs.next()) {
				dto = new ZoneDTO();
				dto.setZoneId(rs.getString("ZONE_CODE"));
				dto.setZoneName(rs.getString("ZONE_NAME"));
				zoneList.add(dto);
			}
		} catch (Exception e) {
			throw new DAOException("Exception occured while getting Zone list :  "+ e.getMessage(),e);
		} finally {
			try {
				//DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				throw new DAOException(e.getMessage(), e);
			}
		}
		return zoneList;
	}
	
	public ArrayList<ZoneDTO> getZoneListBasedOnCircle(int circleMstrId) throws DAOException {
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		ArrayList<ZoneDTO> zoneList = new ArrayList<ZoneDTO>();
		ZoneDTO dto = null;
		try {
			con = DBConnection.getDBConnection();

				ps = con.prepareStatement(SQL_SELECT_CIRCLE_ZONE_MSTR);
				
			ps.setInt(1, circleMstrId);
			rs = ps.executeQuery();
			while(rs.next()) {
				dto = new ZoneDTO();
				dto.setZoneCode(rs.getString("ZONE_CODE"));
				dto.setZoneName(rs.getString("ZONE_NAME"));
				zoneList.add(dto);
			}
		} catch (Exception e) {
			throw new DAOException("Exception occured while getting getZoneListBasedOnCircle :  "+ e.getMessage(),e);
		} finally {
			try {
				//DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				throw new DAOException(e.getMessage(), e);
			}
		}
		return zoneList;
	}
	
	public ArrayList<CityDTO> getCityListBasedOnZone(String zoneCode) throws DAOException {
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		ArrayList<CityDTO> cityList = new ArrayList<CityDTO>();
		CityDTO dto = null;
		try {
			con = DBConnection.getDBConnection();

				ps = con.prepareStatement(SQL_SELECT_CITY_CODE_MSTR);
				
			ps.setString(1, zoneCode);
			rs = ps.executeQuery();
			while(rs.next()) {
				dto = new CityDTO();
				dto.setCityCode(rs.getString("CITY_CODE"));
				dto.setCityName(rs.getString("CITY_NAME"));
				cityList.add(dto);
			}
		} catch (Exception e) {
			throw new DAOException("Exception occured while getting getCityListBasedOnZone :  "+ e.getMessage(),e);
		} finally {
			try {
				//DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				throw new DAOException(e.getMessage(), e);
			}
		}
		return cityList;
	}
	
	public ArrayList<CityZoneDTO> getCityZoneListBasedOnCity(String cityCode) throws DAOException {
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		ArrayList<CityZoneDTO> cityZoneList = new ArrayList<CityZoneDTO>();
		CityZoneDTO dto = null;
		try {
			con = DBConnection.getDBConnection();
			ps = con.prepareStatement(SQL_SELECT_CITY_ZONE_CODE_MSTR);		
				
			ps.setString(1, cityCode);
			rs = ps.executeQuery();
			while(rs.next()) {
				dto = new CityZoneDTO();
				dto.setCityZoneCode(rs.getString("CITY_ZONE_CODE"));
				dto.setCityZoneName(rs.getString("CITY_ZONE_NAME"));
				cityZoneList.add(dto);
			}
		} catch (Exception e) {
			throw new DAOException("Exception occured while getting getCityZoneListBasedOnCity :  "+ e.getMessage(),e);
		} finally {
			try {
				//DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				throw new DAOException(e.getMessage(), e);
			}
		}
		return cityZoneList;
	}
	
	public ArrayList<PINCodeDTO> getPincodeListBasedOnCityCode(String cityZoneCode) throws DAOException {
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		ArrayList<PINCodeDTO> pincodeList = new ArrayList<PINCodeDTO>();
		PINCodeDTO dto = null;
		try {
			con = DBConnection.getDBConnection();

				ps = con.prepareStatement(SQL_SELECT_PINCODE_CITYZONE_MSTR);			
			ps.setString(1, cityZoneCode);
			rs = ps.executeQuery();
			while(rs.next()) {
				dto = new PINCodeDTO();
				dto.setPinCode(rs.getString("PINCODE"));
				pincodeList.add(dto);
			}
		} catch (Exception e) {
			throw new DAOException("Exception occured while getting getCityZoneListBasedOnCity :  "+ e.getMessage(),e);
		} finally {
			try {
				//DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				throw new DAOException(e.getMessage(), e);
			}
		}
		return pincodeList;
	}
	
	public ArrayList<RSUDTO> getRsuBasedOnCityCode(String cityZoneCode) throws DAOException {
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		ArrayList<RSUDTO> rsuList = new ArrayList<RSUDTO>();
		RSUDTO dto = null;
		try {
			con = DBConnection.getDBConnection();

			ps = con.prepareStatement(SQL_SELECT_RSU_CITYZONE_MSTR);			
			ps.setString(1, cityZoneCode);
			rs = ps.executeQuery();
			while(rs.next()) {
				dto = new RSUDTO();
				dto.setRsuId(rs.getString("RSU_ID"));
				dto.setRsuCode(rs.getString("RSU_CODE"));
				rsuList.add(dto);
			}
		} catch (Exception e) {
			throw new DAOException("Exception occured while getting getCityZoneListBasedOnCity :  "+ e.getMessage(),e);
		} finally {
			try {
				//DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				throw new DAOException(e.getMessage(), e);
			}
		}
		return rsuList;
	}
	
	public ArrayList<LOBDTO> getLobListBasedOnUser(ArrayList lobList) throws DAOException {
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		ArrayList<LOBDTO> returnLobList = new ArrayList<LOBDTO>();
		LOBDTO dto = null;
		int productLobId = 0;
		try {
			con = DBConnection.getDBConnection();

			Iterator itr=lobList.iterator();
			
			while(itr.hasNext())
			{
				productLobId=(Integer)itr.next();
				ps = con.prepareStatement(SQL_PRODUCT_LOB_NEW);
				ps.setInt(1, productLobId);
				rs = ps.executeQuery();
				
				if(rs.next()) {
					dto = new LOBDTO();
					dto.setLobId(rs.getInt("PRODUCT_LOB_ID"));
					dto.setLobName(rs.getString("PRODUCT_LOB"));
					returnLobList.add(dto);
				}

			}


		} catch (Exception e) {
			throw new DAOException("Exception occured while getting getLobListBasedOnUser :  "+ e.getMessage(),e);
		} finally {
			try {
				//DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				throw new DAOException(e.getMessage(), e);
			}
		}
		return returnLobList;
	}
	/* End of changes by Parnika */

	public boolean isValidBulkUserCircle_LOB(String circleListStr,
			int productLobId) throws DAOException {
	    Connection con = null;
	    PreparedStatement ps = null;
	    ResultSet rs = null;
	    boolean isValid = false;
	    logger.info("inside  isValidBulkUserCircle_LOB");
	    try {
	    		con = DBConnection.getDBConnection();
	    		String[] circleIds = circleListStr.split(",");
	    		for (int i = 0; i < circleIds.length; i++)
	    		{
	    			ps = con.prepareStatement("SELECT  * FROM CIRCLE_MSTR WHERE LOB_ID=? and CIRCLE_ID = ? AND CIRCLE_ID >= 0  ");
	    			ps.setInt(1, productLobId);
	    			ps.setInt(2, Integer.parseInt(circleIds[i].trim()));
	    			rs = ps.executeQuery();
	    			if (rs.next())
	    			{
	    				isValid = true;
	    				
	    			}
	    			else
	    			{
	    				isValid = false;
	    				
	    				return isValid;
	    			}	
	    		}
	    	}
	    catch (Exception e) {
			e.printStackTrace();
			throw new DAOException("Exception occured while isValidBulkUserCircle_LOB :  "+ e.getMessage(),e);
		} finally {
			try {
				//DBConnection.releaseResources(con,ps,rs);
			} catch (Exception e) {				
				throw new DAOException(e.getMessage(), e);
			}
		}
	    logger.info("isValidBulkUserCircle_LOB:::::" + isValid);
	    return isValid;

}

	public boolean isValidCityZoneCode(String cityzoneCode, int circleId,int productLobId) throws DAOException {Connection con = null;
			PreparedStatement ps = null;
			ResultSet rs = null;
			boolean isValid=false;
			
			try {
				// 
				con = DBConnection.getDBConnection();
				//select CL.CIRCLE_ID,LOB_ID from (select * from CIRCLE_MSTR whereCIRCLE_MSTR_ID= (select CIRCLE_MSTR_ID from ZONE_MSTR where zone_code= (select zone_code  from CITY_MSTR whereCITY_CODE= ( select CITY_CODE  from CITY_ZONE_MSTR where CITY_ZONE_CODE=?))) and circle_id=? ) as CL where lob_id=?  
				ps = con.prepareStatement("select CL.CIRCLE_ID,LOB_ID from (select * from CIRCLE_MSTR where CIRCLE_MSTR_ID= (select CIRCLE_MSTR_ID from ZONE_MSTR where zone_code= (select zone_code  from CITY_MSTR where CITY_CODE= ( select CITY_CODE  from CITY_ZONE_MSTR where CITY_ZONE_CODE=?))) and circle_id=? ) as CL where lob_id=?  ");
				ps.setString(1,cityzoneCode);
				ps.setInt(2,circleId);
				ps.setInt(3,productLobId);
				rs = ps.executeQuery();
				
				if(rs!=null)
				{
					isValid = true;
				}
			} catch (Exception e) {
				e.printStackTrace();
			} finally {
				try {
					//DBConnection.releaseResources(con, ps, rs);
				} catch (Exception e) {				
					e.printStackTrace();
				}
			}
			logger.info("isValidCityZoneCode::::"+isValid);
			return isValid;
			
}

	/* Added By Parnika for LMS Phase2 */
	
	public int getCircleIdValue(int circleMstrId) throws DAOException {
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		int circleId = -1;
		
		try {
			con = DBConnection.getDBConnection();
			ps = con.prepareStatement(SQL_GET_CIRCLE_ID);
			ps.setInt(1,circleMstrId);
			rs = ps.executeQuery();
			
			if(rs.next()) 
				circleId = rs.getInt("CIRCLE_ID");
			
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				//DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				e.printStackTrace();
			}
		}
		return circleId;
	}


	public boolean isValidUserZoneCode(String zoneCode, int circleId,
			int productLobId) throws DAOException {
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		boolean isValid=false;
		
		try {
			con = DBConnection.getDBConnection();
			ps = con.prepareStatement(SQL_VALIDATE_ZONE_CODE);
			ps.setString(1,zoneCode);
			ps.setInt(2, circleId);
			ps.setInt(3, productLobId);
			
			rs = ps.executeQuery();
			
			if(rs.next()) 
				isValid = true;
			
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				//DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				e.printStackTrace();
			}
		}
		return isValid;
	
		
	}


	public ArrayList<ProductLobDTO> getAssignProductLobList(ArrayList lobList) throws DAOException {
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		int productLobId=0;
		
		ArrayList<ProductLobDTO> productLobList = new ArrayList<ProductLobDTO>();
		ProductLobDTO dto = null;
	
	try {
		
			con = DBConnection.getDBConnection();
			
			Iterator itr=lobList.iterator();
			
			while(itr.hasNext())
			{
				productLobId=(Integer)itr.next();
				
			}
			ps = con.prepareStatement(SQL_PRODUCT_LOB_NEW);
			ps.setInt(1, productLobId);
			
			rs = ps.executeQuery();
			if(rs.next()){
				dto = new ProductLobDTO();
				dto.setProductLobID(rs.getInt("PRODUCT_LOB_ID"));
				dto.setProductLobName(rs.getString("PRODUCT_LOB"));
				productLobList.add(dto);
				
			}
			
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				//DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				e.printStackTrace();
			}
		}
		return productLobList;
		
	}


	public ArrayList<CircleDTO> getCircleListBasedOnLobNew(int lobId, String userLoginId) throws DAOException {
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		ArrayList<CircleDTO> circleList = new ArrayList<CircleDTO>();
		CircleDTO dto = null;
		try {
			con = DBConnection.getDBConnection();
			ps = con.prepareStatement(SQL_SELECT_CIRCLE_LOB_MSTR_NEW);
			ps.setInt(1, lobId);
			ps.setString(2, userLoginId);
			rs = ps.executeQuery();
			while(rs.next()) {
				dto = new CircleDTO();
				dto.setCircleMstrId(rs.getInt("CIRCLE_MSTR_ID"));
				dto.setCircleName(rs.getString("CIRCLE_NAME"));
				circleList.add(dto);
				//System.out.println("circleList"+circleList);
			}
		} catch (Exception e) {
			throw new DAOException("Exception occured while getting Circle list :  "+ e.getMessage(),e);
		} finally {
			try {
				//DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				throw new DAOException(e.getMessage(), e);
			}
		}
		return circleList;
	
	}
	
	//aaded by amarjeet for Channel wise MTD Report
	public ArrayList<UserMstr> getChannelPartnerBasedOnLobNew(int lobId, String circleId) throws DAOException {
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		ArrayList<UserMstr> partnerList = new ArrayList<UserMstr>();
		UserMstr dto = null;
		try {
			con = DBConnection.getDBConnection();
			ps = con.prepareStatement(SQL_SELECT_CHANNEL_PARTNER);
			ps.setInt(1, Constants.Channel_Partners_ID);
			ps.setInt(2, lobId);
			ps.setString(3, circleId);
			rs = ps.executeQuery();
			while(rs.next()) {
				dto = new UserMstr();
				if(!rs.getString("PARTNER_NAME").equalsIgnoreCase(null) && !rs.getString("PARTNER_NAME").equalsIgnoreCase("")){
					dto.setUserFname(rs.getString("USER_FNAME")+" "+rs.getString("USER_LNAME")+"( "+ rs.getString("USER_LOGIN_ID")+"-"+rs.getString("PARTNER_NAME")+" )");	
				}
				else{
					dto.setUserFname(rs.getString("USER_FNAME")+" "+rs.getString("USER_LNAME")+"( "+ rs.getString("USER_LOGIN_ID")+" )");
				}
				
				dto.setUserId(rs.getString("USER_LOGIN_ID"));
				//dto.setPartnerName(rs.getString("PARTNER_NAME"));
				partnerList.add(dto);
				//System.out.println("circleList"+circleList);
			}
		} catch (Exception e) {
			throw new DAOException("Exception occured while getting Circle list :  "+ e.getMessage(),e);
		} finally {
			try {
				//DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				throw new DAOException(e.getMessage(), e);
			}
		}
		System.out.println("partnerList ::->>"+partnerList);
		return partnerList;
	
	}
	//aaded by amarjeet for Channel wise MTD Report

	public boolean isValidCircleIdNew(int circleId,int productLobId, String userLoginId) throws DAOException {
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		boolean isValid=false;
		try {
			con = DBConnection.getDBConnection();
			ps = con.prepareStatement(SQL_SELECT_CIRCLE_ID_NEWONE);
			ps.setInt(1, circleId);
			ps.setInt(2,productLobId);
			ps.setString(3, userLoginId);
			rs = ps.executeQuery();
			if(rs.next()) 
				isValid = true;
			
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				//DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				e.printStackTrace();
			}
		}
		return isValid;
		
	}


	public boolean isValidCityZoneCodeNewOne(String cityzoneCode, int circleId, int productLobId) throws DAOException {
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		boolean isValid=false;
		String Query="SELECT CITY_ZONE_CODE FROM CITY_ZONE_MSTR where CITY_ZONE_CODE=? AND STATUS='A' and  CITY_CODE in (SELECT CITY_CODE FROM CITY_MSTR WHERE STATUS='A' and ZONE_CODE in (SELECT zone_code FROM ZONE_MSTR where STATUS='A' and  CIRCLE_MSTR_ID=( SELECT CIRCLE_MSTR_ID FROM CIRCLE_MSTR WHERE CIRCLE_ID=? and LOB_ID=? and STATUS='A' )))";
		try {
			con = DBConnection.getDBConnection();
			ps = con.prepareStatement(Query);
			ps.setString(1, cityzoneCode);
			ps.setInt(2,circleId);
			ps.setInt(3, productLobId);
			rs = ps.executeQuery();
			if(rs.next()) 
				isValid = true;
			
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				//DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				e.printStackTrace();
			}
		}
		return isValid;
		
	}
	/*public ArrayList<olmIdDTO> getolmId(String olmId) throws DAOException {
		// TODO Auto-generated method stub
		return null;
	}*/
	
	public String updateSubStatusDetails(int statusId,int subStatusId,int productLobId,String subStatusName,String subStatusDisplay) throws DAOException 
	{
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		String message="";
	
		
		try {
			con = DBConnection.getDBConnection();
			ps = con.prepareStatement(SQL_UPDATE_LEAD_SUB_STATUS);
			ps.setString(1,subStatusName);
			ps.setString(2,subStatusDisplay);
			ps.setInt(3,statusId);
			ps.setInt(4,subStatusId);
			ps.setInt(5,productLobId);
			ps.executeUpdate();
			message="1";
			
			} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				//DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				e.printStackTrace();
		}
		}
		return message;	
	}
	
	public String updateSubSubStatusDetails(int statusId,int subStatusId,int productLobId,String subSubStatusName,String subSubStatusDisplay,int subSubStatusId,int subStatusCode) throws DAOException 
	{
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		String message="";
		
		try {
			con= DBConnection.getDBConnection();
			ps = con.prepareStatement(SQL_UPDATE_LEAD_SUB_SUB_STATUS);
			ps.setString(1,subSubStatusName);
			ps.setString(2,subSubStatusDisplay);
			ps.setInt(3,subStatusId);
			ps.setInt(4,subSubStatusId);
			ps.setInt(5,subStatusCode);
			
			ps.executeUpdate();
			
				message="1";
			
			
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				//DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				e.printStackTrace();
			}
		}
		return message;
		
	}
	public ArrayList<UserDownloadDTO> getuserMasterDownloadData(int circleTableId, int productlobId, int selectActorId) throws DAOException {
		Connection con = null;
				
				PreparedStatement ps = null;
				ResultSet rs = null;
				
				ArrayList<UserDownloadDTO> userList= new ArrayList<UserDownloadDTO>();
				StringBuilder builder=new StringBuilder();
				UserDownloadDTO dto=null;
				String sql1= SQL_SELECT_USERDOWNLOADREPORT_NAME;
				String sql2=SQL_SELECT_USERDOWNLOADREPORT_NAME_CIRCLECOORDINATOR;
				String query = null;
				try{
					
						con = DBConnection.getDBConnection();
						
						if(circleTableId == -2 && productlobId != -2)
						{
							
							query= "SELECT U.USER_LOGIN_ID,UM.CIRCLE_ID,U.USER_FNAME,U.USER_MNAME,U.USER_LNAME,U.ROLE,U.USER_EMAILID,U.USER_MOBILE_NUMBER,U.PARTNER_NAME,U.CREATED_DT,U.CREATED_BY,U.UPDATED_DT,U.UPDATED_BY ,U.STATUS  from USER_MSTR U,USER_MAPPING UM where  UM.LOB_ID="+productlobId+" AND U.KM_ACTOR_ID="+selectActorId+" AND U.USER_LOGIN_ID=UM.USER_LOGIN_ID  ";
						}
						else if(productlobId == -2 && circleTableId == -2){
							query= "SELECT U.USER_LOGIN_ID,UM.CIRCLE_ID,U.USER_FNAME,U.USER_MNAME,U.USER_LNAME,U.ROLE,U.USER_EMAILID,U.USER_MOBILE_NUMBER,U.PARTNER_NAME,U.CREATED_DT,U.CREATED_BY,U.UPDATED_DT,U.UPDATED_BY ,U.STATUS  from USER_MSTR U,USER_MAPPING UM where U.KM_ACTOR_ID="+selectActorId+" AND U.USER_LOGIN_ID=UM.USER_LOGIN_ID  ";
							
						}
						else if(productlobId == -2 && circleTableId!= -2){
							query= "SELECT U.USER_LOGIN_ID,UM.CIRCLE_ID,U.USER_FNAME,U.USER_MNAME,U.USER_LNAME,U.ROLE,U.USER_EMAILID,U.USER_MOBILE_NUMBER,U.PARTNER_NAME,U.CREATED_DT,U.CREATED_BY,U.UPDATED_DT,U.UPDATED_BY ,U.STATUS  from USER_MSTR U,USER_MAPPING UM where  UM.CIRCLE_ID="+circleTableId+"  AND U.KM_ACTOR_ID="+selectActorId+" AND U.USER_LOGIN_ID=UM.USER_LOGIN_ID  ";
							
						}
						
						else
						{
						
							query= "SELECT U.USER_LOGIN_ID,UM.CIRCLE_ID,U.USER_FNAME,U.USER_MNAME,U.USER_LNAME,U.ROLE,U.USER_EMAILID,U.USER_MOBILE_NUMBER,U.PARTNER_NAME,U.CREATED_DT,U.CREATED_BY,U.UPDATED_DT,U.UPDATED_BY ,U.STATUS  from USER_MSTR U,USER_MAPPING UM where UM.CIRCLE_ID="+circleTableId+"   AND  UM.LOB_ID="+productlobId+" AND U.KM_ACTOR_ID="+selectActorId+" AND U.USER_LOGIN_ID=UM.USER_LOGIN_ID  ";
							
						}
						ps= con.prepareStatement(query);
						
						//ps.setInt(1,circleTableId);
						//ps.setInt(2,productlobId);
						//ps.setInt(3,selectActorId);
						
						rs=ps.executeQuery();
						
						while(rs.next())
						{
							dto = new UserDownloadDTO();
							
							dto.setUserLoginId(rs.getString("USER_LOGIN_ID"));
							
							if(selectActorId == Constants.KM_ACTOR_ID) 
							{
							//System.out.println("if loop");
							builder.append(rs.getString("CIRCLE_ID")+",");
							
							if(builder.length()>0)
							{
							 dto.setCircleId(builder.substring(0, builder.length()-1));
							 builder.delete(0,builder.length());
							}
							}
							else
							{
								//System.out.println("else loop");
							dto.setCircleId(rs.getString("CIRCLE_ID"));
							}
							
							dto.setUserFName(rs.getString("USER_FNAME"));
							dto.setUserMName(rs.getString("USER_MNAME"));
							dto.setUserLName(rs.getString("USER_LNAME"));
							dto.setUserRole(rs.getString("ROLE"));
							dto.setEmailId(rs.getString("USER_EMAILID"));
							dto.setMobileNo(rs.getString("USER_MOBILE_NUMBER"));
							dto.setPartner(rs.getString("PARTNER_NAME"));
							dto.setCreated(rs.getString("CREATED_DT"));
							dto.setCreatedBy(rs.getString("CREATED_BY"));
							dto.setUpdated(rs.getString("UPDATED_DT"));
							dto.setUpdatedBy(rs.getString("UPDATED_BY"));
							dto.setStatus(rs.getString("STATUS"));
							
							userList.add(dto);
								
						}
						
					}
						
						catch (Exception e) {
							e.printStackTrace();
							throw new DAOException("Exception occured while getUserDownloadReport :  "+ e.getMessage(),e);
						} finally {
							try {
								//DBConnection.releaseResources(con,ps,rs);
							} catch (Exception e) {				
								throw new DAOException(e.getMessage(), e);
							}
						}
						System.out.println("userList->>"+userList);
						return  userList;
			}
	public String getCircleIdValue(String productLobId , String circleName) throws DAOException {
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		String  circleId = null;
		
		try {
			con = DBConnection.getDBConnection();
			ps = con.prepareStatement(SQL_GET_CIRCLE_MASTER_ID);
			ps.setString(1,circleName);
			ps.setInt(2,Integer.parseInt(productLobId));
			rs = ps.executeQuery();
			
			if(rs.next()) 
				circleId = rs.getString("CIRCLE_MSTR_ID");
			
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				//DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				e.printStackTrace();
			}
		}
		return circleId;
	}
	public ArrayList<CircleDTO> getCircleListBasedOnLobNewUser(int productlobId, String userLoginId) throws DAOException {
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		ArrayList<CircleDTO> circleList = new ArrayList<CircleDTO>();
		CircleDTO dto = null;
		try {
			con = DBConnection.getDBConnection();
			ps = con.prepareStatement(SQL_SELECT_CIRCLE_LOB_MSTR_NEW_USER);
			ps.setInt(1, productlobId);
			ps.setString(2, userLoginId);
			rs = ps.executeQuery();
			while(rs.next()) {
				dto = new CircleDTO();
				dto.setCircleMstrId(rs.getInt("CIRCLE_ID"));
				dto.setCircleName(rs.getString("CIRCLE_NAME"));
				circleList.add(dto);
				//System.out.println("circleList"+circleList);
			}
		} catch (Exception e) {
			throw new DAOException("Exception occured while getting Circle list :  "+ e.getMessage(),e);
		} finally {
			try {
				//DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				throw new DAOException(e.getMessage(), e);
			}
		}
		return circleList;
	}
	
	//Bulk Pincode Method
	
public ArrayList<BulkPinCodeDTO> getAssignmentMatrixDataForPinCode(String pincode, int circleId, int productLobId) throws DAOException 
{

	
		Connection con = null;
		PreparedStatement ps = null;
		
		ResultSet rs = null;
		ArrayList<BulkPinCodeDTO> pincodeList= new ArrayList<BulkPinCodeDTO> ();
		BulkPinCodeDTO dto = null;		
		String query="SELECT pm.CITY_ZONE_CODE,czm.CITY_ZONE_NAME, czm.CITY_CODE,ctm.CITY_NAME,ctm.ZONE_CODE,zm.ZONE_NAME,zm.CIRCLE_MSTR_ID FROM CIRCLE_MSTR CM,ZONE_MSTR ZM,CITY_MSTR CTM ,CITY_ZONE_MSTR CZM,PINCODE_MSTR PM WHERE  PM.CITY_ZONE_CODE=czm.CITY_ZONE_CODE AND czm.CITY_CODE=ctm.CITY_CODE AND ctm.ZONE_CODE= zm.ZONE_CODE AND zm.CIRCLE_MSTR_ID= cm.CIRCLE_MSTR_ID and pm.PINCODE=? AND cm.CIRCLE_ID=? AND cm.LOB_ID=? AND pm.STATUS='A'  ";
			
		try {
				con = DBConnection.getDBConnection();
				ps = con.prepareStatement(query);
				ps.setString(1, pincode);
				ps.setInt(2, circleId);
				ps.setInt(3, productLobId);
				rs=ps.executeQuery();
	    			if(rs.next())
	    			{ 
	    				dto=new BulkPinCodeDTO();
	    				dto.setCityZoneCode(rs.getString("CITY_ZONE_CODE"));
	    				dto.setCityCode(rs.getString("CITY_CODE"));
	    				dto.setZonecode(rs.getString("ZONE_CODE"));
	    				pincodeList.add(dto);
	    			}
	    			} 
	    	
	catch (Exception e) {
			e.printStackTrace();
			throw new DAOException("Exception occured while getting gData for pincode : "+pincode+" :Exception"+ e.getMessage(),e);
		}
	finally {
			try {
				//DBConnection.releaseResources(con, ps, rs);
				
			} catch (Exception e) {				
				throw new DAOException(e.getMessage(), e);
			}
		}
		return pincodeList;
		}


//Bulk Rsu Method

public ArrayList<BulkRsuDTO> getAssignmentMatrixDataForRsuCode(String rsu, int circleId, int productLobId) throws DAOException {

		
		Connection con = null;
		PreparedStatement ps = null;
		
		ResultSet rs = null;
		ArrayList<BulkRsuDTO> rsuList= new ArrayList<BulkRsuDTO> ();
		BulkRsuDTO dto = null;
		String query="SELECT RM.CITY_ZONE_CODE,czm.CITY_ZONE_NAME, czm.CITY_CODE,ctm.CITY_NAME,ctm.ZONE_CODE,zm.ZONE_NAME,zm.CIRCLE_MSTR_ID FROM CIRCLE_MSTR CM,ZONE_MSTR ZM,CITY_MSTR CTM ,CITY_ZONE_MSTR CZM,RSU_MSTR RM WHERE  RM.CITY_ZONE_CODE=czm.CITY_ZONE_CODE AND czm.CITY_CODE=ctm.CITY_CODE AND ctm.ZONE_CODE= zm.ZONE_CODE AND zm.CIRCLE_MSTR_ID= cm.CIRCLE_MSTR_ID and RM.RSU_CODE=? AND cm.CIRCLE_ID=? AND cm.LOB_ID=? AND RM.STATUS='A'  ";
		try {
				con = DBConnection.getDBConnection();
				ps = con.prepareStatement(query);
				ps.setString(1, rsu);
				ps.setInt(2, circleId);
				ps.setInt(3, productLobId);
				rs=ps.executeQuery();
	    			if(rs.next())
	    			{ 
	    				dto=new BulkRsuDTO();
	    				
	    				dto.setCityZoneCode(rs.getString("CITY_ZONE_CODE"));
	    				dto.setCityCode(rs.getString("CITY_CODE"));
	    				dto.setZonecode(rs.getString("ZONE_CODE"));
	    				rsuList.add(dto);
	    			}
	    			} 
	    	
	catch (Exception e) {
			e.printStackTrace();
			throw new DAOException("Exception occured while getting gData for pincode : "+rsu+" :Exception"+ e.getMessage(),e);
		}
	finally {
			try {
				//DBConnection.releaseResources(con, ps, rs);
				
			} catch (Exception e) {				
				throw new DAOException(e.getMessage(), e);
			}
		}
		return rsuList;
}

//Bulk City Zone Code Method 

public ArrayList<BulkCityZoneCodeCTO> getAssignmentMatrixDataForCityZoneCode(String cityZoneCode, int circleId, int productLobId) throws DAOException {
	
	
	
	Connection con = null;
	PreparedStatement ps = null;
	
	ResultSet rs = null;
	ArrayList<BulkCityZoneCodeCTO> cityZoneCodeList= new ArrayList<BulkCityZoneCodeCTO> ();
	BulkCityZoneCodeCTO dto = null;
	
	
	String query="SELECT  CZM.CITY_CODE, CM.ZONE_CODE FROM CITY_ZONE_MSTR CZM, CITY_MSTR CM, ZONE_MSTR ZM , CIRCLE_MSTR CIM WHERE ucase(CZM.CITY_ZONE_CODE)=? AND CZM.CITY_CODE = CM.CITY_CODE AND CM.ZONE_CODE = ZM.ZONE_CODE AND ZM.CIRCLE_MSTR_ID = CIM.CIRCLE_MSTR_ID AND CIM.CIRCLE_ID =? AND CIM.LOB_ID =?    ";
		

		//"SELECT RM.CITY_ZONE_CODE,czm.CITY_ZONE_NAME, czm.CITY_CODE,ctm.CITY_NAME,ctm.ZONE_CODE,zm.ZONE_NAME,zm.CIRCLE_MSTR_ID FROM CIRCLE_MSTR CM,ZONE_MSTR ZM,CITY_MSTR CTM ,CITY_ZONE_MSTR CZM,RSU_MSTR RM WHERE  RM.CITY_ZONE_CODE=czm.CITY_ZONE_CODE AND czm.CITY_CODE=ctm.CITY_CODE AND ctm.ZONE_CODE= zm.ZONE_CODE AND zm.CIRCLE_MSTR_ID= cm.CIRCLE_MSTR_ID and RM.RSU_CODE=? AND cm.CIRCLE_ID=? AND cm.LOB_ID=? AND RM.STATUS='A'  ";

		//"SELECT pm.CITY_ZONE_CODE,czm.CITY_ZONE_NAME, czm.CITY_CODE,ctm.CITY_NAME,ctm.ZONE_CODE,zm.ZONE_NAME,zm.CIRCLE_MSTR_ID FROM CIRCLE_MSTR CM,ZONE_MSTR ZM,CITY_MSTR CTM ,CITY_ZONE_MSTR CZM,PINCODE_MSTR PM WHERE  PM.CITY_ZONE_CODE=czm.CITY_ZONE_CODE AND czm.CITY_CODE=ctm.CITY_CODE AND ctm.ZONE_CODE= zm.ZONE_CODE AND zm.CIRCLE_MSTR_ID= cm.CIRCLE_MSTR_ID and pm.PINCODE=? AND cm.CIRCLE_ID=? AND cm.LOB_ID=? AND pm.STATUS='A'  ";
		
	try {
			con = DBConnection.getDBConnection();
			ps = con.prepareStatement(query);
			ps.setString(1, cityZoneCode);
			ps.setInt(2, circleId);
			ps.setInt(3, productLobId);
			
		
			rs=ps.executeQuery();
    			if(rs.next())
    			{ 
    				dto=new BulkCityZoneCodeCTO();
    				dto.setCityCode(rs.getString("CITY_CODE"));
    				dto.setZonecode(rs.getString("ZONE_CODE"));
    				cityZoneCodeList.add(dto);
    			}
    			} 
    	
catch (Exception e) {
		e.printStackTrace();
		throw new DAOException("Exception occured while getting gData for pincode : "+cityZoneCode+" :Exception"+ e.getMessage(),e);
	}
finally {
		try {
			//DBConnection.releaseResources(con, ps, rs);
			
		} catch (Exception e) {				
			throw new DAOException(e.getMessage(), e);
		}
	}
	return cityZoneCodeList;
}

//bulk city code method 

public ArrayList<BulkCityDTO> getAssignmentMatrixDataForCityCode(String city, int circleId, int productLobId) throws DAOException {

	
	Connection con = null;
	PreparedStatement ps = null;
	
	ResultSet rs = null;
	ArrayList<BulkCityDTO> cityList= new ArrayList<BulkCityDTO> ();
	BulkCityDTO dto = null;
	
	
	
	//String query="select ZONE_CODE from CITY_MSTR WHERE CITY_CODE = ? AND STATUS='A'  ";
	
	String query="SELECT CM.ZONE_CODE FROM  CITY_MSTR CM, ZONE_MSTR ZM,CIRCLE_MSTR CIM  WHERE  CM.ZONE_CODE = ZM.ZONE_CODE AND CM.CITY_CODE=? AND CM.STATUS='A' AND   ZM.CIRCLE_MSTR_ID = CIM.CIRCLE_MSTR_ID AND  CIM.CIRCLE_ID = ? AND CIM.LOB_ID =?   ";
	
	try {
			con = DBConnection.getDBConnection();
			ps = con.prepareStatement(query);
			ps.setString(1, city);
			ps.setInt(2, circleId);
			ps.setInt(3, productLobId);
			
			rs=ps.executeQuery();
    			if(rs.next())
    			{ 
    				dto=new BulkCityDTO();
    				
    				dto.setZonecode(rs.getString("ZONE_CODE"));
    				cityList.add(dto);
    			}
    			} 
    	
catch (Exception e) {
		e.printStackTrace();
		throw new DAOException("Exception occured while getting gData for pincode : "+city+" :Exception"+ e.getMessage(),e);
	}
finally {
		try {
			//DBConnection.releaseResources(con, ps, rs);
			
		} catch (Exception e) {				
			throw new DAOException(e.getMessage(), e);
		}
	}
	return cityList;
}
public ArrayList getZoneListBasedOnCircleNew(int circleMstrId) throws DAOException {
	Connection con = null;
	PreparedStatement ps = null;
	ResultSet rs = null;
	ArrayList<ZoneDTO> zoneList = new ArrayList<ZoneDTO>();
	ZoneDTO dto = null;
	try {
		con = DBConnection.getDBConnection();

			ps = con.prepareStatement(SQL_SELECT_CIRCLE_ZONE_MSTR_NEW);
			
		ps.setInt(1, circleMstrId);
		rs = ps.executeQuery();
		while(rs.next()) {
			dto = new ZoneDTO();
			dto.setZoneCode(rs.getString("ZONE_CODE"));
			dto.setZoneName(rs.getString("ZONE_NAME"));
			zoneList.add(dto);
		}
	} catch (Exception e) {
		throw new DAOException("Exception occured while getting getZoneListBasedOnCircle :  "+ e.getMessage(),e);
	} finally {
		try {
			//DBConnection.releaseResources(con, ps, rs);
		} catch (Exception e) {				
			throw new DAOException(e.getMessage(), e);
		}
	}
	return zoneList;
}
public ArrayList getElementsAsJsonCityNew(int circleMstrId) throws DAOException {
	Connection con = null;
	PreparedStatement ps = null;
	ResultSet rs = null;
	ArrayList<CityDTO> cityList = new ArrayList<CityDTO>();
	CityDTO dto = null;
	try {
		con = DBConnection.getDBConnection();

			ps = con.prepareStatement(SQL_SELECT_CIRCLE_CITY_MSTR_NEW);
			
		ps.setInt(1, circleMstrId);
		rs = ps.executeQuery();
		while(rs.next()) {
			dto = new CityDTO();
			dto.setCityCode(rs.getString("CITY_CODE"));
			dto.setCityName(rs.getString("CITY_NAME"));
			cityList.add(dto);
		}
	} catch (Exception e) {
		throw new DAOException("Exception occured while getting getZoneListBasedOnCircle :  "+ e.getMessage(),e);
	} finally {
		try {
			//DBConnection.releaseResources(con, ps, rs);
		} catch (Exception e) {				
			throw new DAOException(e.getMessage(), e);
		}
	}
	return cityList;
}
public ArrayList getElementsAsJsonCityZoneNew(int circleMstrId) throws DAOException {
	Connection con = null;
	PreparedStatement ps = null;
	ResultSet rs = null;
	ArrayList<CityZoneDTO> cityZoneList = new ArrayList<CityZoneDTO>();
	CityZoneDTO dto = null;
	try {
		con = DBConnection.getDBConnection();

			ps = con.prepareStatement(SQL_SELECT_CIRCLE_CITYZONE__MSTR_NEW);
			
		ps.setInt(1, circleMstrId);
		rs = ps.executeQuery();
		while(rs.next()) {
			dto = new CityZoneDTO();
			dto.setCityZoneCode(rs.getString("CITY_ZONE_CODE"));
			dto.setCityZoneName(rs.getString("CITY_ZONE_NAME"));
			cityZoneList.add(dto);
		}
	} catch (Exception e) {
		throw new DAOException("Exception occured while getting getZoneListBasedOnCircle :  "+ e.getMessage(),e);
	} finally {
		try {
			//DBConnection.releaseResources(con, ps, rs);
		} catch (Exception e) {				
			throw new DAOException(e.getMessage(), e);
		}
	}
	return cityZoneList;
}
public ArrayList getCityZoneListBasedOnZone(String zoneCode) throws DAOException {
	Connection con = null;
	PreparedStatement ps = null;
	ResultSet rs = null;
	ArrayList<CityZoneDTO> cityZoneList = new ArrayList<CityZoneDTO>();
	CityZoneDTO dto = null;
	try {
		con = DBConnection.getDBConnection();

			ps = con.prepareStatement(SQL_SELECT_CIRCLE_CITYZONE_NEW);
			
		ps.setString(1, zoneCode);
		rs = ps.executeQuery();
		while(rs.next()) {
			dto = new CityZoneDTO();
			dto.setCityZoneCode(rs.getString("CITY_ZONE_CODE"));
			dto.setCityZoneName(rs.getString("CITY_ZONE_NAME"));
			cityZoneList.add(dto);
		}
	} catch (Exception e) {
		throw new DAOException("Exception occured while getting getZoneListBasedOnCircle :  "+ e.getMessage(),e);
	} finally {
		try {
			//DBConnection.releaseResources(con, ps, rs);
		} catch (Exception e) {				
			throw new DAOException(e.getMessage(), e);
		}
	}
	return cityZoneList;
}

public ArrayList<CircleDTO> getCircleForLob(int productLobId) throws DAOException {
	Connection con = null;
	PreparedStatement ps = null;
	ResultSet rs = null;
	ArrayList<CircleDTO> circleList = new ArrayList<CircleDTO>();
	CircleDTO dto = null;
	try {
		con = DBConnection.getDBConnection();
		ps = con.prepareStatement(SQL_SELECT_CIRCLE_FOR_PRODUCT);
		ps.setInt(1, productLobId);
		rs = ps.executeQuery();
		while(rs.next()) {
			dto = new CircleDTO();
			dto.setCircleId(rs.getInt("CIRCLE_ID"));
			dto.setCircleMstrId(rs.getInt("CIRCLE_MSTR_ID"));
			dto.setLobId(rs.getInt("LOB_ID"));
			dto.setCircleName(rs.getString("CIRCLE_NAME"));
			dto.setCircleDescription(rs.getString("CIRCLE_DESC"));
			//dto.setCircleIdLobIdCircleMstrId(dto.getCircleId()+"#"+dto.getLobId()+"#"+dto.getCircleMstrId());
			circleList.add(dto);
		}
	} catch (Exception e) {
		e.printStackTrace();
		throw new DAOException("Exception occured while getting circle list for productLob "+productLobId+" :" + e.getMessage(),e);
	} finally {
		try {
			//DBConnection.releaseResources(con, ps, rs);
		} catch (Exception e) {				
			throw new DAOException(e.getMessage(), e);
		}
	}
	return circleList;
}




public int getLobId(String lobName) throws DAOException {
	Connection con = null;
	PreparedStatement ps = null;
	ResultSet rs = null;
	int lobId= 0;
	//ArrayList<CircleDTO> circleList = new ArrayList<CircleDTO>();
	LOBDTO dto = null;
	try {
		con = DBConnection.getDBConnection();
		ps = con.prepareStatement(SQL_SELECT_LOB_ID);
		ps.setString(1, lobName);
		rs = ps.executeQuery();
		while(rs.next()) {
			lobId = rs.getInt("PRODUCT_LOB_ID");
		}
	} catch (Exception e) {
		e.printStackTrace();
		throw new DAOException("Exception occured while getting getLobId for lobName "+lobId+" :" + e.getMessage(),e);
	} finally {
		try {
			//DBConnection.releaseResources(con, ps, rs);
		} catch (Exception e) {				
			throw new DAOException(e.getMessage(), e);
		}
	}
	return lobId;
}
/* Added by Parnika */
public  boolean isValidRsuInCircle(String rsuCode,String leadId) throws DAOException
{
	Connection con = null;
	PreparedStatement ps = null;
	ResultSet rs = null;
	PreparedStatement ps1 = null;
	ResultSet rs1 = null;
	boolean isValid=false;
	int lobId = -3;
	int circleId = -3;
	
	logger.error("Inside  isValidRsuInCircle :  for" + rsuCode + "and Lead Id" + leadId);
	
	try {
		con = DBConnection.getDBConnection();
		ps = con.prepareStatement(SQL_GET_DETAILS_FROM_LEAD);
		ps.setString(1,leadId);
		rs = ps.executeQuery();
		
		if(rs.next()) 
		{
			lobId = rs.getInt("PRODUCT_LOB_ID");
			circleId = rs.getInt("CIRCLE_ID");
		}
		
		ps1 = con.prepareStatement(SQL_SELECT_RSU_IN_CIRCLE);
		ps1.setInt(1, circleId);
		ps1.setInt(2, lobId);
		ps1.setString(3, rsuCode);
		rs1= ps1.executeQuery();
		
		if(rs1.next()){
			isValid = true;
		}
		
	} catch (Exception e) {
		e.printStackTrace();
		logger.error("Exception occured in isValidRsuInCircle :  "+ e.getMessage(),e);
	} finally {
		try {
			//DBConnection.releaseResources(con, ps, rs);
		} catch (Exception e) {				
			e.printStackTrace();
		}
	}
	return isValid;
}


//added by Nancy
public ArrayList getLeadSubStatusList1(String leadStatusId,int lobId) throws DAOException {
	Connection con = null;
	PreparedStatement ps = null;
	ResultSet rs = null;
	
	ArrayList<LeadStatusDTO> leadSubStatusList = new ArrayList<LeadStatusDTO>();
	LeadStatusDTO dto = null;
	
	
	try {
		con = DBConnection.getDBConnection();
		ps = con.prepareStatement(SQL_SELECT_LEAD_SUB_STATUS_LIST1);
	
		ps.setInt(1, Integer.parseInt(leadStatusId));
		
		ps.setInt(2, lobId);
		rs = ps.executeQuery();
		while(rs.next()) {
			
			dto=new LeadStatusDTO();
			dto.setLeadSubStatus(rs.getString("SUB_SUB_STATUS"));
			dto.setLeadSubSubStatusId(rs.getInt("SUB_SUB_STATUS_ID"));
			leadSubStatusList.add(dto);
			
		}
	} catch (Exception e) {
		e.printStackTrace();
		throw new DAOException("Exception occured while getting getLobId for lobName "+ e.getMessage(),e);
	} finally {
		try {
			//DBConnection.releaseResources(con, ps, rs);
		} catch (Exception e) {				
			throw new DAOException(e.getMessage(), e);
		}
	}
	return leadSubStatusList;

}
public ArrayList<ProductDTO> getMobilityProductListNew() throws DAOException {

	Connection con = null;
	PreparedStatement ps = null;
	ResultSet rs = null;
	ArrayList<ProductDTO> mobilityProductListNew = new ArrayList<ProductDTO>();
	ProductDTO dto = null;
	try {
		con = DBConnection.getDBConnection();
		ps = con.prepareStatement(SQL_SELECT_MOBILITY_PRODUCT_NEW);
		rs = ps.executeQuery();
		while(rs.next()) {
			dto = new ProductDTO();
			dto.setProductId(rs.getInt("PRODUCT_ID"));
			dto.setProductLobId(rs.getInt("PRODUCT_LOB_ID"));
			dto.setProductName(rs.getString("PRODUCT_NAME"));
			dto.setProductLobName(rs.getString("PRODUCT_LOB"));
			mobilityProductListNew.add(dto);
		}
	} catch (Exception e) {
		throw new DAOException("Exception occured while getting Telemedia Product list :  "+ e.getMessage(),e);
	} finally {
		try {
			////DBConnection.releaseResources(con, ps, rs);
		} catch (Exception e) {				
			throw new DAOException(e.getMessage(), e);
		}
	}
	return mobilityProductListNew;

}
public ArrayList<ProductDTO> getOtherProductsList() throws DAOException {

	Connection con = null;
	PreparedStatement ps = null;
	ResultSet rs = null;
	ArrayList<ProductDTO> otherProductsList = new ArrayList<ProductDTO>();
	ProductDTO dto = null;
	try {
		con = DBConnection.getDBConnection();
		ps = con.prepareStatement(SQL_SELECT_OTHERS_PRODUCT);
		rs = ps.executeQuery();
		while(rs.next()) {
			dto = new ProductDTO();
			dto.setProductId(rs.getInt("PRODUCT_ID"));
			dto.setProductLobId(rs.getInt("PRODUCT_LOB_ID"));
			dto.setProductName(rs.getString("PRODUCT_NAME"));
			dto.setProductLobName(rs.getString("PRODUCT_LOB"));
			
			otherProductsList.add(dto);
		}
	} catch (Exception e) {
		throw new DAOException("Exception occured while getting Telemedia Product list :  "+ e.getMessage(),e);
	} finally {
		try {
			////DBConnection.releaseResources(con, ps, rs);
		} catch (Exception e) {				
			throw new DAOException(e.getMessage(), e);
		}
	}
	return otherProductsList;

}

/* End of changes by parnika */
/*added by amarjeet for report*/
public  ArrayList<UserMstr> getLogedInUserDetails(String userLoginId , int lobId) throws DAOException
{
	Connection con = null;
	PreparedStatement ps = null;
	ResultSet rs = null;
	ArrayList<UserMstr> userDetailList = new ArrayList<UserMstr>();
	UserMstr dto = null;
	try {
		con = DBConnection.getDBConnection();
		StringBuffer query = new StringBuffer(SQL_SELECT_USER_DETAILS);
		if (lobId !=0 ) {
			
			query.append("and UM.LOB_ID = ?   ");
			
			}
		else{
			
			query.append(" ");
		}
		ps = con.prepareStatement(query.toString());
		
		if (lobId !=0 ) {
			
			ps.setString(1, userLoginId);
			ps.setInt(2, lobId);
			
			}
		else{
			
			ps.setString(1, userLoginId);
		}
				
		rs = ps.executeQuery();
		while(rs.next()) {
			dto = new UserMstr();				
			dto.setCircleId(rs.getString("CIRCLE_MSTR_ID"));	
			dto.setLobId(rs.getString("LOB_ID"));
			dto.setZoneFlag(rs.getString("ZONE_FLAG"));
			if(rs.getString("ZONE_FLAG")!=null){
			if(rs.getString("ZONE_FLAG").equalsIgnoreCase(Constants.ZONE_CODE_FLAG_VALUE))
			{
				dto.setZoneCode(rs.getString("ZONE_CODE"));
			}
			else if (rs.getString("ZONE_FLAG").equalsIgnoreCase(Constants.CITY_ZONE_CODE_FLAG_VALUE)){
				
				dto.setZoneCode(rs.getString("CITY_ZONE_CODE"));
			}
			}
			userDetailList.add(dto);
		}
		
	} catch (Exception e) {
		e.printStackTrace();
		throw new DAOException("Exception occured while getting circle list :  "+ e.getMessage(),e);
	} finally {
		try {
			//DBConnection.releaseResources(con, ps, rs);
		} catch (Exception e) {				
			throw new DAOException(e.getMessage(), e);
		}
	}
	return userDetailList;
}

public  int getZoneId(String zoneCode) throws DAOException
{
	Connection con = null;
	PreparedStatement ps = null;
	ResultSet rs = null;
	int zoneID =0;
	try {
		con = DBConnection.getDBConnection();
		ps = con.prepareStatement(SQL_ZONE_ID);
		ps.setString(1, zoneCode);		
		rs = ps.executeQuery();
		while(rs.next()) {
			zoneID = rs.getInt("ZONE_ID");
		}
		
	} catch (Exception e) {
		throw new DAOException("Exception occured while getting circle list :  "+ e.getMessage(),e);
	} finally {
		try {
			//DBConnection.releaseResources(con, ps, rs);
		} catch (Exception e) {				
			throw new DAOException(e.getMessage(), e);
		}
	}
	return zoneID;
}
public  int getCityZoneId(String cityZoneCode) throws DAOException
{
	Connection con = null;
	PreparedStatement ps = null;
	ResultSet rs = null;
	int zoneID =0;
	try {
		con = DBConnection.getDBConnection();
		ps = con.prepareStatement(SQL_CITY_ZONE_ID);
		ps.setString(1, cityZoneCode);		
		rs = ps.executeQuery();
		while(rs.next()) {
			zoneID = rs.getInt("CITY_ZONE_ID");
		}
		
	} catch (Exception e) {
		throw new DAOException("Exception occured while getting circle list :  "+ e.getMessage(),e);
	} finally {
		try {
			//DBConnection.releaseResources(con, ps, rs);
		} catch (Exception e) {				
			throw new DAOException(e.getMessage(), e);
		}
	}
	return zoneID;
}

public  String  getCityZoneCode(String zoneId , String zoneFlag) throws DAOException
{
	Connection con = null;
	PreparedStatement ps = null;
	ResultSet rs = null;
	String zoneCode =null;
	try {
		con = DBConnection.getDBConnection(); 
		if (zoneFlag.equalsIgnoreCase(Constants.CITY_ZONE_CODE_FLAG_VALUE)){
			ps = con.prepareStatement(SQL_CITY_ZONE_CODE);
			ps.setString(1, zoneId);	
		}
		if (zoneFlag.equalsIgnoreCase(Constants.ZONE_CODE_FLAG_VALUE)){
			ps = con.prepareStatement(SQL_ZONE_CODE);
			ps.setString(1, zoneId);	
		}
		
		rs = ps.executeQuery();
		while(rs.next()) {
			if (zoneFlag.equalsIgnoreCase(Constants.CITY_ZONE_CODE_FLAG_VALUE)){
				zoneCode = rs.getString("CITY_ZONE_CODE");
			}
			if (zoneFlag.equalsIgnoreCase(Constants.ZONE_CODE_FLAG_VALUE)){
				zoneCode = rs.getString("ZONE_CODE");	
			}
		
		}
		
	} catch (Exception e) {
		throw new DAOException("Exception occured while getting circle list :  "+ e.getMessage(),e);
	} finally {
		try {
			//DBConnection.releaseResources(con, ps, rs);
		} catch (Exception e) {				
			throw new DAOException(e.getMessage(), e);
		}
	}
	return zoneCode;
}

//Added By Bhaskar Campaign validation

public boolean isvalidCampaignField(String campaign) throws DAOException {

	Connection con = null;
	PreparedStatement ps = null;
	ResultSet rs = null;
	boolean isValid=false;
	
	try {
		con = DBConnection.getDBConnection();
		ps = con.prepareStatement(SQL_VALIDATE_CAMPAIGN_FIELD);
		ps.setString(1,campaign);
		rs = ps.executeQuery();
		
		if(rs.next()) 
			isValid = true;
		
	} catch (Exception e) {
		e.printStackTrace();
	} finally {
		try {
			//DBConnection.releaseResources(con, ps, rs);
		} catch (Exception e) {				
			e.printStackTrace();
		}
	}
	return isValid;

}
//added by amarjeet to make parameterized days and sms
public String getParameterName(String formName) throws DAOException {  
	Connection con = null;
	PreparedStatement ps = null;
	ResultSet rs = null;
	String parameter="";
	
	try {
		con = DBConnection.getDBConnection();
		ps = con.prepareStatement(SQL_SELECT_PARAMETER);
		ps.setString(1, formName);
		rs = ps.executeQuery();
		if(rs.next()) {
			parameter=rs.getString("PARAM_NAME");
			
		}
	} catch (Exception e) {
		e.printStackTrace();
		throw new DAOException("Exception occured while getting parameter : "+formName+" :Exception"+ e.getMessage(),e);
	} finally {
		try {
			////DBConnection.releaseResources(con, ps, rs);
		} catch (Exception e) {				
			throw new DAOException(e.getMessage(), e);
		}
	}
	return parameter;
}

		/* Added by Parnika */
		
		public  ArrayList<LeadStatusDTO> getLeadStatusListMTD() throws DAOException
		{
			Connection con = null;
			PreparedStatement ps = null;
			ResultSet rs = null;
			ArrayList<LeadStatusDTO> leadStatusList = new ArrayList<LeadStatusDTO>();
			LeadStatusDTO dto = null;
			try {
				con = DBConnection.getDBConnection();
				ps = con.prepareStatement(SQL_SELECT_LEAD_STATUS_MTD);
				rs = ps.executeQuery();
				while(rs.next()) {
					dto = new LeadStatusDTO();
					dto.setLeadStatusId(rs.getInt("LEAD_STATUS_ID"));
					dto.setLeadStatus(rs.getString("LEAD_STATUS"));
					dto.setLeadStatusName(rs.getString("LEAD_STATUS_NAME"));
					dto.setLeadStatusDisplay(rs.getString("LEAD_STATUS"));
					leadStatusList.add(dto);
				}
			} catch (Exception e) {
				e.printStackTrace();
				throw new DAOException("Exception occured while getting Lead Status list :  "+ e.getMessage(),e);
			} finally {
				try {
					//DBConnection.releaseResources(con, ps, rs);
				} catch (Exception e) {				
					throw new DAOException(e.getMessage(), e);
				}
			}
			return leadStatusList;
		}
		
		public  ArrayList<ReportsDTO> getReportListAdmin() throws DAOException
		{
			Connection con = null;
			PreparedStatement ps = null;
			ResultSet rs = null;
			ArrayList<ReportsDTO> reportList = new ArrayList<ReportsDTO>();
			ReportsDTO dto = null;
			try {
				con = DBConnection.getDBConnection();
				ps = con.prepareStatement(SQL_SELECT_REPORT_TYPE_ADMIN);
				rs = ps.executeQuery();
				while(rs.next()) {
					dto = new ReportsDTO();
					dto.setReportId(rs.getInt("REPORT_ID"));
					dto.setReportName(rs.getString("REPORT_NAME"));
					reportList.add(dto);
				}
			} catch (Exception e) {
				throw new DAOException("Exception occured while getting getReportListAdmin :  "+ e.getMessage(),e);
			} finally {
				try {
					//DBConnection.releaseResources(con, ps, rs);
				} catch (Exception e) {				
					throw new DAOException(e.getMessage(), e);
				}
			}
			return reportList;
		}


/* End of changes By Parnika */
		
		public ArrayList<ProductDTO> getProductListByLob(int productId,	int productLobId) throws DAOException {
			
			Connection con = null;
			PreparedStatement ps = null;
			ResultSet rs = null;
			ArrayList<ProductDTO> productList = new ArrayList<ProductDTO>();
			ProductDTO dto = null;
			StringBuilder builder=new StringBuilder(SQL_SELECT_PRODUCT);
			try {
			
				//if(productLobId > 0 && productId >0 && productLobId !=Integer.parseInt(Constants.MOBILITY_LOB) && productLobId !=Constants.TELIMEDIA_LOB )
				//{
				//	builder.append( " AND PRODUCT_ID != ? AND PRODUCT_LOB_ID NOT IN("+Constants.MOBILITY_LOB+","+Constants.TELIMEDIA_LOB+") " );
				 if(productLobId > 0 && productId >0 ) {
					builder.append( " AND PRODUCT_ID != ? AND PRODUCT_LOB_ID =? " );
				}
				else if(productId >0) {
					builder.append( " AND PRODUCT_ID = ?" );
				}
				builder.append("   ");
				con = DBConnection.getDBConnection();
				ps = con.prepareStatement(builder.toString());
				if(productId >0 )
				{
					ps.setInt(1, productId);
				}
				if(productLobId > 0 ) {
					ps.setInt(2, productLobId);
				}
				rs = ps.executeQuery();
				while(rs.next()) {
					dto = new ProductDTO();
					dto.setProductId(rs.getInt("PRODUCT_ID"));
					//dto.setProductLobId(rs.getInt("PRODUCT_LOB_ID"));
					dto.setProductName(rs.getString("PRODUCT_NAME"));
					productList.add(dto);
				}
			} catch (Exception e) {
				throw new DAOException("Exception occured while getting Telemedia Product list :  "+ e.getMessage(),e);
			} finally {
				try {
					////DBConnection.releaseResources(con, ps, rs);
				} catch (Exception e) {				
					throw new DAOException(e.getMessage(), e);
				}
			}
			return productList;
		}
	
		//Added by bhaskar
		
		public String getProductLobName(int productLobId) throws DAOException {Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		String productLobName="";
		
		try {
			con = DBConnection.getDBConnection();
		
			ps = con.prepareStatement(SQL_SELECT_PRODUCTLOBNAME);
			
			ps.setInt(1, productLobId);
			rs = ps.executeQuery();
			if(rs.next()) {
				
				productLobName=rs.getString("PRODUCT_LOB");
				
			}
		} catch (Exception e) {
			e.printStackTrace();
			throw new DAOException("Exception occured while getting parameter : "+productLobName+" :Exception"+ e.getMessage(),e);
		} finally {
			try {
				//DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				throw new DAOException(e.getMessage(), e);
			}
		}
		return productLobName;
		
		}
		
		
		public boolean isValidProductLobForRsuCode(int prodid)
				throws DAOException {
			Connection con = null;
			PreparedStatement ps = null;
			ResultSet rs = null;
			boolean isValid=false;
			
			try {
				con = DBConnection.getDBConnection();
				ps = con.prepareStatement(SQL_VALIDATE_PRODUCT_LOB_ID_RSU);
				ps.setInt(1,prodid);
				rs = ps.executeQuery();
				
				if(rs.next()) 
					isValid = true;
				
			} catch (Exception e) {
				e.printStackTrace();
			} finally {
				try {
					//DBConnection.releaseResources(con, ps, rs);
				} catch (Exception e) {				
					e.printStackTrace();
				}
			}
			return isValid;
		}
		
		public boolean isValidRsuReverse(int circleId, int prodid,
				String rsuCode) throws DAOException {
			Connection con = null;
			PreparedStatement ps =	 null;
			ResultSet rs = null;
			boolean isValid=false;
			
			try {
				con = DBConnection.getDBConnection();
				//logger.info(SQL_VALIDATE_ZONE_CIRCLE);
				ps = con.prepareStatement(SQL_VALIDATE_RSU_REVERSE);
				ps.setString(1,rsuCode);
				ps.setInt(2,circleId);
				ps.setInt(3,prodid);
				rs = ps.executeQuery();
				
				if(rs.next()) 
				{
					isValid = true;
					logger.info(" isValidRsuReverse "+isValid);
				}
				
			} catch (Exception e) {
				e.printStackTrace();
			} finally {
				try {
					//DBConnection.releaseResources(con, ps, rs);
				} catch (Exception e) {				
					e.printStackTrace();
				}
			}
			return isValid;
		}
	
		public ArrayList<RequestCategoryDTO> getRequestListBasedOnProduct(int productId,int productLobId) throws DAOException {
			Connection con = null;
			PreparedStatement ps = null;
			ResultSet rs = null;
			ArrayList<RequestCategoryDTO> requestCategoryList = new ArrayList<RequestCategoryDTO>();
			RequestCategoryDTO dto = null;
			
			try {
				
				con = DBConnection.getDBConnection();
				ps = con.prepareStatement(SQL_SELECT_REQUEST_CATEGORY_MSTR);
				ps.setInt(1,productId);
				//ps.setInt(2,productLobId);
				rs = ps.executeQuery();
				while(rs.next()) {
					dto = new RequestCategoryDTO();
					dto.setRequestCategoryId(rs.getInt("REQUEST_CATEGORY_ID"));
					dto.setRequestCategoryName(rs.getString("REQUEST_CATEGORY"));
					requestCategoryList.add(dto);
				}
				
			} catch (Exception e) {
				throw new DAOException("Exception occured while getting Telemedia Product list :  "+ e.getMessage(),e);
			} finally {
				try {
					//DBConnection.releaseResources(con, ps, rs);
				} catch (Exception e) {				
					throw new DAOException(e.getMessage(), e);
				}
			}
			return requestCategoryList;
		}
	
		public boolean isValidRequestCategory(String productId)
				throws DAOException {
			Connection con = null;
			PreparedStatement ps =	 null;
			ResultSet rs = null;
			boolean isValid=false;
			
			try {
				con = DBConnection.getDBConnection();
				//logger.info(SQL_VALIDATE_ZONE_CIRCLE);
				ps = con.prepareStatement(SQL_VALIDATE_REQUEST_CATEGORY_PRODUCT);
				ps.setInt(1,Integer.parseInt(productId));
				
				rs = ps.executeQuery();
				
				if(rs.next()) 
				{
					isValid = true;
					logger.info(" isValidRsuReverse "+isValid);
				}
				
			} catch (Exception e) {
				e.printStackTrace();
			} finally {
				try {
					//DBConnection.releaseResources(con, ps, rs);
				} catch (Exception e) {				
					e.printStackTrace();
				}
			}
			return isValid;
		}
		
		public boolean isValidRequestCategoryForLob(String productLobId)
				throws DAOException {
			Connection con = null;
			PreparedStatement ps =	 null;
			ResultSet rs = null;
			boolean isValid=false;
			
			try {
				con = DBConnection.getDBConnection();
				//logger.info(SQL_VALIDATE_ZONE_CIRCLE);
				ps = con.prepareStatement(SQL_VALIDATE_REQUEST_CATEGORY_PRODUCT_LOB);
				ps.setInt(1,Integer.parseInt(productLobId));
				
				rs = ps.executeQuery();
				
				if(rs.next()) 
				{
					isValid = true;
					logger.info(" isValidRsuReverse "+isValid);
				}
				
			} catch (Exception e) {
				e.printStackTrace();
			} finally {
				try {
					//DBConnection.releaseResources(con, ps, rs);
				} catch (Exception e) {				
					e.printStackTrace();
				}
			}
			return isValid;
		}
		
		public ArrayList<RequestCategoryDTO> getRequestListBasedOnProductLob(
				int productLobId) throws DAOException {
			Connection con = null;
			PreparedStatement ps = null;
			ResultSet rs = null;
			ArrayList<RequestCategoryDTO> requestCategoryList = new ArrayList<RequestCategoryDTO>();
			RequestCategoryDTO dto = null;
			
			try {
				
				con = DBConnection.getDBConnection();
				ps = con.prepareStatement(SQL_SELECT_REQUEST_CATEGORY_MSTR_LOB);
				ps.setInt(1,productLobId);
				
				rs = ps.executeQuery();
				while(rs.next()) {
					dto = new RequestCategoryDTO();
					dto.setRequestCategoryId(rs.getInt("REQUEST_CATEGORY_ID"));
					dto.setRequestCategoryName(rs.getString("REQUEST_CATEGORY"));
					requestCategoryList.add(dto);
				}
				
			} catch (Exception e) {
				e.printStackTrace();
				//throw new DAOException("Exception occured while getting Telemedia Product list :  "+ e.getMessage(),e);
			} finally {
				try {
					//DBConnection.releaseResources(con, ps, rs);
				} catch (Exception e) {				
					throw new DAOException(e.getMessage(), e);
				}
			}
			return requestCategoryList;
		}
	
		public boolean isValidCityBasedRsuReverse(int circleId, int prodid,
				 String cityCode) throws DAOException {
			Connection con = null;
			PreparedStatement ps =	 null;
			ResultSet rs = null;
			boolean isValid=false;
			
			try {
				con = DBConnection.getDBConnection();
				
				ps = con.prepareStatement(SQL_VALIDATE_CITY_REVERSE);
				//ps.setString(1,rsuCode);
				ps.setString(1, cityCode);
				ps.setInt(2,circleId);
				ps.setInt(3,prodid);
				rs = ps.executeQuery();
				
				if(rs.next()) 
				{
					isValid = true;
					logger.info(" isValidRsuReverse "+isValid);
				}
				
			} catch (Exception e) {
				e.printStackTrace();
			} finally {
				try {
					//DBConnection.releaseResources(con, ps, rs);
				} catch (Exception e) {				
					e.printStackTrace();
				}
			}
			return isValid;
		}
	
		public boolean isValidCityZoneBasedRsuReverse(int circleId, int prodid,
				String rsuCode, String cityZoneCode, String cityCode)
				throws DAOException {
			Connection con = null;
			PreparedStatement ps =	 null;
			ResultSet rs = null;
			boolean isValid=false;
			
			try {
				con = DBConnection.getDBConnection();
				
				ps = con.prepareStatement(SQL_VALIDATE_CITY_ZONE_RSU_REVERSE);
				ps.setString(1,rsuCode);
				ps.setString(2,cityCode);
				ps.setInt(3,circleId);
				ps.setInt(4,prodid);
				
				rs = ps.executeQuery();
				
				if(rs.next()) 
				{
					isValid = true;
					logger.info(" isValidRsuReverse "+isValid);
				}
				
			} catch (Exception e) {
				e.printStackTrace();
			} finally {
				try {
					//DBConnection.releaseResources(con, ps, rs);
				} catch (Exception e) {				
					e.printStackTrace();
				}
			}
			return isValid;
		}
		
		
		public boolean isValidCityZoneBasedRsuReverseNew(int circleId,
				int prodid, String cityZoneCode)
				throws DAOException {
			Connection con = null;
			PreparedStatement ps =	 null;
			ResultSet rs = null;
			boolean isValid=false;
			
			try {
				con = DBConnection.getDBConnection();
				
				ps = con.prepareStatement(SQL_VALIDATE_ZONE_CIRCLE_REVERSE);
				//ps.setString(1,rsuCode);
				ps.setString(1,cityZoneCode);
				ps.setInt(2,circleId);
				ps.setInt(3,prodid);
				
				rs = ps.executeQuery();
				
				if(rs.next()) 
				{
					isValid = true;
					logger.info(" isValidRsuReverse "+isValid);
				}
				
			} catch (Exception e) {
				e.printStackTrace();
			} finally {
				try {
					//DBConnection.releaseResources(con, ps, rs);
				} catch (Exception e) {				
					e.printStackTrace();
				}
			}
			return isValid;
		}
		
		
		public ArrayList<RSUDTO> getRsuForCircleChange(int circleMstriD)
				throws DAOException {
			Connection con = null;
			PreparedStatement ps = null;
			ResultSet rs = null;
			ArrayList<RSUDTO> rsuList = new ArrayList<RSUDTO>();
			RSUDTO dto = null;
			try {
				con = DBConnection.getDBConnection();
				ps = con.prepareStatement(SQL_SELECT_RSU_FOR_CIRCLE);
				
				
				ps.setInt(1, circleMstriD);
				rs = ps.executeQuery();
				while(rs.next()) {
					dto = new RSUDTO();
					dto.setRsuId(rs.getString("RSU_ID"));
					dto.setRsuCode(rs.getString("RSU_CODE"));
					rsuList.add(dto);
				}
			} catch (Exception e) {
				throw new DAOException("Exception occured while getting city list for Circle:  "+ e.getMessage(),e);
			} finally {
				try {
					//DBConnection.releaseResources(con, ps, rs);
				} catch (Exception e) {				
					throw new DAOException(e.getMessage(), e);
				}
			}
			return rsuList;
		}
		
		
		public ArrayList<RSUDTO> getRsuForCityChange(int circleMstriD,
				String cityCode) throws DAOException {
			Connection con = null;
			PreparedStatement ps = null;
			ResultSet rs = null;
			ArrayList<RSUDTO> rsuList = new ArrayList<RSUDTO>();
			RSUDTO dto = null;
			//private static final String SQL_SELECT_RSUCITY_FOR_CIRCLE="SELECT RS.RSU_ID,RS.RSU_CODE FROM RSU_MSTR RS,CITY_ZONE_MSTR CZM,CITY_MSTR CMS,ZONE_MSTR Z,CIRCLE_MSTR CM WHERE CM.CITY_CODE=? AND CM.CIRCLE_MSTR_ID=? AND CMS.ZONE_CODE=Z.ZONE_CODE AND CMS.CITY_CODE=CZM.CITY_CODE AND CZM.CITY_ZONE_CODE=RS.CITY_ZONE_CODE  ";
			try {
				
				con = DBConnection.getDBConnection();
				ps = con.prepareStatement(SQL_SELECT_RSUCITY_FOR_CIRCLE);				
				ps.setString(1, cityCode);
				ps.setInt(2, circleMstriD);
				rs = ps.executeQuery();
				while(rs.next()) {
					dto = new RSUDTO();
					//dto.setRsuId(rs.getString("RSU_ID"));
					dto.setRsuCode(rs.getString("RSU_CODE"));
					rsuList.add(dto);
				}
			} catch (Exception e) {
				e.printStackTrace();
				throw new DAOException("Exception occured while getting city list for Circle:  "+ e.getMessage(),e);
			} finally {
				try {
					//DBConnection.releaseResources(con, ps, rs);
				} catch (Exception e) {				
					throw new DAOException(e.getMessage(), e);
				}
			}
			return rsuList;
		}
		
		public ArrayList<RSUDTO> getRsuForCityZoneCodeChange(int circleMstriD,
				String cityCode, String cityzonecode) throws DAOException {
			Connection con = null;
			PreparedStatement ps = null;
			ResultSet rs = null;
			ArrayList<RSUDTO> rsuList = new ArrayList<RSUDTO>();
			RSUDTO dto = null;
			//private static final String SQL_SELECT_RSUCITY_FOR_CIRCLE="SELECT RS.RSU_ID,RS.RSU_CODE FROM RSU_MSTR RS,CITY_ZONE_MSTR CZM,CITY_MSTR CMS,ZONE_MSTR Z,CIRCLE_MSTR CM WHERE CM.CITY_CODE=? AND CM.CIRCLE_MSTR_ID=? AND CMS.ZONE_CODE=Z.ZONE_CODE AND CMS.CITY_CODE=CZM.CITY_CODE AND CZM.CITY_ZONE_CODE=RS.CITY_ZONE_CODE  ";
			try {
				
				con = DBConnection.getDBConnection();
				ps = con.prepareStatement(SQL_SELECT_RSUCITY_ZONE_CODE_FOR_CIRCLE);			
				ps.setString(1, cityCode);
				ps.setInt(2, circleMstriD);
				ps.setString(3, cityzonecode);
				rs = ps.executeQuery();
				while(rs.next()) {
					dto = new RSUDTO();
					//dto.setRsuId(rs.getString("RSU_ID"));
					dto.setRsuCode(rs.getString("RSU_CODE"));
					rsuList.add(dto);
				}
			} catch (Exception e) {
				e.printStackTrace();
				throw new DAOException("Exception occured while getting city list for Circle:  "+ e.getMessage(),e);
			} finally {
				try {
					//DBConnection.releaseResources(con, ps, rs);
				} catch (Exception e) {				
					throw new DAOException(e.getMessage(), e);
				}
			}
			return rsuList;
		}
		
		public String getCircleName(String circleMstrId) throws DAOException {
			Connection con = null;
			PreparedStatement ps = null;
			ResultSet rs = null;
			String circleName="";
			
			try {
				con = DBConnection.getDBConnection();
				ps = con.prepareStatement(SQL_SELECT_CIRCLE_NAME);				
				ps.setInt(1, Integer.parseInt(circleMstrId));
				rs = ps.executeQuery();
				while(rs.next()) {
					
					circleName=rs.getString("CIRCLE_NAME");
				return circleName;
				}
			} catch (Exception e) {
				throw new DAOException("Exception occured while getting city list for Circle:  "+ e.getMessage(),e);
			} finally {
				try {
					//DBConnection.releaseResources(con, ps, rs);
				} catch (Exception e) {				
					throw new DAOException(e.getMessage(), e);
				}
			}
			return circleName;
		}
		
		public String getAlertMsg(String alert,String source,String type) throws DAOException {
			Connection con = null;
			PreparedStatement ps = null;
			ResultSet rs = null;
			String msg="";
			
			try {
				con = DBConnection.getDBConnection();
				if(type.equalsIgnoreCase("email"))
				{
					if(alert.equals("3"))
					{
						ps=con.prepareStatement(SQL_SELECT_ALERT_MSG1);
						ps.setString(2,source);
					}
					else
					{
					ps = con.prepareStatement(SQL_SELECT_ALERT_MSG);
					//System.out.println("alert :"+alert);
					}
					ps.setInt(1, Integer.parseInt(alert));
					rs = ps.executeQuery();
					while(rs.next()) {
						
						msg=rs.getString("MSG_TEMPLATE");
						//System.out.println("dao impl"+msg);
						if(!msg.equalsIgnoreCase(""))
						{
						return msg;
						}
					}
				}
				else if(type.equalsIgnoreCase("sms"))
				{
					if(alert.equals("3"))
					{
						ps=con.prepareStatement(SQL_SELECT_SMS_MSG1);
						ps.setString(2,source);
					}
					else
					{
					ps = con.prepareStatement(SQL_SELECT_SMS_MSG);
					//System.out.println("alert :"+alert);
					}
					ps.setInt(1, Integer.parseInt(alert));
					rs = ps.executeQuery();
					while(rs.next()) 
					{
						
						msg=rs.getString("SMS_TEMPLATE");
						//System.out.println("dao impl"+msg);
						if(!msg.equalsIgnoreCase(""))
						{
						return msg;
						}
					}
				}
				if(msg.equalsIgnoreCase(""))
				{
					System.out.println("msg == "+msg+"type"+type);
					ps=con.prepareStatement(SQL_SELECT_DEFAULT);
					ps.setInt(1, Integer.parseInt(alert));
					rs = ps.executeQuery();
					while(rs.next()) 
					{
						if(type.equalsIgnoreCase("sms"))
						{
						msg=rs.getString("DEFAULT_SMS");
					
						return msg;
						}
						else if(type.equalsIgnoreCase("email"))
						{
						msg=rs.getString("DEFAULT_MESSAGE");
					
						return msg;
						}
					}
				}
				
			} catch (Exception e) {
				e.printStackTrace();
				throw new DAOException("Exception occured :  "+ e.getMessage(),e);
			} finally {
				try {
					//DBConnection.releaseResources(con, ps, rs);
				} catch (Exception e) {				
					throw new DAOException(e.getMessage(), e);
				}
			}
			return msg;
		}
		public String getStatus(String alert,String source) throws DAOException
		{
			Connection con = null;
			PreparedStatement ps = null;
			ResultSet rs = null;
			String status="";
			
			try {
				con = DBConnection.getDBConnection();
				if(alert.equals("3"))
				{
					ps=con.prepareStatement(SQL_SELECT_ALERT_STATUS1);
					ps.setString(2,source);
				}
				else
				{
				ps = con.prepareStatement(SQL_SELECT_ALERT_STATUS);
				}
				//System.out.println("alert :"+alert);
				
				ps.setInt(1, Integer.parseInt(alert));
				rs = ps.executeQuery();
				while(rs.next()) {
					
					status=rs.getString("STATUS");
					
				return status;
				}
			} catch (Exception e) {
				throw new DAOException("Exception occured :  "+ e.getMessage(),e);
			} finally {
				try {
					//DBConnection.releaseResources(con, ps, rs);
				} catch (Exception e) {				
					throw new DAOException(e.getMessage(), e);
				}
			}
			return status;
		}
		
		public String getSubject(String alert,String source) throws DAOException
		{
			Connection con = null;
			PreparedStatement ps = null;
			ResultSet rs = null;
			String subject="";
			
			try {
				con = DBConnection.getDBConnection();
				
				if(alert.equals("3"))
				{
					ps=con.prepareStatement(SQL_SELECT_ALERT_SUBJECT1);
					ps.setString(2,source);
				}
				else
				{
					ps = con.prepareStatement(SQL_SELECT_ALERT_SUBJECT);
				}
				
				ps.setInt(1, Integer.parseInt(alert));
				rs = ps.executeQuery();
				while(rs.next()) 
				{
					
					subject=rs.getString("SUBJECT_TEMPLATE");
					//System.out.println("dao impl SUBJECT_TEMPLATE"+subject);
					return subject;
				}
			} catch (Exception e) {
				e.printStackTrace();
				throw new DAOException("Exception occured :  "+ e.getMessage(),e);
			} finally {
				try {
					//DBConnection.releaseResources(con, ps, rs);
				} catch (Exception e) {				
					throw new DAOException(e.getMessage(), e);
				}
			}
			return subject;
		
		}
		public String getSms(String alert,String source) throws DAOException
		{
			Connection con = null;
			PreparedStatement ps = null;
			ResultSet rs = null;
			String sms="";
			
			try {
				con = DBConnection.getDBConnection();
				if(alert.equals("3"))
				{
					ps=con.prepareStatement(SQL_SELECT_ALERT_SMS1);
					ps.setString(2,source);
				}
				else
				{
				ps = con.prepareStatement(SQL_SELECT_ALERT_SMS);
				}
				//System.out.println("alert :"+alert);
				
				ps.setInt(1, Integer.parseInt(alert));
				rs = ps.executeQuery();
				while(rs.next()) {
					
					sms=rs.getString("MOBILE_NUMBERS");
					//System.out.println("dao impl"+sms);
				return sms;
				}
			} catch (Exception e) {
				throw new DAOException("Exception occured :  "+ e.getMessage(),e);
			} finally {
				try {
					//DBConnection.releaseResources(con, ps, rs);
				} catch (Exception e) {				
					throw new DAOException(e.getMessage(), e);
				}
			}
			return sms;
		
		}
		public String getEmail(String alert,String source) throws DAOException{
			Connection con = null;
			PreparedStatement ps = null;
			ResultSet rs = null;
			String email="";
			
			try {
				con = DBConnection.getDBConnection();
				if(alert.equals("3"))
				{
					ps=con.prepareStatement(SQL_SELECT_ALERT_EMAIL1);
					ps.setString(2,source);
				}
				else
				{
				ps = con.prepareStatement(SQL_SELECT_ALERT_EMAIL);
				}
				//System.out.println("alert :"+alert);
				
				ps.setInt(1, Integer.parseInt(alert));
				rs = ps.executeQuery();
				while(rs.next()) {
					
					email=rs.getString("EMAIL_IDS");
					
				return email;
				}
			} catch (Exception e) {
				throw new DAOException("Exception occured :  "+ e.getMessage(),e);
			} finally {
				try {
					//DBConnection.releaseResources(con, ps, rs);
				} catch (Exception e) {				
					throw new DAOException(e.getMessage(), e);
				}
			}
			return email;
		
		}
		public String getCount(String alert,String source) throws DAOException{
			Connection con = null;
			PreparedStatement ps = null;
			ResultSet rs = null;
			String count="";
						
			try {
				con = DBConnection.getDBConnection();
				if(alert.equals("3"))
				{
					ps=con.prepareStatement(SQL_SELECT_ALERT_COUNT1);
					ps.setString(2,source);
					//System.out.println(source+"...alert THRESHOLD_COUNT:"+alert);
				}
				else
				{
				ps = con.prepareStatement(SQL_SELECT_ALERT_COUNT);
				}
				
				
				ps.setInt(1, Integer.parseInt(alert));
				rs = ps.executeQuery();
				while(rs.next()) {
					
					count=rs.getString("THRESHOLD_COUNT");
					//System.out.println("dao impl THRESHOLD_COUNT"+count);
				return count;
				}
			} catch (Exception e) {
				throw new DAOException("Exception occured :  "+ e.getMessage(),e);
			} finally {
				try {
					//DBConnection.releaseResources(con, ps, rs);
				} catch (Exception e) {				
					throw new DAOException(e.getMessage(), e);
				}
			}
			return count;
		
		}
		
		public String getAlertType(String alert,String source) throws DAOException
		{
			Connection con = null;
			PreparedStatement ps = null;
			ResultSet rs = null;
			String alertType="";
						
			try {
				con = DBConnection.getDBConnection();
				if(alert.equals("3"))
				{
					ps=con.prepareStatement(SQL_SELECT_ALERT_TYPE1);
					ps.setString(2,source);
					}
				else
				{
				ps = con.prepareStatement(SQL_SELECT_ALERT_TYPE);
				}
				//System.out.println("alert :"+alert);
				
				ps.setInt(1, Integer.parseInt(alert));
				rs = ps.executeQuery();
				while(rs.next()) {
					
					alertType=rs.getString("ALERT_TYPE");
					
				return alertType;
				}
			} catch (Exception e) {
				throw new DAOException("Exception occured :  "+ e.getMessage(),e);
			} finally {
				try {
					//DBConnection.releaseResources(con, ps, rs);
				} catch (Exception e) {				
					throw new DAOException(e.getMessage(), e);
				}
			}
			return alertType;
		}
		
		
		
		public String getPeriod(String alert,String source) throws DAOException{
			Connection con = null;
			PreparedStatement ps = null;
			ResultSet rs = null;
			String period="";
			
			try {
				con = DBConnection.getDBConnection();
				if(alert.equals("3"))
				{
					ps=con.prepareStatement(SQL_SELECT_ALERT_PERIOD1);
					ps.setString(2,source);
				}
				else
				{
				ps = con.prepareStatement(SQL_SELECT_ALERT_PERIOD);
				}
				
				ps.setInt(1, Integer.parseInt(alert));
				rs = ps.executeQuery();
				while(rs.next()) {
					
					period=rs.getString("THRESHOLD_PERIOD");
					
				return period;
				}
			} catch (Exception e) {
				throw new DAOException("Exception occured :  "+ e.getMessage(),e);
			} finally {
				try {
					//DBConnection.releaseResources(con, ps, rs);
				} catch (Exception e) {				
					throw new DAOException(e.getMessage(), e);
				}
			}
			return period;
		}
public int getReportId(String reportName) throws DAOException
		{
			logger.info("inside getReportId method.");
			Connection con = null;
			PreparedStatement ps = null;
			ResultSet rs = null;
					
			try
			{
				con = DBConnection.getDBConnection();
				ps = con.prepareStatement(SQL_GET_REPORTID_FROM_REPORTNAME);
				ps.setString(1, reportName);
				rs = ps.executeQuery();
				
				if(rs.next())
				{
					return rs.getInt("REPORT_ID");
				}
			}
			catch (Exception e) 
			{
				e.printStackTrace();
				throw new DAOException("Exception occured while getReportId:  "+ e.getMessage(),e);
			} 
			finally 
			{
				try 
				{
					//DBConnection.releaseResources(con, ps, rs);
				} 
				catch (Exception e) 
				{				
					throw new DAOException(e.getMessage(), e);
				}
			}
			return 0;
		}

		public List<ActorDto> getActors() throws DAOException
		{
			Connection con = null;
			PreparedStatement ps = null;
			ResultSet rs = null;
			List<ActorDto> actorsList = new ArrayList<ActorDto>();

			try
			{
				con = DBConnection.getDBConnection();
				ps = con.prepareStatement(SQL_SELECT_ACTORS);
				rs = ps.executeQuery();
				while(rs.next()) 
				{
					ActorDto aDto = new ActorDto();
					aDto.setActorId(rs.getInt("KM_ACTOR_ID"));
					aDto.setActorName(rs.getString("KM_ACTOR_NAME"));
					actorsList.add(aDto);
				}
			}
			catch (Exception e) 
			{
				throw new DAOException("Exception occured while getActors :  "+ e.getMessage(),e);
			}
			finally
			{
				try 
				{
					//DBConnection.releaseResources(con, ps, rs);
				}
				catch (Exception e) 
				{				
					throw new DAOException(e.getMessage(), e);
				}
			}
			return actorsList;
		}
		
		
		public List<ReportsDTO> getDynamicReports() throws DAOException
		{
			Connection con = null;
			PreparedStatement ps = null;
			ResultSet rs = null;
			List<ReportsDTO> reportsList = new ArrayList<ReportsDTO>();

			try
			{
				con = DBConnection.getDBConnection();
				ps = con.prepareStatement(SQL_SELECT_DYNAMIC_REPORTS);
				rs = ps.executeQuery();
				while(rs.next()) 
				{
					ReportsDTO aDto = new ReportsDTO();
					aDto.setReportId(rs.getInt("REPORT_ID"));
					aDto.setReportName(rs.getString("REPORT_NAME"));
					reportsList.add(aDto);
				}
			}
			catch (Exception e) 
			{
				throw new DAOException("Exception occured while getDynamicReports :  "+ e.getMessage(),e);
			}
			finally
			{
				try 
				{
					//DBConnection.releaseResources(con, ps, rs);
				}
				catch (Exception e) 
				{				
					throw new DAOException(e.getMessage(), e);
				}
			}
			return reportsList;
		}
		
		public ReportsDTO getReportConfiguration(String reportConfigId, int actorId, int lobId) throws DAOException
		{
			Connection con = null;
			PreparedStatement ps = null;
			ResultSet rs = null;

			ReportsDTO aDto = new ReportsDTO();
			
			try
			{
				con = DBConnection.getDBConnection();
				ps = con.prepareStatement(SQL_SELECT_REPORT_CONFIGURATION);
				ps.setString(1, reportConfigId);
				logger.info(SQL_SELECT_REPORT_CONFIGURATION);
				rs = ps.executeQuery();
				while(rs.next()) 
				{
					aDto.setFrequency(rs.getInt("FREQUENCY"));
					aDto.setToRecipients(rs.getString("TO_RECIPIENTS"));
					aDto.setCcRecipients(rs.getString("CC_RECIPIENTS"));
					aDto.setTimings(rs.getString("TIMINGS"));
					aDto.setSubject(rs.getString("SUBJECT"));
				}
			}
			catch (Exception e) 
			{
				e.printStackTrace();
				throw new DAOException("Exception occured while getReportConfiguration :  "+ e.getMessage(),e);
			}
			finally
			{
				try 
				{
					//DBConnection.releaseResources(con, ps, rs);
				}
				catch (Exception e) 
				{				
					throw new DAOException(e.getMessage(), e);
				}
			}
			return aDto;
		}
		
		public void insertReportConfiguration(ReportsDTO aDto) throws DAOException
		{
			logger.info("Inside insertReportConfiguration");
			
			Connection con = null;
			PreparedStatement ps = null;
			ResultSet rs = null;

			try
			{
				con = DBConnection.getDBConnection();
				ps = con.prepareStatement(SQL_INSERT_REPORT_CONFIGURATION);
				
				logger.info(SQL_INSERT_REPORT_CONFIGURATION);

				ps.setString(1, aDto.getReportConfigId());
				ps.setInt(2, aDto.getReportId());
				ps.setString(3, aDto.getToRecipients());
				ps.setString(4, aDto.getCcRecipients());
				ps.setInt(5, aDto.getActorId());
				ps.setInt(6, aDto.getFrequency());
				ps.setString(7, aDto.getTimings());
				ps.setInt(8, aDto.getLobId());
				ps.setString(9, aDto.getReportName());
				ps.setString(10, aDto.getStatus());
				ps.setString(11, aDto.getUpdatedBy());
				ps.setString(12, aDto.getSubject());
				
				ps.executeUpdate();
			}
			catch (Exception e) 
			{
				throw new DAOException("Exception occured while insertReportConfiguration :  "+ e.getMessage(),e);
			}
			finally
			{
				try 
				{
					//DBConnection.releaseResources(con, ps, rs);
				}
				catch (Exception e) 
				{				
					throw new DAOException(e.getMessage(), e);
				}
			}
		}
		
		
		public boolean checkIfConfigurationExist(String reportConfigId) throws DAOException
		{
			String FIND_IF_REPORT_ID_EXIST = "SELECT REPORT_CONFIGURATION_ID from RPT_CONFIGURATION Where REPORT_CONFIGURATION_ID=?  ";
			
			Connection con = null;
			PreparedStatement ps = null;
			ResultSet rs = null;
			boolean configurationExist = false;
			
			try
			{
				con = DBConnection.getDBConnection();
				ps = con.prepareStatement(FIND_IF_REPORT_ID_EXIST);
				ps.setString(1, reportConfigId);
				logger.info(FIND_IF_REPORT_ID_EXIST);

				rs = ps.executeQuery();
				if(rs.next())
				{
					configurationExist = true;
					return configurationExist;
				}
			}
			catch (Exception e) 
			{
				throw new DAOException("Exception occured while checkIfConfigurationExist:  "+ e.getMessage(),e);
			}
			finally
			{
				try 
				{
					//DBConnection.releaseResources(con, ps, rs);
				}
				catch (Exception e) 
				{				
					throw new DAOException(e.getMessage(), e);
				}
			}
			return configurationExist;
		}
		
		/**
		 * 
		 */
		public void updateReportConfiguration(ReportsDTO aDto) throws DAOException
		{
			logger.info("Inside updateReportConfiguration");
			Connection con = null;
			PreparedStatement ps = null;
			ResultSet rs = null;

			try
			{
				con = DBConnection.getDBConnection();
				ps = con.prepareStatement(SQL_UPDATE_REPORT_CONFIGURATION);
				
				logger.info(SQL_UPDATE_REPORT_CONFIGURATION);

				ps.setString(1, aDto.getToRecipients());
				ps.setString(2, aDto.getCcRecipients());
				ps.setInt(3, aDto.getFrequency());
				ps.setString(4, aDto.getTimings());
				ps.setString(5, aDto.getStatus());
				ps.setString(6, aDto.getSubject());
				ps.setString(7, aDto.getReportConfigId());
				
				ps.executeUpdate();
			}
			catch (Exception e) 
			{
				throw new DAOException("Exception occured while updateReportConfiguration :  "+ e.getMessage(),e);
			}
			finally
			{
				try 
				{
					//DBConnection.releaseResources(con, ps, rs);
				}
				catch (Exception e) 
				{				
					throw new DAOException(e.getMessage(), e);
				}
			}
		}
		
		
		private ColumnDto isExist(int columnId, List<ColumnDto> columnsList)
		{
			for(ColumnDto aDto : columnsList)
			{
				if(aDto.getColumnId() == columnId)
					return aDto;
			}
			return null;
		}
		
		/**
		 * 
		 * @param reportId
		 * @param actorId
		 * @return
		 * @throws DAOException
		 */
		public int getReportConfigurationId(int reportId, int actorId, int lobId) throws DAOException
		{
			final String GET_REPORT_CONFGIURATION_ID = "SELECT REPORT_CONFIGURATION_ID FROM REPORT_CONFIGURATION WHERE REPORT_ID=? and ACTOR_ID=? and LOB_ID=?  ";
			Connection con = null;
			PreparedStatement ps = null;
			ResultSet rs = null;
			
			int reportConfigId = -1;
			
			try
			{
				con = DBConnection.getDBConnection();
				ps = con.prepareStatement(GET_REPORT_CONFGIURATION_ID);
				ps.setInt(1, reportId);
				ps.setInt(2, actorId);
				ps.setInt(3, lobId);
				
				rs = ps.executeQuery();
				if(rs.next())
				{
					reportConfigId = rs.getInt("REPORT_CONFIGURATION_ID");
				}
			}
			catch(Exception e)
			{
				e.printStackTrace();
			}
			finally
			{
				try 
				{
					//DBConnection.releaseResources(con, ps, rs);
				}
				catch (Exception e) 
				{				
					throw new DAOException(e.getMessage(), e);
				}
			}
			
			return reportConfigId;
		}
		
		
		private int getReportIdFromConfigId(String reportConfigId)
		{
			return Integer.parseInt(reportConfigId.substring(0,reportConfigId.length()-2));
		}
		
		
		/**
		 * 
		 */
		public List<ColumnDto> getColumns(String reportConfigId, int actorId, int lobId) throws DAOException
		{
			// Get columns from TableConfiguration table
			// Where report id is equal to input
			
			// Get report configuration id from ReportConfiguration table
			// for reportid and actor id combination
			
			// Get columns from FrontEnd configuration table
			// Where report configuration id is matching with 
			// what found at previous step.
			
			logger.info("Inside getColumns method");
			
			int reportId = getReportIdFromConfigId(reportConfigId);
			
			final String GET_ALL_UNSELECTED_COLUMNS = "SELECT REPORT_ID, COL_ID, COL_NAME FROM TABLE_CONFIGURATION WHERE (REPORT_ID=? OR REPORT_ID=0) and" + 
			" (COL_ID not in ( SELECT Column_id from FE_Configuration WHERE REPORT_CONFIGURATION_ID=?  ))  ";
			
			final String GET_SELECTED_COLUMNS = "SELECT COLUMN_ID, COL_NAME, FRONTEND_NAME FROM FE_CONFIGURATION fc, TABLE_CONFIGURATION tc WHERE fc.REPORT_CONFIGURATION_ID=? and fc.COLUMN_ID = tc.COL_ID  ";
			
			List<ColumnDto> columnsList = new ArrayList<ColumnDto>();
			
			Connection con = null;
			PreparedStatement ps = null;
			ResultSet rs = null;
			PreparedStatement ps2 = null;
			ResultSet rs2 = null;

			try
			{
				//int report_config_id = getReportConfigurationId(reportId, actorId, lobId);
				
				con = DBConnection.getDBConnection();
				ps = con.prepareStatement(GET_ALL_UNSELECTED_COLUMNS);
				
				logger.info(GET_ALL_UNSELECTED_COLUMNS);
				
				ps.setInt(1, reportId);
				ps.setString(2, reportConfigId);
				rs = ps.executeQuery();
				while(rs.next())
				{
					ColumnDto aDto = new ColumnDto();
					aDto.setColumnId(rs.getInt("COL_ID"));
					aDto.setColumnName(rs.getString("COL_NAME"));
					aDto.setReportId(rs.getInt("REPORT_ID"));
					columnsList.add(aDto);
				}

				
				ps2 = con.prepareStatement(GET_SELECTED_COLUMNS);
				ps2.setString(1, reportConfigId);
				rs2 = ps2.executeQuery();
				
				while(rs2.next())
				{
					ColumnDto aDto = new ColumnDto();
					
					aDto.setColumnName(rs2.getString("COL_NAME"));
					aDto.setColumnId(rs2.getInt("COLUMN_ID"));
					aDto.setDisplayName(rs2.getString("FRONTEND_NAME"));
					aDto.setSelectedInReport(true);
						
					columnsList.add(aDto);

				}
				
			}
			catch(Exception e)
			{
				e.printStackTrace();
				throw new DAOException("Exception occured while executing getColumns :  "+ e.getMessage(),e);
			}
			finally
			{
				try 
				{
					if(rs2 !=null)
						rs2.close();
					if(ps2 != null)
						ps2.close();
					//DBConnection.releaseResources(con, ps, rs);
				}
				catch (Exception e) 
				{				
					throw new DAOException(e.getMessage(), e);
				}
			}
			return columnsList;
		}
		
		
		public void updateReportColumns(String reportConfigId, int[] reportColumns, String[] displayNames, int reportId, int actorId, int lobId) throws DAOException
		{
			final String DELETE_FRONTEND_CONFIG = "DELETE FROM FE_CONFIGURATION WHERE REPORT_CONFIGURATION_ID=?";
			final String INSERT_REPORT_COLUMNS = "INSERT INTO FE_CONFIGURATION(REPORT_CONFIGURATION_ID, COLUMN_ID) " +
											     "VALUES(?, ?)";
			final String UPDATE_DISPLAY_NAMES = "UPDATE FE_CONFIGURATION SET FRONTEND_NAME=? WHERE REPORT_CONFIGURATION_ID=? and COLUMN_ID=?";
			//int reportConfigId = getReportConfigurationId(reportId, actorId, lobId);
			
			Connection con = null;
			PreparedStatement ps = null;
			ResultSet rs = null;

			PreparedStatement ps2 = null;
			
			try
			{
				con = DBConnection.getDBConnection();
				ps = con.prepareStatement(DELETE_FRONTEND_CONFIG);
				ps.setString(1, reportConfigId);
				ps.executeUpdate(); // DELETED
				
				// Now add selected columns
				for(int i=0; i<reportColumns.length;i++)
				{
					ps2 = con.prepareStatement(INSERT_REPORT_COLUMNS);
					ps2.setString(1, reportConfigId);
					ps2.setInt(2, reportColumns[i]);
					ps2.executeUpdate();
				}
				
				if(displayNames != null && displayNames.length !=0)
				{
					for(String s : displayNames)
					{
						String[] arr = s.split("#");
						int col_id = Integer.parseInt(arr[0]);
						String frontendName = arr[1];
						
						ps2 = con.prepareStatement(UPDATE_DISPLAY_NAMES);
						ps2.setString(1, frontendName);
						ps2.setString(2, reportConfigId);
						ps2.setInt(3, col_id);
						
						ps2.executeUpdate();
					}
				}
				
				
			}
			catch(Exception e)
			{
				e.printStackTrace();
				throw new DAOException("Exception occured while executing updateReportColumns :  "+ e.getMessage(),e);
			}
			finally
			{
				try 
				{
					if(ps2 != null)
					{
						ps2.close();
					}
					//DBConnection.releaseResources(con, ps, rs);
				}
				catch (Exception e) 
				{				
					throw new DAOException(e.getMessage(), e);
				}
			}
		}
		
		
		public List<ProductDTO> getAllProducts() throws DAOException
		{
			String SQL_SELECT_PRODUCTS = "SELECT PRODUCT_ID, PRODUCT_NAME  FROM PRODUCT_MSTR WHERE STATUS='A'  ";
			Connection con = null;
			PreparedStatement ps = null;
			ResultSet rs = null;
			List<ProductDTO> products = new ArrayList<ProductDTO>();
		
			try 
			{
				con = DBConnection.getDBConnection();
		
				ps = con.prepareStatement(SQL_SELECT_PRODUCTS);
			
				rs = ps.executeQuery();
				while(rs.next()) 
				{
					int productId = rs.getInt("PRODUCT_ID");
					String productName = rs.getString("PRODUCT_NAME");
					
					ProductDTO aDto = new ProductDTO();
					aDto.setProductId(productId);
					aDto.setProductName(productName);
					
					products.add(aDto);
				}
			} 
			catch (Exception e) 
			{
				e.printStackTrace();
				throw new DAOException("Exception occured while getAllProducts",e);
			}
			finally 
			{
				try 
				{
					//DBConnection.releaseResources(con, ps, rs);
				}
				catch (Exception e) 
				{				
					throw new DAOException(e.getMessage(), e);
				}
			}
			return products;
		}
		
		
		public List<ProductDTO> getProductListByLob(int lobid) throws DAOException
		{
			String SQL_SELECT_PRODUCTS = "SELECT PRODUCT_ID, PRODUCT_NAME  FROM PRODUCT_MSTR WHERE STATUS='A' and PRODUCT_LOB_ID=?  ";
			Connection con = null;
			PreparedStatement ps = null;
			ResultSet rs = null;
			List<ProductDTO> products = new ArrayList<ProductDTO>();
		
			try 
			{
				con = DBConnection.getDBConnection();
		
				ps = con.prepareStatement(SQL_SELECT_PRODUCTS);
				ps.setInt(1, lobid);
				rs = ps.executeQuery();
				while(rs.next()) 
				{
					int productId = rs.getInt("PRODUCT_ID");
					String productName = rs.getString("PRODUCT_NAME");
					
					ProductDTO aDto = new ProductDTO();
					aDto.setProductId(productId);
					aDto.setProductName(productName);
					
					products.add(aDto);
				}
			} 
			catch (Exception e) 
			{
				e.printStackTrace();
				throw new DAOException("Exception occured while getProductListByLob",e);
			}
			finally 
			{
				try 
				{
					////DBConnection.releaseResources(con, ps, rs);
				}
				catch (Exception e) 
				{				
					throw new DAOException(e.getMessage(), e);
				}
			}
			return products;
		}
		
		
		public List<FidDto> getAllFids(String reportConfigId) throws DAOException
		{
			String SQL_SELECT_FID_FOR_REPORT = "SELECT FORM_ID, PAGE_URL FROM FORM_DETAILS WHERE STATUS = 'A' and FORM_ID NOT IN (SELECT FID_PRODUCT FROM FID_PRODUCT_CONFIGURATION WHERE RPT_CONFIGURATION_ID=?  )  ";
			Connection con = null;
			PreparedStatement ps = null;
			ResultSet rs = null;
			List<FidDto> inVisibleFids = new ArrayList<FidDto>();
		
			try 
			{
				con = DBConnection.getDBConnection();
		
				ps = con.prepareStatement(SQL_SELECT_FID_FOR_REPORT);
				ps.setString(1, reportConfigId);
				rs = ps.executeQuery();
				while(rs.next()) 
				{
					int fid = rs.getInt("FORM_ID");
					
					FidDto aDto = new FidDto();
					aDto.setFid(fid);
					
					inVisibleFids.add(aDto);
				}
			} 
			catch (Exception e) 
			{
				e.printStackTrace();
				throw new DAOException("Exception occured while getAllFids",e);
			}
			finally 
			{
				try 
				{
					//DBConnection.releaseResources(con, ps, rs);
				}
				catch (Exception e) 
				{				
					throw new DAOException(e.getMessage(), e);
				}
			}
			return inVisibleFids;
		}
		
		
		public List<FidDto> getAllActiveFids() throws DAOException
		{
			String SQL_SELECT_FID_FOR_REPORT = "SELECT FORM_ID, PAGE_URL FROM FORM_DETAILS WHERE STATUS = 'A'  ";
			Connection con = null;
			PreparedStatement ps = null;
			ResultSet rs = null;
			List<FidDto> inVisibleFids = new ArrayList<FidDto>();
		
			try 
			{
				con = DBConnection.getDBConnection();
		
				ps = con.prepareStatement(SQL_SELECT_FID_FOR_REPORT);
				rs = ps.executeQuery();
				while(rs.next()) 
				{
					int fid = rs.getInt("FORM_ID");
					
					FidDto aDto = new FidDto();
					aDto.setFid(fid);
					
					inVisibleFids.add(aDto);
				}
			} 
			catch (Exception e) 
			{
				e.printStackTrace();
				throw new DAOException("Exception occured while getAllActiveFids",e);
			}
			finally 
			{
				try 
				{
					//DBConnection.releaseResources(con, ps, rs);
				}
				catch (Exception e) 
				{				
					throw new DAOException(e.getMessage(), e);
				}
			}
			return inVisibleFids;
		}
		
		/**
		 * 
		 */
		public List<FidDto> getSelectedFidsForReport(String reportConfigId) throws DAOException
		{
			String SQL_SELECT_FID_FOR_REPORT = "SELECT FID_PRODUCT FROM FID_PRODUCT_CONFIGURATION WHERE RPT_CONFIGURATION_ID = ?  ";
			Connection con = null;
			PreparedStatement ps = null;
			ResultSet rs = null;
			List<FidDto> visibleFids = new ArrayList<FidDto>();
		
			try 
			{
				con = DBConnection.getDBConnection();
		
				ps = con.prepareStatement(SQL_SELECT_FID_FOR_REPORT);
				ps.setString(1, reportConfigId);
				rs = ps.executeQuery();
				while(rs.next()) 
				{
					int fid = rs.getInt("FID_PRODUCT");
					
					FidDto aDto = new FidDto();
					aDto.setFid(fid);
					
					visibleFids.add(aDto);
				}
			} 
			catch (Exception e) 
			{
				e.printStackTrace();
				throw new DAOException("Exception occured while getSelectedFidsForReport",e);
			}
			finally 
			{
				try 
				{
					//DBConnection.releaseResources(con, ps, rs);
				}
				catch (Exception e) 
				{				
					throw new DAOException(e.getMessage(), e);
				}
			}
			return visibleFids;
		}
		
		/**
		 * 
		 */
		public void updateProducts(String reportConfigId, int lobId, String[] products) throws DAOException
		{
			String SQL_DELETE_RECORDS_FOR_REPORT_ID = "DELETE FROM FID_PRODUCT_CONFIGURATION WHERE RPT_CONFIGURATION_ID=?";
			String SQL_INSERT_RECORDS = "INSERT INTO FID_PRODUCT_CONFIGURATION(RPT_CONFIGURATION_ID, FID_PRODUCT) VALUES(?, ?)";
			Connection con = null;
			PreparedStatement ps = null;
			PreparedStatement ps2 = null;
			ResultSet rs = null;
			
			try 
			{
				con = DBConnection.getDBConnection();
		
				ps = con.prepareStatement(SQL_DELETE_RECORDS_FOR_REPORT_ID);
				ps.setString(1, reportConfigId);
				//ps.setInt(2, lobId);
				
				ps.executeUpdate();
				
				ps2 = con.prepareStatement(SQL_INSERT_RECORDS);
				for(String product : products)
				{
					ps2.setString(1, reportConfigId);
					//ps2.setInt(2, lobId);
					ps2.setInt(2, Integer.parseInt(product));
					
					ps2.executeUpdate();
				}
			} 
			catch (Exception e) 
			{
				e.printStackTrace();
				throw new DAOException("Exception occured while updateProducts",e);
			}
			finally 
			{
				try 
				{
					if(ps2 !=null)
						ps2.close();
					//DBConnection.releaseResources(con, ps, rs);
				}
				catch (Exception e) 
				{				
					throw new DAOException(e.getMessage(), e);
				}
			}
		}


		public List<String> getSelectedProducts(String reportConfigId, int lobId) throws DAOException
		{
			String SQL_PRODUCTS_FOR_REPORT_ID = "Select FID_PRODUCT from FID_PRODUCT_CONFIGURATION WHERE RPT_CONFIGURATION_ID=?   ";
			Connection con = null;
			PreparedStatement ps = null;
			ResultSet rs = null;
			List<String> products = new ArrayList<String>();
			try 
			{
				con = DBConnection.getDBConnection();				
				ps = con.prepareStatement(SQL_PRODUCTS_FOR_REPORT_ID);
				ps.setString(1, reportConfigId);
				
				rs = ps.executeQuery();
				
				while(rs.next())
				{
					products.add(rs.getString(1));
				}
			}
			catch (Exception e) 
			{
				e.printStackTrace();
				throw new DAOException("Exception occured while getSelectedProducts",e);
			}
			finally 
			{
				try 
				{
					//DBConnection.releaseResources(con, ps, rs);
				}
				catch (Exception e) 
				{				
					throw new DAOException(e.getMessage(), e);
				}
			}
			
			return products;
		}

		/**
		 * 
		 */
		public void updateFids(String reportConfigId, String[] fids) throws DAOException
		{
			String SQL_DELETE_RECORDS_FOR_REPORT_ID = "DELETE FROM FID_PRODUCT_CONFIGURATION WHERE RPT_CONFIGURATION_ID=?";
			String SQL_INSERT_RECORDS = "INSERT INTO FID_PRODUCT_CONFIGURATION(RPT_CONFIGURATION_ID, FID_PRODUCT) VALUES(?, ?)";
			Connection con = null;
			PreparedStatement ps = null;
			PreparedStatement ps2 = null;
			ResultSet rs = null;
			
			try 
			{
				con = DBConnection.getDBConnection();
		
				ps = con.prepareStatement(SQL_DELETE_RECORDS_FOR_REPORT_ID);
				ps.setString(1, reportConfigId);
				
				ps.executeUpdate();
				
				ps2 = con.prepareStatement(SQL_INSERT_RECORDS);
				
				for(String fid : fids)
				{
					ps2.setString(1, reportConfigId);
					ps2.setInt(2, Integer.parseInt(fid));
					
					ps2.executeUpdate();
				}
			} 
			catch (Exception e) 
			{
				e.printStackTrace();
				throw new DAOException("Exception occured while updateFids",e);
			}
			finally 
			{
				try 
				{
					if(ps2 !=null)
						ps2.close();
					//DBConnection.releaseResources(con, ps, rs);
				}
				catch (Exception e) 
				{				
					throw new DAOException(e.getMessage(), e);
				}
			}
		}
		
		public List<ColumnDto> getAllColumns() throws DAOException
		{			
			logger.info("Inside getAllColumns method");
			
			final String GET_ALL_COLUMNS = "SELECT COL_ID, COL_NAME FROM TABLE_CONFIGURATION  ";
			
			List<ColumnDto> columnsList = new ArrayList<ColumnDto>();
			
			Connection con = null;
			PreparedStatement ps = null;
			ResultSet rs = null;

			try
			{
				
				con = DBConnection.getDBConnection();
				ps = con.prepareStatement(GET_ALL_COLUMNS);
				
				logger.info(GET_ALL_COLUMNS);
				
				rs = ps.executeQuery();
				while(rs.next())
				{
					ColumnDto aDto = new ColumnDto();
					aDto.setColumnId(rs.getInt("COL_ID"));
					aDto.setColumnName(rs.getString("COL_NAME"));

					columnsList.add(aDto);
				}
			}
			catch(Exception e)
			{
				e.printStackTrace();
				throw new DAOException("Exception occured while executing getAllColumns :  "+ e.getMessage(),e);
			}
			finally
			{
				try 
				{
					//DBConnection.releaseResources(con, ps, rs);
				}
				catch (Exception e) 
				{				
					throw new DAOException(e.getMessage(), e);
				}
			}
			return columnsList;
		}
		
		public int addDynamicReport(String reportName) throws DAOException
		{			
			logger.info("Inside addDynamicReport method");
			
			final String GET_REPORT_ID = "Select MAX(REPORT_ID)+1 FROM DYNAMIC_REPORT_MSTR  ";
			final String INSERT_NEW_REPORT = "INSERT INTO DYNAMIC_REPORT_MSTR(REPORT_ID, REPORT_NAME, REPORT_STATUS) VALUES(?, ?, 'A')";
			Connection con = null;
			PreparedStatement ps = null;
			ResultSet rs = null;

			PreparedStatement ps2 = null;
			
			int reportId = -1;
			
			try
			{
				con = DBConnection.getDBConnection();
				ps = con.prepareStatement(GET_REPORT_ID);
				
				logger.info(GET_REPORT_ID);
				
				rs = ps.executeQuery();
				while(rs.next())
				{
					reportId = rs.getInt(1);
				}
				
				ps2 = con.prepareStatement(INSERT_NEW_REPORT);
				ps2.setInt(1, reportId);
				ps2.setString(2, reportName);
				
				ps2.executeUpdate();
			}
			catch(Exception e)
			{
				e.printStackTrace();
				throw new DAOException("Exception occured while executing addDynamicReport :  "+ e.getMessage(),e);
			}
			finally
			{
				try 
				{
					//DBConnection.releaseResources(con, ps, rs);
				}
				catch (Exception e) 
				{				
					throw new DAOException(e.getMessage(), e);
				}
			}
			
			return reportId;
		}
		
		
		/**
		 * 
		 */
		public boolean isReportExist(String reportName) throws DAOException
		{			
			logger.info("Inside isReportExist method");
			
			final String REPORT_EXIST = "SELECT * FROM RPT_CONFIGURATION WHERE REPORT_NAME = ? AND STATUS IN ('A','H')  ";

			Connection con = null;
			PreparedStatement ps = null;
			ResultSet rs = null;
			
			try
			{
				con = DBConnection.getDBConnection();
				ps = con.prepareStatement(REPORT_EXIST);
				ps.setString(1, reportName);
				
				logger.info(REPORT_EXIST);
				
				rs = ps.executeQuery();
				if(rs.next())
				{
					return true;
				}
			}
			catch(Exception e)
			{
				e.printStackTrace();
				throw new DAOException("Exception occured while executing isReportExist :  "+ e.getMessage(),e);
			}
			finally
			{
				try 
				{
					//DBConnection.releaseResources(con, ps, rs);
				}
				catch (Exception e) 
				{				
					throw new DAOException(e.getMessage(), e);
				}
			}
			
			return false;
		}


		
		public void deleteReportConfiguration(String reportConfigId) throws DAOException
		{			
			logger.info("Inside deleteReportConfiguration method");
			
			final String DELETE_RPT_CONFIGURATION = "UPDATE RPT_CONFIGURATION SET STATUS='D' WHERE REPORT_CONFIGURATION_ID=?";

			Connection con = null;
			PreparedStatement ps = null;
			ResultSet rs = null;
			
			try
			{
				con = DBConnection.getDBConnection();
				ps = con.prepareStatement(DELETE_RPT_CONFIGURATION);
				ps.setString(1, reportConfigId);
				
				logger.info(DELETE_RPT_CONFIGURATION);
				
				ps.executeUpdate();
				
			}
			catch(Exception e)
			{
				e.printStackTrace();
				throw new DAOException("Exception occured while executing deleteReportConfiguration :  "+ e.getMessage(),e);
			}
			finally
			{
				try 
				{
					//DBConnection.releaseResources(con, ps, rs);
				}
				catch (Exception e) 
				{				
					throw new DAOException(e.getMessage(), e);
				}
			}
			logger.info("Exiting deleteReportConfiguration method");
		}
		
		public String getReportNameFromReportId(int reportId) throws DAOException
		{			
			logger.info("Inside getReportNameFromReportId method");
			
			final String GET_DYNAMIC_REPORT_NAME = "SELECT REPORT_NAME FROM DYNAMIC_REPORT_MSTR WHERE REPORT_ID=?  ";

			Connection con = null;
			PreparedStatement ps = null;
			ResultSet rs = null;
			
			try
			{
				con = DBConnection.getDBConnection();
				ps = con.prepareStatement(GET_DYNAMIC_REPORT_NAME);
				ps.setInt(1, reportId);
				
				logger.info(GET_DYNAMIC_REPORT_NAME);
				
				rs = ps.executeQuery();
				
				if(rs.next())
				{
					return rs.getString("REPORT_NAME");
				}
				
			}
			catch(Exception e)
			{
				e.printStackTrace();
				throw new DAOException("Exception occured while executing deleteReportConfiguration :  "+ e.getMessage(),e);
			}
			finally
			{
				try 
				{
					//DBConnection.releaseResources(con, ps, rs);
				}
				catch (Exception e) 
				{				
					throw new DAOException(e.getMessage(), e);
				}
			}
			
			return null;
		}
		
		public void deleteReport(int reportId) throws DAOException
		{			
			logger.info("Inside deleteReport method");
			
			final String DELETE_REPORT = "UPDATE DYNAMIC_REPORT_MSTR SET REPORT_STATUS='D' WHERE REPORT_ID=?";

			Connection con = null;
			PreparedStatement ps = null;
			ResultSet rs = null;
			
			try
			{
				con = DBConnection.getDBConnection();
				ps = con.prepareStatement(DELETE_REPORT);
				ps.setInt(1, reportId);
				
				logger.info(DELETE_REPORT);
				
				ps.executeUpdate();
				
			}
			catch(Exception e)
			{
				e.printStackTrace();
				throw new DAOException("Exception occured while executing deleteReport :  "+ e.getMessage(),e);
			}
			finally
			{
				try 
				{
					//DBConnection.releaseResources(con, ps, rs);
				}
				catch (Exception e) 
				{				
					throw new DAOException(e.getMessage(), e);
				}
			}
			logger.info("Exiting deleteReport method");
		}			public String getSource(String alert) throws DAOException
		{
			Connection con = null;
			PreparedStatement ps = null;
			ResultSet rs = null;
			String source="";
			
			try {
				con = DBConnection.getDBConnection();
				ps = con.prepareStatement(SQL_SELECT_ALERT_SOURCE);
				//System.out.println("alert :"+alert);
				
				ps.setInt(1, Integer.parseInt(alert));
				rs = ps.executeQuery();
				while(rs.next()) {
					
					source=rs.getString("SOURCE_TYPE");
					//System.out.println("dao impl"+source);
				return source;
				}
			} catch (Exception e) {
				throw new DAOException("Exception occured :  "+ e.getMessage(),e);
			} finally {
				try {
					//DBConnection.releaseResources(con, ps, rs);
				} catch (Exception e) {				
					throw new DAOException(e.getMessage(), e);
				}
			}
			return source;	
		}
		
		public int getProductId(long leadId) throws DAOException {
			Connection con = null;
			PreparedStatement ps = null;
			ResultSet rs = null;
			String sql = "SELECT PRODUCT_LOB_ID FROM LEAD_PROSPECT_DETAIL WHERE LEAD_ID =?  ";
			int productLobId=0;
			
			try {
				con = DBConnection.getDBConnection();
				ps = con.prepareStatement(sql);
				ps.setLong(1,leadId);
				rs = ps.executeQuery();
			
				while(rs.next()) { 
					 productLobId = rs.getInt("PRODUCT_LOB_ID");
					
				}
				
			//	System.out.println("\n\n\n productLobId   "+productLobId);

				
			} catch (Exception e) {
				e.printStackTrace();
				throw new DAOException("Exception occured in getProductLobId :  "+ e.getMessage(),e);
			} finally {
				try {
					//DBConnection.releaseResources(con, ps, rs);
				} catch (Exception e) {				
					throw new DAOException(e.getMessage(), e);
				}
			}
			return productLobId;
		}
		
		
		public int getProduct(long leadId) throws DAOException {
			Connection con = null;
			PreparedStatement ps = null;
			ResultSet rs = null;
			String sql = "SELECT PRODUCT_ID FROM LEAD_DATA WHERE LEAD_ID =?  ";
			int productLobId=0;
			
			try {
				con = DBConnection.getDBConnection();
				ps = con.prepareStatement(sql);
				ps.setLong(1,leadId);
				rs = ps.executeQuery();
			
				while(rs.next()) { 
					 productLobId = rs.getInt("PRODUCT_ID");
					
				}
				
			//	System.out.println("\n\n\n productLobId   "+productLobId);

				
			} catch (Exception e) {
				e.printStackTrace();
				throw new DAOException("Exception occured in getProductLobId :  "+ e.getMessage(),e);
			} finally {
				try {
					//DBConnection.releaseResources(con, ps, rs);
				} catch (Exception e) {				
					throw new DAOException(e.getMessage(), e);
				}
			}
			return productLobId;
		}
//added by Nancy
		
		public  ArrayList<LeadStatusDTO> getLeadSubStatusList(int statusId,int lobId) throws DAOException
		{
			
			Connection con = null;
			PreparedStatement ps = null;
			ResultSet rs = null;
			ArrayList<LeadStatusDTO> leadSubStatusList = new ArrayList<LeadStatusDTO>();
			LeadStatusDTO dto = null;
			try {
				con = DBConnection.getDBConnection();
				ps = con.prepareStatement(SQL_SELECT_LEAD_SUB_STATUS);
				ps.setInt(1, statusId);
				ps.setInt(2, lobId);
				rs = ps.executeQuery();
				while(rs.next()) {
					dto = new LeadStatusDTO();
					dto.setSubStatusCode(rs.getInt("UNIQUE_ID"));
					dto.setSubStatusId(rs.getInt("SUB_STATUS_ID"));
					dto.setLeadSubStatus(rs.getString("SUB_STATUS"));
					dto.setLeadStatusId(rs.getInt("LEAD_STATUS_ID"));
					dto.setLeadStatus(rs.getString("LEAD_STATUS"));
					dto.setLeadSubStatusDisplay(rs.getString("LEAD_SUB_STATUS_DISPLAY"));
					dto.setLobId(rs.getInt("PRODUCT_LOB_ID"));
					dto.setLobName(rs.getString("PRODUCT_LOB"));
					
					leadSubStatusList.add(dto);
				}
			} catch (Exception e) {
				e.printStackTrace();
				throw new DAOException("Exception occured while getting Lead Sub Status list :  "+ e.getMessage(),e);
			} finally {
				try {
					//DBConnection.releaseResources(con, ps, rs);
				} catch (Exception e) {				
					throw new DAOException(e.getMessage(), e);
				}			}
			return leadSubStatusList;
		}
		
		public  LeadStatusDTO getLeadSubStatusList(int statusId,int lobId,int subStatusId) throws DAOException
		{
			
			Connection con = null;
			PreparedStatement ps = null;
			ResultSet rs = null;
			
			LeadStatusDTO dto = null;
			try {
				con = DBConnection.getDBConnection();
				ps = con.prepareStatement(SQL_SELECT_LEAD_SUB_STATUS1);
				ps.setInt(1, statusId);
				ps.setInt(2, lobId);
				ps.setInt(3, subStatusId);
				rs = ps.executeQuery();
				while(rs.next()) {
					dto = new LeadStatusDTO();
					dto.setSubStatusCode(rs.getInt("UNIQUE_ID"));
					dto.setSubStatusId(rs.getInt("SUB_STATUS_ID"));
					dto.setLeadSubStatus(rs.getString("SUB_STATUS"));
					dto.setLeadStatusId(rs.getInt("LEAD_STATUS_ID"));
					dto.setLeadStatus(rs.getString("LEAD_STATUS"));
					dto.setLeadSubStatusDisplay(rs.getString("LEAD_SUB_STATUS_DISPLAY"));
					dto.setProductLobId(rs.getInt("PRODUCT_LOB_ID"));
					dto.setLobName(rs.getString("PRODUCT_LOB"));
					
				}
			} catch (Exception e) {
				e.printStackTrace();
				throw new DAOException("Exception occured while getting Lead Sub Status list :  "+ e.getMessage(),e);
			} finally {
				try {
					//DBConnection.releaseResources(con, ps, rs);
				} catch (Exception e) {				
					throw new DAOException(e.getMessage(), e);
				}			}
			return dto;
		}
		public  LeadStatusDTO getLeadSubSubStatusList(int statusId,int lobId,int subStatusId,int subSubStatusId) throws DAOException
		{
			
			Connection con = null;
			PreparedStatement ps = null;
			ResultSet rs = null;
			
			LeadStatusDTO dto = null;
			try {
				con = DBConnection.getDBConnection();
				ps = con.prepareStatement(SQL_SELECT_LEAD_SUB_SUB_STATUS1);
				ps.setInt(2, statusId);
				ps.setInt(1, lobId);
				ps.setInt(3, subStatusId);
				ps.setInt(4,subSubStatusId);
				rs = ps.executeQuery();
				while(rs.next()) {
					dto = new LeadStatusDTO();
					dto.setSubStatusCode(rs.getInt("UNIQUE_ID"));
					dto.setSubStatusId(rs.getInt("SUB_STATUS_ID"));
					dto.setLeadSubStatus(rs.getString("SUB_STATUS"));
					dto.setLeadStatusId(rs.getInt("LEAD_STATUS_ID"));
					dto.setLeadSubSubStatusId(rs.getInt("SUB_SUB_STATUS_ID"));
					dto.setLeadSubSubStatus(rs.getString("SUB_SUB_STATUS"));
					dto.setLeadSubSubStatusDisplay(rs.getString("LEAD_SUB_SUB_STATUS_DISPLAY"));
					dto.setLeadStatus(rs.getString("LEAD_STATUS"));
					dto.setLobId(rs.getInt("PRODUCT_LOB_ID"));
					dto.setLobName(rs.getString("PRODUCT_LOB"));
					
				}
			} catch (Exception e) {
				e.printStackTrace();
				throw new DAOException("Exception occured while getting Lead Sub Sub Status list :  "+ e.getMessage(),e);
			} finally {
				try {
					//DBConnection.releaseResources(con, ps, rs);
				} catch (Exception e) {				
					throw new DAOException(e.getMessage(), e);
				}			}
			return dto;
		}
		
		
		public LeadStatusDTO addSubStatus(int statusId,int lobId,String subStatusName) throws DAOException
		{
			
			Connection con = null;
			PreparedStatement ps = null;
			PreparedStatement pstmt=null;
			PreparedStatement pstmt1=null;
			ResultSet rs = null;
			ResultSet rs1 = null;
			ResultSet rs12 = null;
			LeadStatusDTO dto = null;
			String msg="";
		
			int subStatusId=getSubStatusId(statusId);
			try {
				//checking if name entered already exists:
				con = DBConnection.getDBConnection();
				StringBuffer select_existing_subStatus_query = new StringBuffer("select * from LEAD_SUB_STATUS where LEAD_STATUS_ID = ? AND PRODUCT_LOB_ID=? AND SUB_STATUS=?  ");
				StringBuffer select_existing_subStatusId_query = new StringBuffer("select * from LEAD_SUB_STATUS where LEAD_STATUS_ID = ? AND PRODUCT_LOB_ID=? AND SUB_STATUS_ID=?  ");
				pstmt = con.prepareStatement(select_existing_subStatus_query.toString());
				
	    		pstmt.setInt(1, statusId);
	    		pstmt.setInt(2, lobId);
	    		pstmt.setString(3, subStatusName);
	    		
	    		rs = pstmt.executeQuery();
	    		
	    		
				if(!rs.next()) // same sub status name not there
				{
					
					//generating subStatusId:
					pstmt1 = con.prepareStatement(select_existing_subStatusId_query.toString());
					
					pstmt1.setInt(1, statusId);
		    		pstmt1.setInt(2, lobId);
		    		pstmt1.setInt(3, subStatusId);
		    		rs12 = pstmt1.executeQuery();
		    		
		    		if(!rs12.next())
		    		{
		    			
					ps = con.prepareStatement(SQL_INSERT_LEAD_SUB_STATUS);
					ps.setInt(1, subStatusId);
					ps.setString(2, subStatusName);
					ps.setInt(3, statusId);
					ps.setString(4,subStatusName);
					ps.setInt(5, lobId);
					ps.executeUpdate();
					dto=new LeadStatusDTO();
					dto.setSubStatusId(subStatusId);
					msg="0"+ "StatusId:"+statusId+", SubStatusId:"+ subStatusId;
					dto.setMessage(msg);
					
		    		}
				} 
			
				else
				{
					dto=new LeadStatusDTO();
					int SubStatusId= Integer.parseInt(rs.getString("SUB_STATUS_ID"));
					dto.setSubStatusId(SubStatusId);
					logger.info("Sub Status Already Available: "+SubStatusId);
					msg="1"+ "StatusId:"+statusId+", SubStatusId:"+ subStatusId;
					
					
					dto.setMessage(msg);
					}
			} catch (Exception e) {
				e.printStackTrace();
				throw new DAOException("Exception occured while getting Lead Sub Status list :  "+ e.getMessage(),e);
			} finally {
				try {
					//DBConnection.releaseResources(con, ps, rs);
				} catch (Exception e) {				
					throw new DAOException(e.getMessage(), e);
				}			}
			return dto;
		}
		public LeadStatusDTO addSubSubStatus(int statusId,int productLobId,int subStatusId,String leadSubSubStatus) throws DAOException
		{
			
			Connection con = null;
			PreparedStatement ps = null;
			PreparedStatement pstmt=null;
			PreparedStatement pstmt1=null;
			PreparedStatement ps1=null;
			ResultSet rs = null;
			ResultSet rs1 = null;
			ResultSet rs12 = null;
			ResultSet r4=null;
			LeadStatusDTO dto = null;
			String msg="";
			
			int subSubStatusId=getSubSubStatusId();
			
			try {
				//checking if name entered already exists:
				con = DBConnection.getDBConnection();
				StringBuffer select_existing_subSubStatus_query = new StringBuffer("SELECT * FROM LEAD_SUB_SUB_STATUS WHERE SUB_SUB_STATUS=? AND LEAD_SUB_STATUS_ID=? AND SUBSTATUS_CODE=(SELECT UNIQUE_ID FROM LEAD_SUB_STATUS WHERE LEAD_STATUS_ID=? AND SUB_STATUS_ID=? AND PRODUCT_LOB_ID=?)");
				StringBuffer select_existing_subSubStatusId_query = new StringBuffer("SELECT * FROM LEAD_SUB_SUB_STATUS where SUB_SUB_STATUS_ID=? AND LEAD_SUB_STATUS_ID=? AND SUBSTATUS_CODE=(SELECT UNIQUE_ID FROM LEAD_SUB_STATUS WHERE LEAD_STATUS_ID=? AND SUB_STATUS_ID=? AND PRODUCT_LOB_ID=?)");
				StringBuffer select_subStatusCode= new StringBuffer("SELECT UNIQUE_ID FROM LEAD_SUB_STATUS WHERE LEAD_STATUS_ID=? AND SUB_STATUS_ID=? AND PRODUCT_LOB_ID=?");
				pstmt = con.prepareStatement(select_existing_subSubStatus_query.toString());
				
	    		pstmt.setString(1, leadSubSubStatus);
	    		pstmt.setInt(2, subStatusId);
	    		pstmt.setInt(3, statusId);
	    		
	    		pstmt.setInt(4, subStatusId);
	    		pstmt.setInt(5, productLobId);
	    		
	    		rs = pstmt.executeQuery();
	    		
				if(!rs.next()) // same sub status name not there
				{
					pstmt1 = con.prepareStatement(select_existing_subSubStatusId_query.toString());
					pstmt1.setInt(1, subSubStatusId);
					pstmt1.setInt(2, subStatusId);
		    		pstmt1.setInt(3, statusId);
		    		pstmt1.setInt(4, subStatusId);
		    		pstmt1.setInt(5, productLobId);
		    		rs12 = pstmt1.executeQuery();
		    		
		    		if(!rs12.next())
		    		{
		    			ps1=con.prepareStatement(select_subStatusCode.toString());
		    			ps1.setInt(1, statusId);
		    			ps1.setInt(2, subStatusId);
		    			ps1.setInt(3, productLobId);
		    			r4=ps1.executeQuery();
		    			int subStatusCode=0;
		    			if(r4.next())
		    				subStatusCode=r4.getInt("UNIQUE_ID");
					ps = con.prepareStatement(SQL_INSERT_LEAD_SUB_SUB_STATUS);
					ps.setInt(1, subSubStatusId);
					ps.setString(2, leadSubSubStatus);
					ps.setInt(3, subStatusId);
					ps.setString(4,leadSubSubStatus);
					ps.setInt(5, subStatusCode);
					ps.executeUpdate();
					dto=new LeadStatusDTO();
				    dto.setLeadSubSubStatusId(subSubStatusId);
				    msg="0"+ "StatusId:"+statusId+", SubStatusId:"+ subStatusId+",SubSubStatusId:"+subSubStatusId;
				    dto.setMessage(msg);
										
				}
				}			
				else
				{
					dto=new LeadStatusDTO();
					int SubSubStatusId= Integer.parseInt(rs.getString("SUB_SUB_STATUS_ID"));
					dto.setLeadSubSubStatusId(SubSubStatusId);
					logger.info("SubSub Status Already Available: "+SubSubStatusId);
					msg="1"+ "StatusId:"+statusId+", SubStatusId:"+ subStatusId+",SubSubStatusId:"+subSubStatusId;
					dto.setMessage(msg);
					}
			} catch (Exception e) {
				e.printStackTrace();
				throw new DAOException("Exception occured while getting Lead SubSub Status list :  "+ e.getMessage(),e);
			} finally {
				try {
					//DBConnection.releaseResources(con, ps, rs);
				} catch (Exception e) {				
					throw new DAOException(e.getMessage(), e);
				}			}
			return dto;
		}
		
		String SELECT_SEQ_SUBSTATUS_ID = "SELECT NEXTVAL FOR SEQ_LEAD_SUBSTATUS AS SEQ_ID FROM sysibm.SYSDUMMY1";
		public  int getSubStatusId(int statusId) throws DAOException
		{
			int subStatusId=0;
			int r=0;
			Connection con = null;
			PreparedStatement ps = null;
			ResultSet rs = null;
			ArrayList<LeadStatusDTO> leadList = new ArrayList<LeadStatusDTO>();
			LeadStatusDTO dto = null;
			try {
				con = DBConnection.getDBConnection();
				ps = con.prepareStatement(SELECT_SEQ_SUBSTATUS_ID);
				rs = ps.executeQuery();
				//rs.next();
				if(rs.next())
				{
					//System.out.println(rs.getInt("SEQ_ID")+"-"+statusId+"-"+subStatusId);
					subStatusId = Integer.parseInt((statusId/100)+""+ rs.getInt("SEQ_ID"));
					
				}
			} catch (Exception e) {
				e.printStackTrace();
				throw new DAOException("Exception occured while getting subStatusId :  "+ e.getMessage(),e);
			} finally {
				try {
					//DBConnection.releaseResources(con, ps, rs);
				} catch (Exception e) {				
					throw new DAOException(e.getMessage(), e);
				}
			}
			return subStatusId;
		}
		String SELECT_SEQ_SUBSUBSTATUS_ID ="SELECT NEXTVAL FOR SEQ_LEAD_SUBSUBSTATUS AS SEQ_ID FROM sysibm.SYSDUMMY1";
		public  int getSubSubStatusId() throws DAOException
		{
			int subSubStatusId=0;
			int r=0;
			Connection con = null;
			PreparedStatement ps = null;
			ResultSet rs = null;
			ArrayList<LeadStatusDTO> leadList = new ArrayList<LeadStatusDTO>();
			LeadStatusDTO dto = null;
			try {
				con = DBConnection.getDBConnection();
				ps = con.prepareStatement(SELECT_SEQ_SUBSUBSTATUS_ID);
				rs = ps.executeQuery();
				//rs.next();
				if(rs.next())
					subSubStatusId = rs.getInt("SEQ_ID");
			} catch (Exception e) {
				e.printStackTrace();
				throw new DAOException("Exception occured while getting subStatusId :  "+ e.getMessage(),e);
			} finally {
				try {
					//DBConnection.releaseResources(con, ps, rs);
				} catch (Exception e) {				
					throw new DAOException(e.getMessage(), e);
				}
			}
			return subSubStatusId;
		}
		
		public  ArrayList<LeadStatusDTO> getLeadSubSubStatusList(int statusId,int prodLobId,int subStatusId) throws DAOException
		{
			Connection con = null;
			PreparedStatement ps = null;
			ResultSet rs = null;
			ArrayList<LeadStatusDTO> leadSubSubStatusList = new ArrayList<LeadStatusDTO>();
			LeadStatusDTO dto = null;
			try {
				con = DBConnection.getDBConnection();
				ps = con.prepareStatement(SQL_SELECT_LEAD_SUB_SUB_STATUS);
				ps.setInt(1, prodLobId);
				ps.setInt(2, statusId);
				ps.setInt(3, subStatusId);
				rs = ps.executeQuery();
				
				while(rs.next()) {
					dto = new LeadStatusDTO();
					
					dto.setLeadSubSubStatusId(rs.getInt("SUB_SUB_STATUS_ID"));
					
					dto.setLeadSubSubStatus(rs.getString("SUB_SUB_STATUS"));
					dto.setSubStatusId(rs.getInt("SUB_STATUS_ID"));
					dto.setLeadSubSubStatusDisplay(rs.getString("LEAD_SUB_SUB_STATUS_DISPLAY"));
					dto.setSubStatusCode(rs.getInt("UNIQUE_ID"));
					dto.setSubStatusId(rs.getInt("SUB_STATUS_ID"));
					dto.setLeadSubStatus(rs.getString("SUB_STATUS"));
					dto.setLeadStatusId(rs.getInt("LEAD_STATUS_ID"));
					dto.setLeadStatus(rs.getString("LEAD_STATUS"));
					dto.setLobId(rs.getInt("PRODUCT_LOB_ID"));
					dto.setLobName(rs.getString("PRODUCT_LOB"));
					leadSubSubStatusList.add(dto);
					
				}
			} catch (Exception e) {
				e.printStackTrace();
				throw new DAOException("Exception occured while getting Lead SubSub Status list :  "+ e.getMessage(),e);
			} finally {
				try {
					//DBConnection.releaseResources(con, ps, rs);
				} catch (Exception e) {				
					throw new DAOException(e.getMessage(), e);
				}
			}
			return leadSubSubStatusList;
		}
		
		//added by Nancy
		public  int getSubStatusCode(int statusId,int subStatusId,int lobId) throws DAOException
		{
			Connection con = null;
			PreparedStatement ps = null;
			ResultSet rs = null;
			int subStatusCode = 0;
			try {
				con = DBConnection.getDBConnection();
				ps = con.prepareStatement(SQL_SELECT_LEAD_SUB_STATUSCODE);
				ps.setInt(1, statusId);
				ps.setInt(2, subStatusId);
				ps.setInt(3, lobId);
				rs = ps.executeQuery();
				while(rs.next()) {
					
					subStatusCode=rs.getInt("UNIQUE_ID");
					
				}
			} catch (Exception e) {
				e.printStackTrace();
				throw new DAOException("Exception occured while getting Lead SubStatusCode :  "+ e.getMessage(),e);
			} finally {
				try {
					//DBConnection.releaseResources(con, ps, rs);
				} catch (Exception e) {				
					throw new DAOException(e.getMessage(), e);
				}
			}
			return subStatusCode;
		}
	// end of changes by Nancy	
		
		public ArrayList<ProductDTO> getproductForLob(int productLobId)
				throws DAOException {
			Connection con = null;
			PreparedStatement ps = null;
			ResultSet rs = null;
			ArrayList<ProductDTO> productList = new ArrayList<ProductDTO>();
			ProductDTO dto = null;
			
			//private static final String SQL_SELECT_RSUCITY_FOR_CIRCLE="SELECT RS.RSU_ID,RS.RSU_CODE FROM RSU_MSTR RS,CITY_ZONE_MSTR CZM,CITY_MSTR CMS,ZONE_MSTR Z,CIRCLE_MSTR CM WHERE CM.CITY_CODE=? AND CM.CIRCLE_MSTR_ID=? AND CMS.ZONE_CODE=Z.ZONE_CODE AND CMS.CITY_CODE=CZM.CITY_CODE AND CZM.CITY_ZONE_CODE=RS.CITY_ZONE_CODE  ";
			try {
				
				con = DBConnection.getDBConnection();
				ps = con.prepareStatement(SQL_SELECT_PRODUCT_LOB);
				
				
				ps.setInt(1, productLobId);
				
				rs = ps.executeQuery();
				while(rs.next()) {
					dto = new ProductDTO();
					dto.setProductId(rs.getInt("PRODUCT_ID"));
					dto.setProductName(rs.getString("PRODUCT_NAME"));
					productList.add(dto);
				}
			} catch (Exception e) {
				e.printStackTrace();
				throw new DAOException("Exception occured while getting city list for Circle:  "+ e.getMessage(),e);
			} finally {
				try {
					////DBConnection.releaseResources(con, ps, rs);
				} catch (Exception e) {				
					throw new DAOException(e.getMessage(), e);
				}
			}
			return productList;
		}
	
	
		
		public ArrayList<ProductDTO> getFourgProductList() throws DAOException {

			Connection con = null;
			PreparedStatement ps = null;
			ResultSet rs = null;
			ArrayList<ProductDTO> fourGProductsList = new ArrayList<ProductDTO>();
			ProductDTO dto = null;
			try {
				con = DBConnection.getDBConnection();
				ps = con.prepareStatement(SQL_SELECT_FOURG_PRODUCTS);
				rs = ps.executeQuery();
				while(rs.next()) {
					dto = new ProductDTO();
					dto.setProductId(rs.getInt("PRODUCT_ID"));
					dto.setProductName(rs.getString("PRODUCT_NAME"));
					dto.setProductLobId(rs.getInt("PRODUCT_LOB_ID"));
					fourGProductsList.add(dto);
				}
			} catch (Exception e) {
				throw new DAOException("Exception occured while getting Telemedia Product list :  "+ e.getMessage(),e);
				
			} finally {
				try {
					//DBConnection.releaseResources(con, ps, rs);
				} catch (Exception e) {				
					throw new DAOException(e.getMessage(), e);
				}
			}
			return fourGProductsList;

			}
		
		
		public int getProductIdByMobile(long mobileNumber) throws DAOException {
			Connection con = null;
			PreparedStatement ps = null;
			ResultSet rs = null;
			String sql = "SELECT distinct PM.PRODUCT_LOB_ID AS PRODUCT_LOB_ID FROM LEAD_DATA LD, LEAD_PROSPECT_CUSTOMER LPC , PRODUCT_MSTR PM, CIRCLE_MSTR CM ,LEAD_PROSPECT_DETAIL LPD WHERE LPC.PROSPECT_MOBILE_NUMBER = ? AND LD.PROSPECT_ID = LPC.PROSPECT_ID AND LD.LEAD_PROSPECT_ID = LPD.LEAD_PROSPECT_ID AND LD.PRODUCT_ID = PM.PRODUCT_ID AND LPD.CIRCLE_ID = CM.CIRCLE_ID AND LPD.PRODUCT_LOB_ID=CM.LOB_ID  "; 

			int productLobId=0;
			
			try {
				con = DBConnection.getDBConnection();
				ps = con.prepareStatement(sql);
				ps.setLong(1,mobileNumber);
				rs = ps.executeQuery();
			
				while(rs.next()) { 
					 productLobId = rs.getInt("PRODUCT_LOB_ID");
					
				}
				
			} catch (Exception e) {
				e.printStackTrace();
				throw new DAOException("Exception occured in getProductLobId :  "+ e.getMessage(),e);
			} finally {
				try {
					//DBConnection.releaseResources(con, ps, rs);
				} catch (Exception e) {				
					throw new DAOException(e.getMessage(), e);
				}
			}
			return productLobId;
		}
		
		public int getProductIdByTid(Long tid) throws DAOException {
			Connection con = null;
			PreparedStatement ps = null;
			ResultSet rs = null;
			String sql = "SELECT PM.PRODUCT_LOB_ID AS PRODUCT_LOB_ID FROM LEAD_DATA LD, LEAD_PROSPECT_CUSTOMER LPC, PRODUCT_MSTR PM, CIRCLE_MSTR CM ,LEAD_PROSPECT_DETAIL LPD,LEAD_DETAILS LDT WHERE LDT.LEAD_CAPTURED_DATA_ID =? AND LD.PROSPECT_ID = LPC.PROSPECT_ID AND LD.LEAD_PROSPECT_ID = LPD.LEAD_PROSPECT_ID AND LD.PRODUCT_ID = PM.PRODUCT_ID AND LPD.CIRCLE_ID = CM.CIRCLE_ID AND LPD.PRODUCT_LOB_ID=CM.LOB_ID AND LD.LEAD_ID=LDT.LEAD_ID   ";

			int productLobId=0;
			
			try {
				con = DBConnection.getDBConnection();
				ps = con.prepareStatement(sql);
				ps.setLong(1,tid);
				rs = ps.executeQuery();
			
				while(rs.next()) { 
					 productLobId = rs.getInt("PRODUCT_LOB_ID");
					
				}
				
			} catch (Exception e) {
				e.printStackTrace();
				throw new DAOException("Exception occured in getProductLobId :  "+ e.getMessage(),e);
			} finally {
				try {
					//DBConnection.releaseResources(con, ps, rs);
				} catch (Exception e) {				
					throw new DAOException(e.getMessage(), e);
				}
			}
			return productLobId;
		}
		
		
		public ArrayList<PINCodeDTO>getPinCodeListFor4G () throws DAOException
		{
			Connection con = null;
			PreparedStatement ps = null;
			ResultSet rs = null;
			String sql = "SELECT * FROM PINCODE_MSTR WHERE CITY_ZONE_CODE in(select CITY_ZONE_CODE from CITY_ZONE_MSTR where CITY_CODE in (select city_code from CITY_MSTR where ZONE_CODE in(select zone_code from ZONE_MSTR where CIRCLE_MSTR_ID in (select CIRCLE_MSTR_ID from CIRCLE_MSTR where LOB_ID=24))))  ";
			ArrayList<PINCodeDTO> pincode= new ArrayList<PINCodeDTO>();
			PINCodeDTO dto=null;
			
			try {
				con = DBConnection.getDBConnection();
				ps = con.prepareStatement(sql);
				rs = ps.executeQuery();
			
				while(rs.next()) {
					dto = new PINCodeDTO();
					dto.setPinCode(rs.getString("PINCODE"));
					pincode.add(dto);
				}
				
			} catch (Exception e) {
				e.printStackTrace();
				throw new DAOException("Exception occured in getProductLobId :  "+ e.getMessage(),e);
			} finally {
				try {
					//DBConnection.releaseResources(con, ps, rs);
				} catch (Exception e) {				
					throw new DAOException(e.getMessage(), e);
				}
			}
			return pincode;
		}
	
		
		public int getCircleMstrIdValue(int circleId,int lobId) throws DAOException {
			Connection con = null;
			PreparedStatement ps = null;
			ResultSet rs = null;
			int circleMstrId = -1;
			
			try {
				con = DBConnection.getDBConnection();
				ps = con.prepareStatement(SQL_GET_CIRCLE_MSTR_ID);
				ps.setInt(1,circleId);
				ps.setInt(2,lobId);
				rs = ps.executeQuery();
				
				if(rs.next()) 
					circleMstrId = rs.getInt("CIRCLE_MSTR_ID");
				
			} catch (Exception e) {
				e.printStackTrace();
			} finally {
				try {
					//DBConnection.releaseResources(con, ps, rs);
				} catch (Exception e) {				
					e.printStackTrace();
				}
			}
			return circleMstrId;
		}
//added by satish
		
		public NoneditablefieldsDTO getNonEditableFiedls(String leadID)throws DAOException{
			Connection con = null;
			PreparedStatement ps = null;
			ResultSet rs = null;
	
			NoneditablefieldsDTO dto=null;
			try{
				
				System.out.println("\n\n\ninside noneditable method\n\n\n ");
				con = DBConnection.getDBConnection();
				ps = con.prepareStatement(NON_EDITABLE_FIELDS_LIST);
				ps.setString(1,leadID);
				rs = ps.executeQuery();
				System.out.println("\n\n\ninside noneditable method\n\n\n ");
				while(rs.next()) {
					
					System.out.println("\n\n\ndfjsdsddsf::::"+rs.getString("SIM_NO")+"\n\n\n");
					dto = new NoneditablefieldsDTO();
					
					if(rs.getString("SIM_NO")!=null && rs.getString("SIM_NO").length()>0)
					{
					dto.setSimno(rs.getString("SIM_NO"));
					}
					
					if(rs.getString("CUSTOMER_SEGMENT")!=null && rs.getString("CUSTOMER_SEGMENT").length()>0)
					{
					dto.setCustomer_Segment(rs.getString("CUSTOMER_SEGMENT"));
					}
					
					if(rs.getString("IDENTITY_PROOF_ID")!=null && rs.getString("IDENTITY_PROOF_ID").length()>0)
					{
					dto.setIdentityProofID(rs.getString("IDENTITY_PROOF_ID"));
					}

					if(rs.getString("UPC")!=null && rs.getString("UPC").length()>0)
					{
					dto.setUpc(rs.getString("UPC"));
					}
					
					if(rs.getString("UPC_GEN_DATE")!=null && rs.getString("UPC_GEN_DATE").length()>0)
					{
					dto.setUpcGenDate(rs.getString("UPC_GEN_DATE"));
					}
					
					if(rs.getString("EXISTING_PART")!=null && rs.getString("EXISTING_PART").length()>0)
					{
					dto.setExistingpart(rs.getString("EXISTING_PART"));
					}
		
					if(rs.getString("MNP_STATUS")!=null && rs.getString("MNP_STATUS").length()>0)
					{
					dto.setMnpstatus(rs.getString("MNP_STATUS"));
					}
					
					if(rs.getString("PLAN_TYPE")!=null && rs.getString("PLAN_TYPE").length()>0)
					{
					dto.setPlanType(rs.getString("PLAN_TYPE"));
					}
					
					if(rs.getString("GENDER")!=null && rs.getString("GENDER").length()>0)
					{
					dto.setGender(rs.getString("GENDER"));
					}
					
					if(rs.getString("NATIONALITY")!=null && rs.getString("NATIONALITY").length()>0)
					{
					dto.setNationality(rs.getString("NATIONALITY"));
					}
					
					if(rs.getString("IDENTITY_PROOF_TYPE")!=null && rs.getString("IDENTITY_PROOF_TYPE").length()>0)
					{
					dto.setIdentityProofType(rs.getString("IDENTITY_PROOF_TYPE"));
					}
					
					if(rs.getString("PAYMENT_DATE")!=null && rs.getString("PAYMENT_DATE").length()>0)
					{
					dto.setPaymentDate(rs.getString("PAYMENT_DATE"));
					}
					
					if(rs.getString("PREVIOUS_OPERATOR")!=null && rs.getString("PREVIOUS_OPERATOR").length()>0)
					{
					dto.setPreviousoperatorname(rs.getString("PREVIOUS_OPERATOR"));
					}
					System.out.println(rs.getString("PREVIOUS_OPERATOR"));
					if(rs.getString("PREVIOUS_CIRCLE")!=null && rs.getString("PREVIOUS_CIRCLE").length()>0)
					{
					dto.setPreviouscircle(rs.getString("PREVIOUS_CIRCLE"));
					}
					System.out.println(rs.getString("PREVIOUS_CIRCLE"));
					if(rs.getString("DOC_COLLECTED_FLAG")!=null && rs.getString("DOC_COLLECTED_FLAG").length()>0)
					{
					dto.setDocumentCollectedFlag(rs.getString("DOC_COLLECTED_FLAG"));
					}
					
					if(rs.getString("RELATION_NAME")!=null && rs.getString("RELATION_NAME").length()>0)
					{
					dto.setRelationname(rs.getString("RELATION_NAME"));
					}
					System.out.println(rs.getString("RELATION_NAME"));
					}
			}
			catch(Exception e){
				e.printStackTrace();
			}finally {
				try {
					//DBConnection.releaseResources(con, ps, rs);
				} catch (Exception e) {				
					e.printStackTrace();
				}
			}
			
			
			
			return dto;
		}
		
		public ArrayList<LeadDetailsDTO> getPreviousoperatornameList()throws DAOException{
			Connection con = null;
			PreparedStatement ps = null;
			ResultSet rs = null;
			ArrayList<LeadDetailsDTO> PreviousoperatornameList= new ArrayList<LeadDetailsDTO>();
			LeadDetailsDTO dto;
			try{
				con = DBConnection.getDBConnection();
				ps = con.prepareStatement("select distinct PREVIOUS_OPERATOR from LEAD_UPDATE_DATA  ");
				rs = ps.executeQuery();
				while(rs.next()){
					dto=new LeadDetailsDTO();
					dto.setPreviousOperator(rs.getString("PREVIOUS_OPERATOR"));
					PreviousoperatornameList.add(dto);
				}
				
				System.out.println("\n\n\n\n"+PreviousoperatornameList+"\n\n\n\n");
			}catch(Exception e){
				e.printStackTrace();
			}finally {
				try {
					//DBConnection.releaseResources(con, ps, rs);
				} catch (Exception e) {				
					e.printStackTrace();
				}
			}
			
			return PreviousoperatornameList;
		}
		//ended by satish
public ArrayList<AssignmentReportDTO> getApproversList(String olmId) throws DAOException {
			Connection con = null;
			PreparedStatement ps = null;
			ResultSet rs = null;
			ArrayList<AssignmentReportDTO> approverList= new ArrayList<AssignmentReportDTO>();
			AssignmentReportDTO dto=null;
			
			
			try {
				con = DBConnection.getDBConnection();
				ps = con.prepareStatement(GET_APPROVERS_AND_DR_LIST);
				ps.setString(1,olmId);
				rs = ps.executeQuery();
				
				while(rs.next()) {
					dto = new AssignmentReportDTO();
					dto.setL1approver(rs.getString("APPROVER_L1"));
					dto.setL2Approver(rs.getString("APPROVER_L2"));
					dto.setDRList(rs.getString("DRLIST"));
					approverList.add(dto);
				}
				
			} catch (Exception e) {
				e.printStackTrace();
			} finally {
				try {
					//DBConnection.releaseResources(con, ps, rs);
				} catch (Exception e) {				
					e.printStackTrace();
				}
			}
			return approverList;
		}


public boolean isValidOlm(String olmId) throws DAOException {
	// TODO Auto-generated method stub
	
	Connection con = null;
	PreparedStatement ps = null;
	ResultSet rs = null;
	try{
		con=DBConnection.getDBConnection();
		ps=con.prepareStatement("SELECT USER_LOGIN_ID FROM USER_MSTR WHERE USER_LOGIN_ID=? AND STATUS='A'  ");
		ps.setString(1, olmId);
		rs=ps.executeQuery();
		if(rs.next()){
			return true;
		}
	}catch (Exception e) {
		// TODO: handle exception
	}finally{
		//DBConnection.releaseResources(con, ps, rs);
	}
	return false;
		}


public boolean isValidProuct(String product) throws DAOException {
	// TODO Auto-generated method stub
	Connection con = null;
	PreparedStatement ps = null;
	ResultSet rs = null;
	try{
		con=DBConnection.getDBConnection();
		ps=con.prepareStatement("SELECT PM.PRODUCT_ID FROM PRODUCT_MSTR PM, PRODUCT_SYNONYM PS where PM.PRODUCT_ID=PS.PRODUCT_ID and ucase(PM.PRODUCT_NAME)=ucase(?)  ");
		ps.setString(1, product);
		rs=ps.executeQuery();
		if(rs.next()){
			Integer productId=rs.getInt("PRODUCT_ID");
			MasterService masterSrvc=new MasterServiceImpl();
			//System.out.println(productId);
			//System.out.println(ServerPropertyReader.getString("FORWARD_ASSIGN_BULK_PRODUCT"));
			List<String> productsForFwd=Arrays.asList(masterSrvc.getParameterName("NEW_PRODUCT").trim().split(","));
			System.out.println(productsForFwd.size());
			if(productsForFwd.contains(productId.toString())){
				System.out.println("True");
				return true;
			}
		}
	}catch (Exception e) {
		e.printStackTrace();
	}finally{
		//DBConnection.releaseResources(con, ps, rs);
	}
	return false;
	 }


//added by satish
	public ArrayList<AgencyUserDto> getAgencyUserList(String selectedActorId, String selectedLobId,String circleMstrId,UserMstr sessionUserBean) throws DAOException {
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		ArrayList<AgencyUserDto> AgencyUserList = new ArrayList<AgencyUserDto>();
		AgencyUserDto dto = null;
			
	    
		try {
			System.out.println("==============================================================="+sessionUserBean.getUserLoginId()+"=============================="+sessionUserBean.getUserId()+"================================="+selectedLobId+"======================================================================"+circleMstrId);
			con = DBConnection.getDBConnection();
			//ps = con.prepareStatement("SELECT USER_ID,USER_LOGIN_ID FROM lms3.NAS_USER_MSTR WHERE PARENT_ID='2717'");
			ps = con.prepareStatement("SELECT num.USER_ID,num.USER_LOGIN_ID FROM lms3.NAS_USER_MSTR num,lms3.NAS_USER_MAPPING nump WHERE num.USER_LOGIN_ID=nump.USER_LOGIN_ID and num.PARENT_ID=?   and nump.LOB_ID=? and nump.CIRCLE_ID=?");
			

			ps.setString(1, sessionUserBean.getUserId());
			ps.setString(2, selectedLobId);
			ps.setString(3, circleMstrId);
			
			rs = ps.executeQuery();
			while(rs.next()) {
				dto = new AgencyUserDto();
//				dto.setCityId(rs.getString("CITY_ID"));
//				dto.setCityCode(rs.getString("CITY_CODE")); 
//				dto.setCityName(rs.getString("CITY_NAME"));
//				//dto.setCircleId(rs.getInt("CIRCLE_ID"));
//				dto.setZoneCode(rs.getString("ZONE_CODE"));
				dto.setUserId(rs.getString("USER_ID"));
				dto.setUserLoginId(rs.getString("USER_LOGIN_ID"));
				System.out.println("======++++++++++++++++++++++++++++++================================================"+dto.getUserId()+"============+++++++++++++++++++++++++======================="+dto.getUserLoginId());
				AgencyUserList.add(dto);
			}
		} catch (Exception e) {
			throw new DAOException("Exception occured while getting Agencyuser list :  "+ e.getMessage(),e);
		} finally {
			try {
				//DBConnection.releaseResources(con, ps, rs);
			} catch (Exception e) {				
				throw new DAOException(e.getMessage(), e);
			}
		}
		return AgencyUserList;
	}





	}
